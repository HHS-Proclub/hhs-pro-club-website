{
    "PRA4": {
        "title": "Shooting Practice",
        "type": "Advanced",
        "state": "up",
        "blurb": "Aim Training",
        "description": "<p>Recently Jim decided to improve his pistol shooting skills. Today his coach offered him the following exercise. He placed <script type=\"math\/tex\">n<\/script> cans in a row on a table. Cans are numbered from left to right from <script type=\"math\/tex\">1<\/script> to <script type=\"math\/tex\">n<\/script>. Jim has to knock down each can exactly once to finish the exercise. He is allowed to choose the order in which he will knock the cans down.<\/p>\r\n<p>Jim knows that the <em>durability<\/em> of the <script type=\"math\/tex\">i^{th}<\/script> can is <script type=\"math\/tex\">a_i<\/script>. It means that if Jim has already knocked <script type=\"math\/tex\">x<\/script> cans down and is now about to start shooting the <script type=\"math\/tex\">i^{th}<\/script> one, he will need <script type=\"math\/tex\">a_i \\cdot x + 1<\/script> shots to knock it down. You can assume that if Jim starts shooting the <script type=\"math\/tex\">i^{th}<\/script> can, he will be shooting it until he knocks it down.<\/p>\r\n<p>Your task is to choose such an order of shooting so that the number of shots required to knock each of the <script type=\"math\/tex\">n<\/script> given cans down exactly once is minimum possible.<\/p>",
        "hints": "<p>To decrease the cumulative sum of <script type=\"math\/tex\">a_i \\cdot x + 1<\/script> for all <script type=\"math\/tex\">i<\/script>, Jim needs to hit the cans with a higher value of <script type=\"math\/tex\">a_i<\/script> first.<\/p>",
        "inputForm": "<p>The first line contains the number of test cases, <script type=\"math\/tex\">t<\/script>.<\/p>\r\n<p>For each test case:<\/p>\r\n<p>The first line contains one integer <script type=\"math\/tex\">n<\/script> (<script type=\"math\/tex\">2 \\leq n \\leq 1000<\/script>) \u2014 the number of cans.<\/p>\r\n<p>The second line of the input contains the sequence <script type=\"math\/tex\">a_1, a_2, ..., a_n<\/script> (<script type=\"math\/tex\">1 \\leq a_i \\leq 1000<\/script>), where <script type=\"math\/tex\">a_i<\/script> is the durability of the <script type=\"math\/tex\">i^{th}<\/script> can.<\/p>",
        "sampleInput": "1\r\n3\r\n20 10 20",
        "outputForm": "<p>For each test case, print the minimum number of shots required to knock each of the <script type=\"math\/tex\">n<\/script> given cans down exactly once.<\/p>",
        "sampleOutput": "43"
    },
    "PRI4": {
        "title": "Spitting",
        "type": "Intermediate",
        "state": "up",
        "blurb": "About camels",
        "description": "<p>In the San Diego zoo there is an enclosure with camels. It is known that camels like to spit. Ivy watched these interesting animals for the whole day and registered in her notepad where each animal spat. Now she wants to know if there are two camels that spat at each other in the zoo. Help her to solve this task.<\/p>\r\n<p>The trajectory of a camel's spit is an arc, i.e. if the camel in position <script type=\"math\/tex\">x<\/script> spits <script type=\"math\/tex\">d<\/script> meters right, he can hit only the camel in position <script type=\"math\/tex\">x\u2009+\u2009d<\/script>, if such a camel exists.<\/p>",
        "hints": "<p>For any pair of camels, we can test whether they spat at each other by calculating where each of their spits lands and checking if the location of one camel's spit is the same location as the other camel. For the <script type=\"math\/tex\">i^{th}<\/script> camel, its spit lands at <script type=\"math\/tex\">x_i + d_i<\/script>. So, for each pair of camels <script type=\"math\/tex\">i<\/script> and <script type=\"math\/tex\">j<\/script>, check whether <script type=\"math\/tex\">x_i + d_i = x_j<\/script> and whether <script type=\"math\/tex\">x_j + d_j = x_i<\/script>.<\/p>",
        "inputForm": "<p>The first line contains the number of test cases, <script type=\"math\/tex\">t<\/script>.<\/p>\r\n<p>In each test case:<\/p>\r\n<p>The first line contains integer <script type=\"math\/tex\">n<\/script> (<script type=\"math\/tex\">1\u2009\\leq\u2009n\u2009\\leq\u2009100<\/script>) \u2014 the number of camels in the zoo. Each of the following <script type=\"math\/tex\">n<\/script> lines contains two integers <script type=\"math\/tex\">x_i<\/script> and <script type=\"math\/tex\">d_i<\/script> (<script type=\"math\/tex\">-10^4\u2009\\leq\u2009x_i\u2009\\leq\u200910^4<\/script>,\u2009<script type=\"math\/tex\">1\u2009\\leq\u2009|d_i|\u2009\\leq\u20092\u00b710^4<\/script>) \u2014 records in Ivy's notepad. <script type=\"math\/tex\">x_i<\/script> is the position of the <script type=\"math\/tex\">i^{th}<\/script> camel, and <script type=\"math\/tex\">d_i<\/script> is a distance at which the <script type=\"math\/tex\">i^{th}<\/script> camel spat. Positive values of <script type=\"math\/tex\">d_i<\/script> correspond to the rightward spits, and negative values correspond to leftward spits. No two camels may stand in the same position.<\/p>",
        "sampleInput": "2\r\n2\r\n0 1\r\n1 -1\r\n3\r\n0 1\r\n1 1\r\n2 -2",
        "outputForm": "<p>For each test case, print out <code>YES<\/code>, if two camels did spit at each other, or <code>NO<\/code>, if two camels did not spit at each other.<\/p>",
        "sampleOutput": "YES\r\nNO"
    },
    "PRB4": {
        "title": "Disturbing Words",
        "type": "Beginner",
        "state": "up",
        "blurb": "Fixing strings",
        "description": "<p>Harry is very disturbed by the fact that many people on the internet mix uppercase and lowercase letters within a single word. That's why he decided to invent an extension for his favorite browser that would change the letters in each word on a webpage so that each word either only consists of lowercase letters or only of uppercase ones. This change should be done in such a way that the least number of letters is modified. For example, the word <code>HoUse<\/code> must be replaced with <code>house<\/code>, and the word <code>ViP<\/code> \u2014 with <code>VIP<\/code>. If a word contains an equal number of uppercase and lowercase letters, you should replace all the letters with lowercase ones. For example, <code>maTRIx<\/code> should be replaced by <code>matrix<\/code>. Your task is to use the given method on one given word.<\/p>",
        "hints": "<p>First, count the number of lowercase letters and uppercase letters in the given string. If the number of uppercase letters strictly exceeds the number of lowercase letters, make all letters uppercase. Otherwise, make all letters lowercase.<\/p>",
        "inputForm": "<p>The first line contains the number of test cases, <script type=\"math\/tex\">t<\/script>.<\/p>\r\n<p>For each test case, there is a line containing a word <script type=\"math\/tex\">s<\/script>. This word consists of uppercase and lowercase Latin letters, and its length can range from <script type=\"math\/tex\">1<\/script> to <script type=\"math\/tex\">100<\/script>.<\/p>",
        "sampleInput": "3\r\nHoUse\r\nViP\r\nmaTRIx",
        "outputForm": "<p>For each test case, print the corrected word <script type=\"math\/tex\">s'<\/script>. If the given word <script type=\"math\/tex\">s<\/script> has <strong>strictly<\/strong> more uppercase letters, convert all the letters in the word to uppercase. Otherwise, make all letters lowercase.<\/p>",
        "sampleOutput": "house\r\nVIP\r\nmatrix"
    },
    "PRA3": {
        "title": "Playlist",
        "type": "Advanced",
        "state": "up",
        "blurb": "Finding the best songs",
        "description": "<p>You have a playlist consisting of <script type=\"math\/tex\">n<\/script> songs. The <script type=\"math\/tex\">i^{th}<\/script> song is characterized by two numbers <script type=\"math\/tex\">t_i<\/script> and <script type=\"math\/tex\">b_i<\/script> \u2014 its length and beauty respectively. The pleasure of listening to a set of songs is equal to the total length of the songs in the set multiplied by the minimum beauty among them. For example, the pleasure of listening to a set of <script type=\"math\/tex\">3<\/script> songs having lengths <script type=\"math\/tex\">[5,7,4]<\/script> and beauty values <script type=\"math\/tex\">[11,14,6]<\/script> is equal to <script type=\"math\/tex\">(5+7+4) \\cdot 6 = 96<\/script>.<\/p>\r\n<p>You need to choose <strong>at most <script type=\"math\/tex\">k<\/script> songs<\/strong> from your playlist, so the pleasure of listening to the set of these songs them is maximum possible.<\/p>",
        "hints": "<p>If we fix a song with minimum beauty in the answer, then we need to take the remaining <script type=\"math\/tex\">k\u22121<\/script> songs (or less) whose beauties are greater than or equal to the beauty of the fixed song \u2014 and the longer they are, the better.<\/p>\r\n<p>First, sort the songs based on beauty (<script type=\"math\/tex\">b_i<\/script>) from greatest to least and store them in an array. Then, iterate through the array, testing out different \"minimum beauty\" values. Among the songs with a higher beauty value than the one being tested, find the set of <script type=\"math\/tex\">k<\/script> longest songs. How would you find these <script type=\"math\/tex\">k<\/script> songs? Is brute force fast enough?<\/p>",
        "inputForm": "<p>The first line contains the number of test cases, <script type=\"math\/tex\">t<\/script>.<\/p>\r\n<p>In each test case:<\/p>\r\n<p>The first line contains two integers <script type=\"math\/tex\">n<\/script> and <script type=\"math\/tex\">k<\/script> (<script type=\"math\/tex\">1 \\leq k \\leq n \u2264 3 \\cdot 10^5<\/script>) \u2013 the number of songs in the playlist and the maximum number of songs you can choose, respectively.<\/p>\r\n<p>Each of the next <script type=\"math\/tex\">n<\/script> lines contains two integers <script type=\"math\/tex\">t_i<\/script> and <script type=\"math\/tex\">b_i<\/script> (<script type=\"math\/tex\">1 \\leq t_i, b_i \\leq 10^6<\/script>) \u2014 the length and beauty of the <script type=\"math\/tex\">i^{th}<\/script> song.<\/p>",
        "sampleInput": "1\r\n4 3\r\n4 7\r\n15 1\r\n3 6\r\n6 8",
        "outputForm": "<p>For each test case, print one integer \u2014 the maximum pleasure you can get.<\/p>",
        "sampleOutput": "78"
    },
    "PRI3": {
        "title": "Disturbed People",
        "type": "Intermediate",
        "state": "up",
        "blurb": "Keeping the peace",
        "description": "<p>There is a house with <script type=\"math\/tex\">n<\/script> flats situated on the main street of the Shire. George is watching this house every night. The house can be represented as an array of <script type=\"math\/tex\">n<\/script> integer numbers <script type=\"math\/tex\">a_1, a_2, ..., a_n<\/script> where <script type=\"math\/tex\">a_i = 1<\/script> if the light in the <script type=\"math\/tex\">i^{th}<\/script> flat is on and <script type=\"math\/tex\">a_i = 0<\/script> otherwise.<\/p>\r\n<p>George thinks that a person in the <script type=\"math\/tex\">i^{th}<\/script> flat is disturbed and cannot sleep if and only if <script type=\"math\/tex\">1 < i < n<\/script> and <script type=\"math\/tex\">a_{i-1} = a_{i+1} = 1<\/script> and <script type=\"math\/tex\">a_i = 0<\/script>.<\/p>\r\n<p>George is concerned by the following question: what is the minimum number <script type=\"math\/tex\">k<\/script> such that if people from exactly <script type=\"math\/tex\">k<\/script> pairwise distinct flats will turn off the lights then nobody will be disturbed? Your task is to find this number <script type=\"math\/tex\">k<\/script>.<\/p>",
        "hints": "<p>Scan the list of <script type=\"math\/tex\">1<\/script>'s and <script type=\"math\/tex\">0<\/script>'s from left to right for patterns of \"<script type=\"math\/tex\">101<\/script>\"s, since only those patterns indicate the presence of \"disturbed\" people. In order for the person in the middle of each \"<script type=\"math\/tex\">101<\/script>\" pattern to not be \"disturbed\", one of the <script type=\"math\/tex\">1<\/script>'s should be changed to a <script type=\"math\/tex\">0<\/script>. Now, which <script type=\"math\/tex\">1<\/script> should be changed to a <script type=\"math\/tex\">0<\/script>? Use the example sequence \"<script type=\"math\/tex\">1101011<\/script>\" to find out.<\/p>",
        "inputForm": "<p>The first line contains the number of test cases, <script type=\"math\/tex\">t<\/script>.<\/p>\r\n<p>In each test case:<\/p>\r\n<p>The first line of the input contains one integer <script type=\"math\/tex\">n<\/script> (<script type=\"math\/tex\">3 \\leq n \\leq 100<\/script>) \u2014 the number of flats in the house.<\/p>\r\n<p>The second line of the input contains <script type=\"math\/tex\">n<\/script> integers <script type=\"math\/tex\">a_1, a_2, ..., a_n<\/script>, where <script type=\"math\/tex\">a_i<\/script> is the state of the light in the <script type=\"math\/tex\">i^{th}<\/script> flat (<script type=\"math\/tex\">a_i<\/script> is either <script type=\"math\/tex\">0<\/script> for <em>off<\/em> or <script type=\"math\/tex\">1<\/script> for <em>on<\/em>).<\/p>",
        "sampleInput": "2\r\n10\r\n1 1 0 1 1 0 1 0 1 0\r\n5\r\n1 1 0 0 0",
        "outputForm": "<p>For each test case, print only one integer \u2014 the minimum number <script type=\"math\/tex\">k<\/script> such that if people from exactly <script type=\"math\/tex\">k<\/script> pairwise distinct flats turn off the light then nobody will be disturbed.<\/p>",
        "sampleOutput": "2\r\n0"
    },
    "PRB3": {
        "title": "Rumor",
        "type": "Beginner",
        "state": "up",
        "blurb": "Secrets",
        "description": "<p>Fallon promised himself that he would never play computer games... But recently Firestorm \u2014 a well-known game developing company \u2014 published their newest game, <em>World of Farcraft<\/em>, and it became really popular. Of course, Fallon started playing it.<\/p>\r\n<p>Now he tries to solve a quest. The task is to come to a settlement named Overcity and spread a rumor in it.<\/p>\r\n<p>Fallon knows that there are <script type=\"math\/tex\">n<\/script> characters in Overcity. Some characters are friends to each other, and they share information they got. Also, Fallon knows that he can bribe each character so that he or she starts spreading the rumor; the <script type=\"math\/tex\">i^{th}<\/script> character wants <script type=\"math\/tex\">c_i<\/script> gold in exchange for spreading the rumor. When a character hears the rumor, he tells it to all his friends, and they start spreading the rumor to their friends (for free), and so on.<\/p>\r\n<p>The quest is finished when all <script type=\"math\/tex\">n<\/script> characters know the rumor. What is the minimum amount of gold Fallon needs to spend in order to finish the quest?<\/p>",
        "hints": "<p>The given pairs of friends forms a graph of friends, possibly with multiple <a href=\"https:\/\/www.geeksforgeeks.org\/connected-components-in-an-undirected-graph\/\">connected components<\/a>. If even one person in a connected component gets ahold of the rumor, then all people in the connected component will know the rumor. To find each connected component, use a depth-first search or a breath-first search on the graph. So, Fallon has to pay only one person in each connected component to spread the rumor to everyone in all connected components. If that is the case, how can he minimize the total amount he spends?<\/p>",
        "inputForm": "<p>The first line contains the number of test cases, <script type=\"math\/tex\">t<\/script>.<\/p>\r\n<p>In each test case:<\/p>\r\n<p>The first line contains two integer numbers <script type=\"math\/tex\">n<\/script> and <script type=\"math\/tex\">m<\/script> (<script type=\"math\/tex\">1\u2009\\leq\u2009n\u2009\\leq\u200910^5<\/script>,\u2009<script type=\"math\/tex\">0\u2009\\leq\u2009m\u2009\\leq\u200910^5<\/script>) \u2014 the number of characters in Overcity and the number of pairs of friends.<\/p>\r\n<p>The second line contains <script type=\"math\/tex\">n<\/script> integer numbers <script type=\"math\/tex\">c_i<\/script> (<script type=\"math\/tex\">0\u2009\\leq\u2009c_i\u2009\\leq\u200910^9<\/script>) \u2014 the amount of gold that the <script type=\"math\/tex\">i^{th}<\/script> character asks for to start spreading the rumor.<\/p>\r\n<p>Then <script type=\"math\/tex\">m<\/script> lines follow, each containing a pair of numbers <script type=\"math\/tex\">(x_i,\u2009y_i)<\/script> which represent that characters <script type=\"math\/tex\">x_i<\/script> and <script type=\"math\/tex\">y_i<\/script> are friends (<script type=\"math\/tex\">1\u2009\\leq\u2009x_i,\u2009y_i\u2009\\leq\u2009n, x_i\u2009\\neq\u2009y_i<\/script>). It is guaranteed that each pair is listed at most once.<\/p>",
        "sampleInput": "1\r\n5 2\r\n2 5 3 4 8\r\n1 4\r\n4 5",
        "outputForm": "<p>For each test case, print one number \u2014 the minimum amount of gold Fallon has to spend in order to finish the quest.<\/p>",
        "sampleOutput": "10"
    },
    "PRA2": {
        "title": "Burning Midnight Oil",
        "type": "Advanced",
        "state": "up",
        "blurb": "Productivity",
        "description": "<p>One day a highly important task was commissioned to Ed \u2014 writing a program in a night. The program consists of <i>n<\/i> lines of code. Ed is already exhausted, so he works like this: first he writes <i>v<\/i> lines of code, drinks a cup of tea, then he writes as much as <i>\u230av \/ k\u230b<\/i> , drinks another cup of tea, then he writes <i>\u230av \/ k<sup>2<\/sup>\u230b<\/i> lines and so on: <i>\u230av \/ k<sup>3<\/sup>\u230b<\/i>, <i>\u230av \/ k<sup>4<\/sup>\u230b<\/i>, <i>\u230av \/ k<sup>5<\/sup>\u230b<\/i>, \u2026\r\n\r\nThe moment the current value <i>\u230av \/ k<sup>p<\/sup>\u230b<\/i> becomes 0, Ed immediately \u200b\u200bfalls asleep, and he wakes up only in the morning; by this time, the program should already be finished.\r\n\r\nEd is wondering: what minimum value of <i>v<\/i> can allow him write at least <i>n<\/i> lines of code before he falls asleep?<\/p>",
        "hints": "Trying and testing every possible value of <i>v<\/i> can be every inefficient ... what about using <b>binary search<\/b>?",
        "inputForm": "The first line of input has an integer, which is the number of test cases <i>T<\/i>. Each of the following <i>T<\/i> lines consists of two integers <i>n<\/i> and <i>k<\/i>, separated by spaces. The first integer, <i>n<\/i>, is the size of Ed's program (in lines) where <i>1\u2009\u2264\u2009n\u2009\u2264\u200910<sup>9<\/sup><\/i>, and the second integer, <i>k<\/i>, is Ed's productivity reduction coefficient where <i>2\u2009\u2264\u2009k\u2009\u2264\u200910<\/i>.",
        "sampleInput": "3\r\n7 2\r\n59 9\r\n1 9",
        "outputForm": "The output should consist of <i>T<\/i> lines. The <i>i<sup>th<\/sup><\/i> line should have the answer to the <i>i<sup>th<\/sup><\/i> test case.\r\n",
        "sampleOutput": "4\r\n54\r\n1\r\n"
    },
    "PRI2": {
        "title": "Binary number",
        "type": "Intermediate",
        "state": "up",
        "blurb": "Maths",
        "description": "<p>Daisy loves math a lot. That's why she plays with numbers when she is bored, and she likes to perform particular operations on these numbers.\r\n\r\nDaisy takes some positive integer <i>x<\/i> and, through a series of steps, wants to produce 1 from it. While <i>x<\/i> is not equal to 1, Daisy repeats the following action: if <i>x<\/i> is odd, then she adds 1 to it, otherwise she divides <i>x<\/i> by 2. Daisy knows that for any positive integer this process ends in finite time.\r\n\r\nHow many actions should Daisy perform to get a number one from number <i>x<\/i>?<\/p>",
        "hints": "A binary number having 10<sup>6<\/sup> digits is enormously big ... too big to store in an <code>int<\/code> or even a <code>long long int<\/code>. What about using strings to store and manipulate these numbers?",
        "inputForm": "The first line of input has a single integer, which is the number of test cases <i>T<\/i>. The next <i>T<\/i> lines each have a positive integer <i>x<\/i> <b>in the binary number system<\/b>. It is guaranteed that the first binary digit of <i>x<\/i> is non-zero and the number of digits does not exceed 10<sup>6<\/sup>.",
        "sampleInput": "3\r\n1001001\r\n11110001101\r\n11",
        "outputForm": "The output should consist of <i>T<\/i> lines, each with a single integer. The <i>i<sup>th<\/sup><\/i> line should contain the answer for the <i>i<sup>th<\/sup><\/i> test case.\r\n",
        "sampleOutput": "12\r\n16\r\n3"
    },
    "PRB2": {
        "title": "Haiku",
        "type": "Beginner",
        "state": "up",
        "blurb": "Poetry",
        "description": "<p>\r\nA haiku is a genre of Japanese traditional poetry.\r\n\r\nA haiku poem consists of 17 syllables split into three phrases, containing 5, 7 and 5 syllables respectively. A haiku masterpiece contains a concise but vivid description of a moment in those three phrases. and haikus are rich with symbols. A haiku can say a lot using a few words.\r\n\r\nFor simplification, in this problem we will define the number of syllables in the phrase to be the number of vowel letters there. Only these characters are vowel letters: \"a\", \"e\", \"i\", \"o\" and \"u\".\r\n\r\nGiven a collection of 3-line poems, determine whether each of them is a haiku.\r\n<\/p>",
        "hints": "To determine whether a poem is a haiku, we should check if the first line has 5 vowels, the second line has 7 vowels, and the third line has 5 vowels. To find the number of vowels on a given line, we should count the number of occurrences of the characters \"a\", \"e\", \"i\", \"o\", and \"u\" individually in the line and add them up. Now that we generally know how to check whether a poem is a haiku, find a specific way to count the number of occurrences of a character in a string, and apply it as specified to the problem.",
        "inputForm": "The first line of input has a single integer, which is the number of test cases <i> T <\/i>. The next <i> 3T <\/i> lines of input has <i> T <\/i> poems. Each poem has 3 phrases, each of which lie on separate lines. Each phrase consists of one or more words, which are separated by one or more spaces. A word is a non-empty sequence of lowercase Latin letters. Leading and\/or trailing whitespaces in phrases are allowed. Every phrase has at least one non-whitespace character.",
        "sampleInput": "2\r\nin this website\r\nthere are many problems\r\nto be answered\r\no vetus stagnum\r\n   rana    de ripa salit\r\n  ac   sonant     aquae\r\n",
        "outputForm": "The output should consist of <i> T <\/i> lines. The <i> i<sup>th<\/sup><\/i> line should have either a <code> \"YES\" <\/code> (without the quotes), if the corresponding poem is a haiku, or a <code> \"NO\" <\/code>, if the corresponding poem is not a haiku.",
        "sampleOutput": "YES\r\nNO"
    },
    "PRA1": {
        "title": "GCDs",
        "type": "Advanced",
        "state": "up",
        "blurb": "The maths",
        "description": "<p>Carl is fascinated with numbers, especially the GCD (<a href=\"https:\/\/brilliant.org\/wiki\/greatest-common-divisor\/\">greatest common divisor<\/a>) function. What he likes to do is that he takes a number X and he computes the sum of its digits S(X). Then, he calculates the GCD of X and S(X). He wants to find values of X such that GCD(X, S(X)) > 1.<\/p>\r\n<p>Given an integer N, help him find the least number X >= N that satisfies this property.<\/p>\r\n<p>Explanation for the first sample test case:<br \/>\r\nLet X = 11. The sum of the digits of X is 1+1=2. The GCD of 11 and 2 is <script type=\"math\/tex\">1<\/script>, so this does not satisfy the property.<br \/>\r\nLet X = 12. The sum of the digits of X is 1+2=3. The GCD of 12 and 3 is <script type=\"math\/tex\">3<\/script>, so this satisfies the property.<br \/>\r\nSince <script type=\"math\/tex\">12<\/script> is the least number >= 11 that satisfies the property, it is the answer for the first sample test.<\/p>",
        "hints": "<ol>\r\n<li>\r\n<p>Be careful: <script type=\"math\/tex\">N<\/script> can be really big, too big to fit into a standard \"int\" data type. You may need to use a \"long\" data type instead. <strong>Test your code locally with a big number<\/strong> to see if it works correctly.<\/p>\r\n<\/li>\r\n<li>\r\n<p>Since <script type=\"math\/tex\">N<\/script> can be really big, loss of precision can occur in Python. An example test case where this leads to the wrong answer is 866420329392106821. Debug using this test to see why it happens. Use integer division (\/\/) to avoid this issue.<\/p>\r\n<\/li>\r\n<li>\r\n<p>How do you efficiently find the GCD of two numbers? One of the two numbers is guaranteed to be small, so that might help. Alternatively, the internet could have some pre-written code...<\/p>\r\n<\/li>\r\n<li>\r\n<p>Try a few values for X... one of them's bound to work.<\/p>\r\n<\/li>\r\n<li>\r\n<p>What if X was a multiple of 3?<\/p>\r\n<\/li>\r\n<\/ol>\r\n<p>If you'd like to discuss these challenge problems, feel free to use our <a href=\"https:\/\/discord.gg\/82Ef6eA\">Discord server!<\/a><\/p>",
        "inputForm": "<p>The first line of the input contains the number of test cases <script type=\"math\/tex\">T<\/script>.<br \/>\r\nThe following <script type=\"math\/tex\">T<\/script> lines each contain a single number <script type=\"math\/tex\">N<\/script> (<script type=\"math\/tex\">1 \\leq N \\leq 10^{18}<\/script>).<\/p>",
        "sampleInput": "3\r\n11\r\n31\r\n75",
        "outputForm": "<p>Output <script type=\"math\/tex\">T<\/script> lines, where the ith line contains a single number, <script type=\"math\/tex\">X<\/script>, that is the answer to the ith test case.<\/p>",
        "sampleOutput": "12\r\n33\r\n75"
    },
    "PRI1": {
        "title": "Adding Numbers",
        "type": "Intermediate",
        "state": "up",
        "blurb": "Intro to for loops",
        "description": "<p>Bob, Alice's classmate, is a little smarter. He knows how to add 1 to a number, but, when he is given any two numbers, he does not know how to add them. Write a program to help Bob add two numbers.<\/p>",
        "hints": "<ol>\r\n<li>Here is some source code for all 3 languages to help get you started. All the programs below parse the input, but they just print out <script type=\"math\/tex\">-1<\/script> for each test case.<\/li>\r\n<\/ol>\r\n<p>Java (Don't use the package statement, and make sure the class name is the same as the problem name)<\/p>\r\n<pre><code class=\"java\">import java.util.Scanner;\r\n\r\npublic class PRI1 {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int T = sc.nextInt();\r\n        \/\/ Loop through each test case\r\n        for (int i = 0; i < T; i++) {\r\n            int N = sc.nextInt();\r\n            int M = sc.nextInt();\r\n            System.out.println(-1);\r\n        }\r\n    }\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Python 3<\/p>\r\n<pre><code class=\"python\">T = int(input())\r\n# Loop through each test case\r\nfor i in range(T):\r\n    N, M = map(int, input().split())\r\n    print(-1)\r\n<\/code><\/pre>\r\n\r\n<p>C++<\/p>\r\n<pre><code class=\"cpp\">#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n    int T;\r\n    cin >> T;\r\n    \/\/ Loop through each test case\r\n    for (int i = 0; i < T; i++) {\r\n        int N, M;\r\n        cin >> N >> M;\r\n        cout << -1 << endl;\r\n    }\r\n    return 0;\r\n}\r\n<\/code><\/pre>",
        "inputForm": "<p>The first line has the number of test cases <script type=\"math\/tex\">T<\/script>.<br \/>\r\nThe following <script type=\"math\/tex\">T<\/script> lines each contain two numbers, <script type=\"math\/tex\">N<\/script> and <script type=\"math\/tex\">M<\/script>.<\/p>",
        "sampleInput": "3\r\n1 2\r\n3 4\r\n5 6",
        "outputForm": "<p>The output should contain <script type=\"math\/tex\">T<\/script> lines, each of which should contain a single number: <script type=\"math\/tex\">N+M<\/script>.<\/p>",
        "sampleOutput": "3\r\n7\r\n11"
    },
    "PRB1": {
        "title": "Plus 1",
        "type": "Beginner",
        "state": "up",
        "blurb": "Alice's condundrum",
        "description": "<p>For her math homework, Alice is given problems that ask her to add 1 to the numbers she is given. Unfortunately (very unfortunately), Alice does not know how to add.<\/p>\r\n<p>Help Alice by writing a program that takes in one number from the input, adds 1 to it, and outputs the result.<\/p>",
        "hints": "<ol>\r\n<li>\r\n<p>If you're not too familiar with how to parse input or print output, a quick Google search might be helpful (or you can take a look at the sample programs below). Remember not to print any prompts like \"Enter a number\" or \"The answer is\" in your program. The grader will get confused by these prompts, and your solution may be marked as wrong!<\/p>\r\n<\/li>\r\n<li>\r\n<p>Here is some source code for all 3 languages to help get you started. All the programs below store the integer <script type=\"math\/tex\">N<\/script> into a variable, and they output the same integer back.<\/p>\r\n<\/li>\r\n<\/ol>\r\n<p>Java (Don't use the package statement, and make sure the class name is the same as the problem name)<\/p>\r\n<pre><code class=\"java\">import java.util.Scanner;\r\n\r\npublic class PRB1 {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int N = sc.nextInt();\r\n        System.out.println(N);\r\n    }\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Python 3<\/p>\r\n<pre><code class=\"python\">N = int(input())\r\nprint(N)\r\n<\/code><\/pre>\r\n\r\n<p>C++<\/p>\r\n<pre><code class=\"cpp\">#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n    int N;\r\n    cin >> N;\r\n    cout << N << endl;\r\n    return 0;\r\n}\r\n<\/code><\/pre>",
        "inputForm": "<p>The input contains one and only one integer: <script type=\"math\/tex\">N<\/script>.<br \/>(Note: We do not mention the number of test cases since this problem only has one test case).<\/p>",
        "sampleInput": "2",
        "outputForm": "<p>Output a single integer, <script type=\"math\/tex\">N+1<\/script>.<\/p>",
        "sampleOutput": "3"
    },
    "PRB0": {
        "title": "Hello World!",
        "type": "Beginner",
        "state": "up",
        "blurb": "The first problem",
        "description": "<p><strong>Welcome to the challenge problem section of HHS Programming Club!<\/strong> &#128578;<\/p>\n<p>These challenge problems are designed to help sharpen your programming skills in a fun and entertaining way. Some of the problems will be quite challenging, but you'll learn a lot by solving them!<\/p>\n<p>To submit a solution to a challenge problem, scroll down to the bottom of the page, choose which programming language you want to use, select the code file that you want to submit, and click the submit button.<\/p>\n<p>When you submit a solution to a challenge problem, your code will be tested to make sure it is correct. The program will be run with a hidden set of input, and your program should produce the correct output to get the problem correct.<\/p>\n<p>For this problem, your goal is to <strong>output the string \"Hello World!\" on a single line<\/strong>. You'll need to print the exact same string to get this problem correct (including capitalization \/ punctuation).<\/p>\n<p>Not sure which programming language to go for? If you have prior experience with a programming language, that's the one you should use! Otherwise, Java would probably be your best bet, since the school's programming courses (Intro to Programming \/ APCS) use Java.<\/p>\n<p>In order to write code for the programming language you choose, you'll need to install some stuff. We recommend installing Eclipse for Java, and Visual Studio Code for Python 3 or C++. Alternatively, if you just want to test out some short code, you can do that without downloading anything by using online code runners like <a href=\"https:\/\/repl.it\/\" target=\"_blank\">repl.it<\/a>.<\/p>\n<p>If you need hints for a challenge problem, feel free to click on the \"Show Hints\" button below. It's also completely fine (and encouraged!) to search for help online while doing the challenge problems.<\/p>",
        "hints": "<p>If you're new to coding or haven't gotten set up yet, don't worry! We'll go over the solution to this problem, along with setup instructions, during our meeting next Tuesday.<\/p>\n<p>Here is some sample code that solves this problem in all 3 languages.<\/p>\n<p>Java (Change the class and filename to match the problem name)<\/p>\n<pre><code class=\"java\">public class PRB0 {\n    public static void main(String[] args) {\n        System.out.println(&quot;Hello World!&quot;);\n    }\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\">print(&quot;Hello World!&quot;)\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n\nint main() {\n    std::cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; std::endl;\n    return 0;\n}\n<\/code><\/pre>",
        "inputForm": "There is no input for this problem.",
        "sampleInput": " ",
        "outputForm": "Output a single line containing the string \"Hello World!\" (without the quotes).",
        "sampleOutput": "Hello World!"
    }
}