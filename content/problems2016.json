{
    "PRA27": {
        "title": "ABC",
        "type": "Advanced",
        "state": "up",
        "blurb": "A, B, and C...",
        "description": "You are given two ints: N and K. Andrew is interested in strings that satisfy the following conditions:<br><br>The string has exactly N characters, each of which is either 'A', 'B' or 'C'.<br>The string s has exactly K pairs (i, j) (0 <= i < j <= N-1) such that s[i] < s[j].<br>If there exists a string that satisfies the conditions, find and return any such string. Otherwise, return \"Z\".",
        "inputForm": "Line 1: the number of test cases n<br>Lines 2-(n+1): N and K, separated by spaces",
        "sampleInput": "2<br>3 0<br>5 10",
        "outputForm": "The string that satisfies the given condition, or an empty string if the conditions cannot be met.",
        "sampleOutput": "CBA<br>Z"
    },
    "PRB26": {
        "title": "Cat and Rabbit",
        "type": "Beginner",
        "state": "up",
        "blurb": "Guessing game...",
        "description": "A cat and a rabbit are playing a simple number guessing game. The cat chose two different positive integers X and Y. He then told the rabbit several numbers. One of those numbers was X + Y and another was X - Y. The others were simply made up. <br><br><br><br>The rabbit thinks the cat prefers large numbers. Given a int[] hints containing the numbers the cat told the rabbit, return the largest possible value of X * Y.",
        "inputForm": "Line 1: The number of test cases n<br>Lines 2-(n+1): The elements of hints[], separated by spaces",
        "sampleInput": "2<br>1 4 5<br>1 4 5 8",
        "outputForm": "A single int representing the largest possible value of X * Y.<br><br>Explanation of sample 1: The rabbit can determine that (X, Y) = (3, 2).<br><br>Explanation of sample 2: Possible pairs (X, Y) are (3, 2) and (6, 2). The values of X * Y are 6 and 12, respectively, and the largest is 12.<br>",
        "sampleOutput": "6<br>12"
    },
    "PRA26": {
        "title": "Varun's Coins",
        "type": "Advanced",
        "state": "up",
        "blurb": "Varun likes coins...",
        "description": "Varun likes coins. For any non-negative integer K, he has exactly two coins of value 2^K (i.e., two to the power of K).<br><br>You are given a long i. Return the number of different ways Taro can represent the value i with coins that he has. (Two representations are considered different if there is a value that occurs a different number of times in the representations.)",
        "inputForm": "Line 1: The number of test cases n<br>Line 2-(n+1): long i",
        "sampleInput": "2<br>1<br>6<br>",
        "outputForm": "A single number representing the number of different ways Taro can represent the value N with coins that he has.<br><br>Explanation of sample 1: The only possible way to represent N in this case is to use one coin of value 1.<br><br>Explanation of sample 2: The following three representations are possible in this case: {1, 1, 2, 2}, {1, 1, 4} and {2, 4}",
        "sampleOutput": "1<br>3"
    },
    "PROCO4": {
        "title": "Greedy",
        "type": "Beginner",
        "state": "up",
        "blurb": "Strings t and s...",
        "description": "You are given the Strings s and t. Both strings have the same length.<br><br>You are allowed to modify s. In each step you may choose two valid indices i and j such that i > j, and change s[i] to s[j]. For example, if s = \"abc\", you may choose i=2 and j=0, which will change s to \"aba\".<br><br>Return \"Possible\" (quotes for clarity) if you can change s into t by a sequence of zero or more steps. Otherwise, return \"Impossible\".<br><br>Greedy:<br>https:\/\/www.hackerearth.com\/practice\/algorithms\/greedy\/basics-of-greedy-algorithms\/tutorial\/",
        "inputForm": "Line 1: number of test cases n<br>Lines 2-(n+1): String t and String s, separated by spaces",
        "sampleInput": "2<br>abc aba<br>abc bbc",
        "outputForm": "Return \"Possible\" (quotes for clarity) if you can change s into t by a sequence of zero or more steps. Otherwise, return \"Impossible\". Note that the return values are case-sensitive.<br><br>Explanation of samples:<br>1. This is the example from the problem statement. We can change s into t by changing s[2] to s[0].<br>2. Note that in each step i must be greater than j. You are not allowed to choose i=0 and j=1.",
        "sampleOutput": "Possible<br>Impossible"
    },
    "PROCO3": {
        "title": "Bit Manipulation",
        "type": "Beginner",
        "state": "up",
        "blurb": "Magic number...",
        "description": "A magic number is defined as a number which can be expressed as a power of 5 or sum of unique powers of 5. First few magic numbers are 5, 25, 30(5 + 25), 125, 130(125 + 5), \u2026.<br><br>Given an int i, write an algorithm to find the ith Magic number.<br><br>Bit Manipulation:<br>https:\/\/www.hackerearth.com\/practice\/notes\/bit-manipulation\/",
        "inputForm": "Line 1: The number of test cases n<br>Line 2-(n+1): int i",
        "sampleInput": "2<br>2<br>5",
        "outputForm": "The maximum revenue possible from selling k tickets as a single int",
        "sampleOutput": "25<br>130"
    },
    "PROCO2": {
        "title": "Priority Queue",
        "type": "Advanced",
        "state": "up",
        "blurb": "Selling tickets...",
        "description": "Given \u2018N\u2019 windows where each window contains certain number of tickets at each window. Price of a ticket is equal to number of tickets remaining at that window. Write an algorithm to sell \u2018k\u2019 tickets from these windows in such a manner so that it generates the maximum revenue.<br><br>Priority Queue\/Max Heap:<br>https:\/\/www.slideshare.net\/tareq1988\/priority-queueppt<br>http:\/\/algorithms.tutorialhorizon.com\/priority-queue-implementation\/",
        "inputForm": "Line 1: int k<br>Line 2: The number of tickets in each window (ints), separated by spaces<br>",
        "sampleInput": "5<br>5 1 7 10 11 9",
        "outputForm": "The maximum revenue possible from selling k tickets as a single int",
        "sampleOutput": "49"
    },
    "PROCO1": {
        "title": "Subset Sum",
        "type": "Advanced",
        "state": "up",
        "blurb": "Choose your groceries...",
        "description": "There are grocery items that can be bought. You are given the prices of the items, as well as a budget. Return a subset of items that will allow you to spend as close as possible to your total budget without exceeding it.<br><br>Subset Sum Algorithm: <br>http:\/\/algorithms.tutorialhorizon.com\/dynamic-programming-subset-sum-problem\/",
        "inputForm": "Line 1: The number of test cases n<br>Lines 2-(n+1): A double representing the budget, followed by a colon, then a space, and then each of the item prices (doubles), separated by spaces.",
        "sampleInput": "2<br>20: 2.5 4.0 11.5 7.0 15.0 4.0 6.0 8.0<br>21.2: 2.5 4.0 11.5 7.0 15.0 4.0 6.0 8.0",
        "outputForm": "The sublist of the item prices that come as close as possible to the budget without exceeding it. The sublist should be separated by spaces and go from the leftmost value of the input prices to the rightmost value.",
        "sampleOutput": "2.5 11.5 6.0<br>2.5 11.5 7.0"
    },
    "PRB25": {
        "title": "Stick Squares",
        "type": "Beginner",
        "state": "up",
        "blurb": "Making squares out of sticks...",
        "description": "You have four sticks. Their lengths are a, b, c, and d. There is also a stick altering store. For one coin they can change (i.e., either increase or decrease) the length of any stick by 1. You can use the store as many times as you want. You would like to build a square out of your four sticks. Therefore, you need four sticks that each have the same length. Note that the length must be positive.<br><br>You are given the ints a, b, c, and d. Compute and return the smallest number of coins you need to spend at the store.",
        "inputForm": "Line 1: length a (int)<br>Line 2: length b (int)<br>Line 3: length c (int)<br>Line 4: length d (int)",
        "sampleInput": "4<br>1<br>5<br>4",
        "outputForm": "A single int representing the smallest number of coins you need to spend at the store.<br><br>Explanation of sample: The optimal side length is 4. Hence, you need to pay the store to increase b three times and to decrease c once. The total amount spent at the store will therefore be 4 coins.",
        "sampleOutput": "4"
    },
    "PRA25": {
        "title": "Soham's Tree",
        "type": "Advanced",
        "state": "up",
        "blurb": "Soham is going to decorate a tree...",
        "description": "Soham is going to decorate a rooted tree. The tree has N vertices, numbered 0 through N-1. Vertex 0 is the root of the tree.<br><br>You are given the description of the tree in a int[] parent. For each valid i, the parent of vertex i+1 is parent[i]. Note that the number of the parent is always smaller than the number of the child.<br><br>Each vertex of the tree must be painted in one of two colors: red or green. After the entire tree has been painted we can compute the cost of the painting. For each i, the cost of painting vertex i is defined as the number of vertices that are in the subtree rooted at i and have the same color as vertex i. For example, if a vertex is red and all other vertices in its subtree are green, the cost of painting this vertex is 1. The cost of painting the entire tree is the sum of all costs of painting its vertices.<br><br>Return the minimum cost of painting the given tree.",
        "inputForm": "Line 1: The number of test cases n<br>Lines 2-(n+1): the elements of int[] parent, separated by spaces",
        "sampleInput": "2<br>0 0 0<br>0 1 2 3 4",
        "outputForm": "A single int representing the minimum cost of painting the given tree<br><br>Explanation of sample 1: The root vertex 0 has three children: vertices 1, 2, and 3. One optimal way to color this tree is to color all three children red and their parent green.<br><br>Explanation of sample 2: Color any three vertices green and the other three red.",
        "sampleOutput": "4<br>12"
    },
    "PRB24": {
        "title": "String Sum",
        "type": "Beginner",
        "state": "up",
        "blurb": "Find the sum of the String...",
        "description": "Given a string, return the sum of the digits 0-9 that appear in the string, ignoring all other characters. Return 0 if there are no digits in the string.",
        "inputForm": "A single String",
        "sampleInput": "aa1bc2d3",
        "outputForm": "The sum of all the digits in the String",
        "sampleOutput": "6"
    },
    "PRA24": {
        "title": "Michael and Heidi's Game",
        "type": "Advanced",
        "state": "up",
        "blurb": "Michael and Heidi play a game...",
        "description": "Michael and Heidi just played a game. The game consisted of a finite (possibly empty) sequence of turns. You do not know the exact number of turns. The turns were numbered starting from 1. In each turn, exactly one of our two players won. The winner of turn i scored i points.<br><br>You are given two ints x and y. Find out whether it is possible that at the end of the game Michael had exactly x points and Heidi had exactly y points. If it is possible, return the smallest number of turns Michael could have won. If the given final result is not possible, return -1 instead.",
        "inputForm": "Line 1: The number of test cases n<br>Lines 2-(n+1): x and y, separated by spaces",
        "sampleInput": "2<br>100000 400500<br>10 0",
        "outputForm": "If it is possible that at the end of the game Michael had exactly x points and Heidi had exactly y points, return the smallest number of turns Michael could have won. If the given final result is not possible, return -1 instead.",
        "sampleOutput": "106<br>4"
    },
    "HPI8": {
        "title": "Knapsack ",
        "type": "Advanced",
        "state": "up",
        "blurb": "Varun needs help filling his backpacks.",
        "description": "On Mondays, Varun has to carry all of his binders to school, but Varun can only carry a backpack of weight W. Of course, there are certain classes that Varun does not care about (Bio) and other classes that are absolutely essential (AP Comp Sci). Each binder has an integer weight, and an integer importance. What is the best way for Varun to pack his backpack, without exceeding the maximum weight?<br><br>",
        "inputForm": "Line 1: W, the maximum weight Varun can carry, and N, the number of binders Varun has. <br>Line 2-N: Space separated integers, with the first integer representing the weight of the binder, and the second integer representing the benefit to Varun",
        "sampleInput": "20 5<br>2 3<br>3 4<br>4 5<br>5 8<br>9 10",
        "outputForm": "Line 1: Integer value of the maximum benefit ",
        "sampleOutput": "26"
    },
    "HPI7": {
        "title": "Dijkstra's",
        "type": "Advanced",
        "state": "up",
        "blurb": "Michael tries to play chess. ",
        "description": "Michael recently started to play chess, and he is on his way to becoming a chess grandmaster. His strategy for mastering chess is to master the movement of one piece each day. Today, Michael is focusing on the movement of the knight, trying to find the shortest path from a knight's current position to a predetermined end position. <br><br>Given an NxN chessboard, a knight's starting position, and its ending position, determined the shortest path for the knight to move to its end position. <br><br>Note: The knight moves in an L, <a href = \"http:\/\/www.diatomenterprises.com\/wp-content\/uploads\/2015\/05\/01-1.jpg\">like so. <\/a><br><br>",
        "inputForm": "Line 1: N, the size of the chessboard<br>Line 2: Two space separated integers, representing the x and y coordinate of the knight's starting position (the upper left corner of the chessboard is (1,1) )<br>Line 3: Two space separated integers, representing the x and y coordinate of the knight's end position",
        "sampleInput": "4<br>1 1<br>4 4",
        "outputForm": "Line 1: The minimum number of moves the knight can take",
        "sampleOutput": "2"
    },
    "HPI6": {
        "title": "Floyd-Warshall",
        "type": "Advanced",
        "state": "up",
        "blurb": "After drinking 42 liters of Sprite, Soham is feeling really really dizzy.",
        "description": "Basically...graphs are annoying. A graph is a series of vertices ( I like to think of these are airports) and edges (which are the connections between airports). Edges can either have weights (a value for the length of the flight) or not. Edges can point in both directions, or just one. Depends on the problem! For small graphs, there is an 4-line algorithm to build an adjacency matrix, called the Floyd-Warshall algorithm, which is useful for finding the shortest path between two vertices (or airports) in a graph structures. It is useful if there are less than ~100 vertices, but more powerful algorithms, such as Djikstra\u2019s or A*, should be used for larger graphs. For the quick submission, Floyd-Warshall is perfect!<br><br>Floyd-Warshall Pseudocode:<br><br>    for (k = 1 to n)<br>        for (i = 1 to n)<br>            for (j = 1 to n)<br>                adj[i][j] = min(adj[i][j], adj[i][k] + adj[k][j]);<br><br>That\u2019s it!<br><br><br><br><br>After drinking 42 liters of Sprite, Soham is feeling really really dizzy. He is currently at his school, but needs to walk home in time for lunch! <br><br>Given a series of edges and distances between each vertex that these edges connect, can you help Soham find how long it will take for him to walk home? The answer is yes. Yes, you can.",
        "inputForm": "Line 1: An integer, N, representing the number of operations<br>Lines 2 - (N + 1): Two space-separated characters representing vertexes, followed by a distance between them.<br>Line (N + 2): Two space-separated characters representing Soham\u2019s starting location and end goal, respectively",
        "sampleInput": "7<br>A B 2<br>B C 9<br>D C 4<br>D A 2<br>A C 10<br>B D 1<br>C E 1<br>A E",
        "outputForm": "A single integer representing the shortest amount of time it will take for Soham to walk home.",
        "sampleOutput": "8"
    },
    "HPI5": {
        "title": "Maps",
        "type": "Advanced",
        "state": "up",
        "blurb": "A group of uniquely named friends has decided to exchange gifts of money.",
        "description": "Maps are a good way to create a link between two types of data. In the following example, I recommend using a HashMap or TreeMap to represent each person\u2019s \u201cbank account\u201d. Maps are a really quick, but often not the optimal, way to deal with a problem.<br><br>A group of NP (2 \u2264 NP \u2264 10) uniquely named friends has decided to exchange gifts of money. Each of these friends might or might not give some money to any or all of the other friends. Likewise, each friend might or might not receive money from any or all of the other friends.<br><br>Your goal in this problem is to deduce how much more money each person gives than they receive. The rules for gift-giving are potentially different than you might expect. Each person sets aside a certain amount of money to give and divides this money evenly among all those to whom he or she is giving a gift. <br><br>No fractional money is available, so dividing 3 among 2 friends would be 1 each for the friends with 1 left over -- that 1 left over stays in the giver's \"account\". In any group of friends, some people are more giving than others (or at least may have more acquaintances) and some people have more money than others. <br><br>Given a group of friends, no one of whom has a name longer than 14 characters, the money each person in the group spends on gifts, and a (sub)list of friends to whom each person gives gifts, determine how much more (or less) each person in the group gives than they receive.",
        "inputForm": "Line 1: The single integer, NP<br>Lines 2..NP+1: Each line contains the name of a group member <br>Lines NP+2..end: NP groups of lines organized like this: The first line in the group tells the person's name who will be giving gifts. The second line in the group contains two numbers: The initial amount of money (in the range 0..2000) to be divided up into gifts by the giver and then the number of people to whom the giver will give gifts, NGi (0 \u2264 NGi \u2264 NP-1). If NGi is nonzero, each of the next NGi lines lists the the name of a recipient of a gift.",
        "sampleInput": "5<br>dave<br>laura<br>owen<br>vick<br>amr<br>dave 200 3<br>laura<br>owen<br>vick<br>owen 500 1<br>dave<br>amr 150 2<br>vick<br>owen<br>laura 0 2<br>amr<br>vick<br>vick 0 0",
        "outputForm": "The output is NP lines, each with the name of a person followed by a single blank followed by the net gain or loss (final_money_value - initial_money_value) for that person. The names should be printed in the same order they appear starting on line 2 of the input.",
        "sampleOutput": "dave 302<br>laura 66<br>owen -359<br>vick 141<br>amr -150"
    },
    "HPI4": {
        "title": "Greedy Algorithms",
        "type": "Beginner",
        "state": "up",
        "blurb": "In Akhil\u2019s fast-paced life, it seems as though he has a million things going on at once!",
        "description": "Generosity is a good quality to have - but there\u2019s a time and place to be greedy! Greedy algorithms work by picking the best available option that your algorithm is currently choosing between. Often used with trees, greedy algorithms make a good solution to the following problem. The greedy solution in this case would choose the next possible task that has the earliest finish time.<br><br><br><br>In Akhil\u2019s fast-paced life, it seems as though he has a million things going on at once! Fortunately, as a proficient programmer, you can help Akhil determine four activities Akhil should choose to do while maximizing his utility.",
        "inputForm": "Line 1: N tasks<br>Line 2 - (N + 1): A character name of the task followed by a start and end time for that task",
        "sampleInput": "6<br>A 1 2<br>B 3 4<br>C 0 6<br>D 5 7<br>E 8 9<br>F 5 9",
        "outputForm": "Line 1: A space-separated schedule for Akhil to follow",
        "sampleOutput": "A B D E"
    },
    "HPI3": {
        "title": " Stacks and Custom Operations",
        "type": "Beginner",
        "state": "up",
        "blurb": "Andrew loves to read!",
        "description": "Problems often ask for you to read in input and deal with different situations by performing different operations. In this case, we are combining this idea with the concept of a Stack.<br><br><br><br>Andrew loves to read! With his birthday coming up, Andrew wants to buy him a birthday present, but he doesn\u2019t want to give Andrew the same book that he\u2019s currently reading. Andrew\u2019s room has a pile of books, on which the following operations can be done:<br>           1-X \/\/ Put book titled X on the top of the pile<br>           2   \/\/ Remove the book at the top of the pile<br>           3   \/\/ Print the name of the book on the top of the pile<br>",
        "inputForm": "Line 1: An integer, N, representing the number of operations<br>Lines 2 - (N + 1): A single operation (see above) to perform",
        "sampleInput": "6<br>1-Cracking the Coding Interview<br>1-The Art of Computer Programming<br>3<br>2<br>1-Algorithms<br>3",
        "outputForm": "The requested \u201c3\u201d-operator print statements",
        "sampleOutput": "The Art of Computer Programming<br>Algorithms"
    },
    "HPI2": {
        "title": "Simple Solutions",
        "type": "Beginner",
        "state": "up",
        "blurb": "Vishesh is standing in a school hallway lined with 100 closed lockers.",
        "description": "Very often (as in almost always) there are nice, easy, or concise ways to solve challenge problems. Usually, they require a little bit of thought and diagramming to figure it out. Try thinking doing some of this problem on paper to find the trick. Alternatively, try writing an iterative solution that does this in another way.<br><br><br>Vishesh is standing in a school hallway lined with 100 closed lockers. He first open all 100 lockers. After this, he closes every 2nd locker (so the 2nd, 4th, 6th\u202698th and 100th are all closed). Then, he goes to every third locker and open it if it is closed or close it if it is open (let\u2019s call this toggling the locker). <br><br>Vishesh proceeds to toggle every nth locker on pass number n. So, for example, on pass number 16 \u2013 he will toggle every 16th locker. <br>Now to make the problem harder, Vishesh has N lockers before him. After his Nth pass of the hallway, in which he toggles only locker last locker, how many lockers are now open? ",
        "inputForm": "Line 1: Given N, the number of lockers",
        "sampleInput": "200",
        "outputForm": "Line 1: The number of open lockers after Vishesh\u2019s last pass",
        "sampleOutput": "14"
    },
    "HPI1": {
        "title": "GCM\/LCM and BigInteger",
        "type": "Beginner",
        "state": "up",
        "blurb": "Heidi\u2019s dog is having trouble with some math homework.",
        "description": "The algorithms for the Greatest Common Divisor and Least Common Multiple are incredibly common for competitions. It is highly recommended that you commit these to memory as you won\u2019t be able to use the internet to look them up later. <br><br>Additionally, problems often require solutions that take up more than the size of an int, or even a long! In these cases, we recommend you use a BigInteger or BigDecimal<br><br><br>Heidi\u2019s small dog is having trouble with some math homework. Lady is unable to find the GCD and the LCM of two numbers given to her, since they numbers are just really big!",
        "inputForm": "Line 1: Two-space separated integers, X and Y<br>",
        "sampleInput": "78633238589 131466466993",
        "outputForm": "Line 1: The GCD of X and Y<br>Line 2: The LCM of X and Y",
        "sampleOutput": "32452843<br>318543249524039"
    },
    "PRB23": {
        "title": "Initials",
        "type": "Beginner",
        "state": "up",
        "blurb": "The acronym of the phrase...",
        "description": "When dealing with long names and phrases, we sometimes use the initial letters of words to form its acronym. For example, we use \"JFK\" instead of \"John Fitzgerald Kennedy\", \"lgtm\" instead of \"looks good to me\", and so on. <br><br>You are given a String name. This String contains a phrase: one or more words separated by single spaces. Please compute and return the acronym of this phrase. (As above, the acronym should consist of the first letter of each word, in order.)<br><br>Link to split() explanation: https:\/\/www.tutorialspoint.com\/java\/java_string_split.htm",
        "inputForm": "A single String name in all lowercase",
        "sampleInput": "john fitzgerald kennedy",
        "outputForm": "Return a string consisting of the first letter of each word in name",
        "sampleOutput": "jfk"
    },
    "PRA23": {
        "title": "Sorting Subsets",
        "type": "Advanced",
        "state": "up",
        "blurb": "Rearrange the elements...",
        "description": "You are given a int[] a. The elements of a are not necessarily distinct.<br><br>You want to rearrange the elements of a into a non-decreasing order. What is the smallest possible number of elements you have to move?<br><br>Formally, the operation looks as follows:<br><br>1. You select some set of positions in a.<br>2. You permute the elements on the chosen positions arbitrarily.<br><br>Compute and return the smallest possible size of the set of selected positions.<br><br>Link to recursion explanation: http:\/\/danzig.jct.ac.il\/java_class\/recursion.html",
        "inputForm": "Line 1: The number of test cases (n)<br>Lines 2-(n+1): The elements of a[], separated by spaces",
        "sampleInput": "2<br>3 2 1<br>1 2 3 4",
        "outputForm": "A single integer representing the smallest possible size of the set of selected positions.<br><br>Explanation of sample:<br>1) One can take the first and the last element and swap them.<br>2) The array is already sorted, so we can select an empty set of positions.",
        "sampleOutput": "2<br>0"
    },
    "PRB22": {
        "title": "Diet Plan",
        "type": "Beginner",
        "state": "up",
        "blurb": "Can you stick to a diet...?",
        "description": "The doctor has given you your diet, in which each character corresponds to some food that you should eat. You also know what you have eaten for breakfast and lunch, in which each character corresponds to a type of food that you have already eaten that day. You have decided that you will eat all of the remaining food in your diet during dinner, and you want to return that as a String (sorted in alphabetical order). If you have cheated in anyway (either by eating too much of one type of food, or by eating some food that is not in the dietPlan), you should return the String \"CHEATER\" (quotes for clarity).",
        "inputForm": "Line 1: A String representing your diet. There will be no duplicate characters<br>Line 2: What you have eaten for breakfast<br>Line 3: What you have eaten for lunch",
        "sampleInput": "ABCD<br>AB<br>C",
        "outputForm": "A single String in all caps representing what you should eat for dinner in order to stick to your diet, or \"CHEATER\" if you ate too much of one type of food or by eating a food that is not in the diet.<br><br>Explanation of sample:<br>You need to eat ABCD by the end of the day. You ate AB for breakfast and C for lunch. That means that you have eaten ABC and you only need to eat D for dinner.",
        "sampleOutput": "D"
    },
    "PRA22": {
        "title": "Product Subsets",
        "type": "Advanced",
        "state": "up",
        "blurb": "Can you find the subsets...?",
        "description": "You have some cards, each containing a positive integer. You are given a int[] d. Each element of d is one of those integers. The integers are not necessarily distinct.<br><br>You are also given an int goodValue. You are interested in non-empty subsets of cards with the following property: The product of integers written on those cards is exactly equal to goodValue.<br><br>Let X be the number of subsets with the above property. Compute and return the value X.",
        "inputForm": "Line 1: the number of test cases n<br>Line 2: the value of goodValue<br>Line 3: every value of d, separated by spaces",
        "sampleInput": "2<br>10<br>2 3 4 5<br>1<br>1 1 1",
        "outputForm": "A single int representing the number of subsets of d that equal to goodValue",
        "sampleOutput": "1<br>7"
    },
    "PRB21": {
        "title": "Addition Game",
        "type": "Beginner",
        "state": "up",
        "blurb": "Michael works on his addition",
        "description": "Michael Chen is playing a game called Addition Game. <br><br>Three numbers A, B and C are written on a blackboard, and Michael initially has 0 points. He repeats the following operation exactly N times: He chooses one of the three numbers on the blackboard. Let X be the chosen number. He gains X points, and if X >= 1, the number X on the blackboard becomes X-1. Otherwise, the number does not change. <br><br>Return the maximum number of points he can gain if he plays optimally.",
        "inputForm": "Line 1: A<br>Line 2: B<br>Line 3: C<br>Line 4: N",
        "sampleInput": "3<br>4<br>5<br>3",
        "outputForm": "A single integer representing the highest possible number of points that Michael can get.",
        "sampleOutput": "13"
    },
    "PRA21": {
        "title": "Zoo",
        "type": "Advanced",
        "state": "up",
        "blurb": "Cats and rabbits...",
        "description": "There are N animals numbered 0 to N-1 in a zoo. Each animal is a rabbit or a cat. Their heights are pairwise distinct. <br><br><br>Andrew can't distinguish between rabbits and cats, so he asked the following question to each animal: \"How many animals of the same kind as you are taller than you?\" Each rabbit tells the number of rabbits taller than him, and each cat tells the number of cats taller than her. The differences of heights are slight, so Andrew can't tell which animals are taller than other animals. However, each animal is able to determine which animals are taller than him and which ones are shorter. <br><br><br>The answer given by the i-th animal is answers[i]. Given these numbers, return the number of configurations resulting in exactly those numbers, assuming everyone tells the truth. Two configurations are different if there exists an i such that the i-th animal is a rabbit in one configuration and cat in the other configuration.",
        "inputForm": "Line 1: The number of test cases n<br>Lines 2-(n+1): All values of answers[], separated by spaces",
        "sampleInput": "2<br>0 1 2 3 4<br>5 8",
        "outputForm": "An integer representing the number of configurations resulting in exactly the numbers in answers",
        "sampleOutput": "2<br>0"
    },
    "PRB20": {
        "title": "Mod Equation",
        "type": "Beginner",
        "state": "up",
        "blurb": "Find the number of sequences...",
        "description": "You are given the ints n, K, and v. <br><br><br><br>Consider the following modular equation with n variables: (x[0] * x[1] * x[2] * ... * x[n-1]) mod K = v. How many solutions does it have? <br><br><br><br>Formally, we want to find the number of sequences (x[0], x[1], ..., x[n-1]) such that each x[i] is an integer between 0 and K-1, inclusive, and the product of all x[i] gives the remainder v when divided by K. <br><br><br><br>Please compute and return the number of such sequences, modulo 10^9+7.",
        "inputForm": "Line 1: n<br>Line 2: K<br>Line 3: v",
        "sampleInput": "2<br>4<br>1",
        "outputForm": "A single integer representing the number of sequences such that each x[i] is an integer between 0 and K-1, inclusive, and the product of all x[i] gives the remainder v when divided by K. <br><br>Explanation of sample output:<br>The input describes the modular equation (x[0] * x[1]) mod 4 = 1. ",
        "sampleOutput": "2"
    },
    "PRA20": {
        "title": "Subsets",
        "type": "Advanced",
        "state": "up",
        "blurb": "You have a bag of balls...",
        "description": "You have a bag with some balls. There is a positive integer written on each of the balls. Balls with the same integer are identical. <br><br><br><br>A bag with balls is nice if the sum of numbers on all balls is strictly greater than the product of those numbers. For example, if the numbers on balls are {1,1,2,3}, the bag is nice because 1+1+2+3 > 1*1*2*3. <br><br><br><br>You are given a int[] numbers. Each element of numbers is a number written on one of the balls in your bag. You are going to remove some (possibly none, but not all) balls from the bag. After you do so, the bag must be nice. <br><br><br><br>Return the number of different nice bags you can obtain.",
        "inputForm": "Line 1: The number of test cases n<br>Lines 2-(n+1): The elements of numbers, separated by spaces",
        "sampleInput": "1<br>1 1 1",
        "outputForm": "The number of all the different nice bags you can obtain",
        "sampleOutput": "2"
    },
    "PRB19": {
        "title": "Three Increasing",
        "type": "Beginner",
        "state": "up",
        "blurb": "Varun has three boxes...",
        "description": "Varun has three boxes arranged in a row. The first box currently contains a candies, the second one contains b candies, and the third one contains c candies.<br><br><br><br>Varun thinks that the three boxes would look nice if they had the following two properties:<br><br>Each box should contain at least one candy.<br>The numbers of candies should form a strictly increasing sequence. In other words, the first box should contain fewer candies than the second box, and the second box should contain fewer candies than the third one.<br><br><br>Varun can only modify the current content of the boxes in one way: he can eat some of the candies.<br><br><br><br>You are given the ints a, b, and c. Compute and return the smallest possible number of candies Varun should eat in order to make his three boxes look nice. If he has no way to make his boxes look nice, return -1 instead.",
        "inputForm": "Line 1: the number of test cases n<br>Line 2-(n+1): a, b, and c (separated by spaces)",
        "sampleInput": "2<br>5 6 6<br>6 4 2",
        "outputForm": "The smallest possible number of candies Varun should eat to make his three boxes look nice",
        "sampleOutput": "2<br>-1"
    },
    "PRA19": {
        "title": "Lucky Sum",
        "type": "Advanced",
        "state": "up",
        "blurb": "Soham loves lucky sums...",
        "description": "A lucky number is a positive integer such that each of its digits is a 4 or a 7. A lucky sum is the sum of two (not necessarily distinct) lucky numbers. Soham loves lucky sums!<br><br><br><br>Soham has a String note. Each character in note is either a digit or a question mark. A number matches note if it can be produced from note by changing each question mark to a single digit. Note that the number produced this way must not have any leading zeros: after the changes, note[0] must be between '1' and '9', inclusive.<br><br><br><br>Find and return the smallest lucky sum that matches note. If there are no lucky sums that match note, return -1.",
        "inputForm": "Line 1: The number of test cases n<br>Lines 2-(n+1): A single String representing note. Each character of note will be a digit or a question mark. The first character will not be 0. At least one character will be a '?'",
        "sampleInput": "1<br>?1",
        "outputForm": "Find and return the smallest lucky sum that matches note, or -1 if there are no lucky sums that match note",
        "sampleOutput": "11"
    },
    "PRB18": {
        "title": "SquareFreeString",
        "type": "Beginner",
        "state": "up",
        "blurb": "Is it a square free string...?",
        "description": "We say that a string S is a square if it has the form TT, where T is some non-empty string. In other words, a square is a string that is a concatenation of two copies of the same non-empty string. For example, the strings \"aa\", \"bbbb\", and \"beriberi\" are squares.<br><br>A string is called square-free if none of its substrings is a square. For example, the string \"abca\" is square-free. (The substrings of this string are the strings \"a\", \"b\", \"c\", \"a\", \"ab\", \"bc\", \"ca\", \"abc\", \"bca\", and \"abca\". None of these strings is a square.)<br><br>You are given a String s. Return \"square-free\" if s is square-free. Otherwise, return \"not square-free\". Note that the return value is case-sensitive.",
        "inputForm": "Line 1: The number of test cases n<br>Lines 2-(n+1): A single String representing s",
        "sampleInput": "2<br>bobo<br>pen",
        "outputForm": "Return \"square-free\" if s is square-free. Otherwise, return \"not square-free\". Note that the return value is case-sensitive.",
        "sampleOutput": "not square-free<br>square-free"
    },
    "PRA18": {
        "title": "Good String",
        "type": "Advanced",
        "state": "up",
        "blurb": "Heidi's \"Good String\"...",
        "description": "Heidi loves to play with strings. She just learned a new operation: inserting one string X into another string Y.<br><br>When inserting X into Y, it is also allowed to place X at the beginning or at the end of Y. For example, there are exactly five ways how to insert the string \"ab\" into the string \"????\": you can produce one of the strings \"ab????\", \"?ab???\", \"??ab??\", \"???ab?\", and \"????ab\".<br><br>According to Heidi, a good string is a string that can be constructed in the following way: Initially, she takes the empty string \"\". Then, she performs a sequence of zero or more steps. In each step she inserts the string \"ab\" anywhere into the current string.<br><br>According to the above definition, the strings \"ab\", \"aabb\", and \"aababb\" are good while the strings \"aab\", \"ba\", and \"abbb\" are not good.<br><br>Heidi's friend Soham came up with a String s. Soham asked Heidi whether it is a good string. Return \"Good\" (quotes for clarity) if the string is good, or \"Bad\" if the string is not good.",
        "inputForm": "Line 1: The number of test cases n<br>Lines 2-(n+1): A single String representing s",
        "sampleInput": "2<br>aabb<br>aab",
        "outputForm": "return \"Good\" if it is a good String.<br>return \"Bad\" if it is not.",
        "sampleOutput": "Good<br>Bad"
    },
    "PRB17": {
        "title": "Truckloads",
        "type": "Beginner",
        "state": "up",
        "blurb": "We have a pile of crates at our warehouse...",
        "description": "We have a pile of crates at our warehouse that we want to load onto trucks. Our plan is to divide the pile in half forming two smaller piles, then continuing dividing each of the small piles in half until we get piles that will fit on a truck. (Of course, when we divide an odd number of crates in \"half\", one of the resulting piles will have one more crate than the other.) Our problem is to determine how many trucks we will need to ship the crates.<br>Return the number of trucks required<br><br>Link to recursion explanation: http:\/\/www.programmerinterview.com\/index.php\/recursion\/explanation-of-recursion\/",
        "inputForm": "Line 1: int numCrates<br>Line 2: int loadSize",
        "sampleInput": "14<br>3",
        "outputForm": "A single integer representing the number of trucks required.<br><br>Explanation of sample:<br>After the first division we have two piles each with 7 crates. Each of these piles must be divided giving us 2 piles of 3 and 2 piles of 4. The piles with 4 crates must be further divided giving us 2 piles of 3 and 4 piles of 2. Each of these piles fits into a truck, so we need 6 trucks.",
        "sampleOutput": "6"
    },
    "PRA17": {
        "title": "Odd Divisors",
        "type": "Advanced",
        "state": "up",
        "blurb": "Sum of odd divisors...",
        "description": "Let f(x) be the greatest odd divisor of x, where x is a positive integer. You are given a positive integer N. Return f(1)+f(2)+?+f(N).<br><br>Link to recursion explanation: http:\/\/www.programmerinterview.com\/index.php\/recursion\/explanation-of-recursion\/",
        "inputForm": "Line 1: The number of test cases i<br>Line 2-(i+1): A positive integer representing N",
        "sampleInput": "1<br>7",
        "outputForm": "A single integer representing the sum of f(1)+f(2)+?+f(N).<br><br>Explanation of sample:<br>f(1)+f(2)+f(3)+f(4)+f(5)+f(6)+f(7)=1+1+3+1+5+3+7=21",
        "sampleOutput": "21"
    },
    "PRB16": {
        "title": "Peaceful Line",
        "type": "Beginner",
        "state": "up",
        "blurb": "The teacher wants to keep the peace...",
        "description": "A teacher is trying to arrange a group of students into a line. The teacher knows that whenever she places two students with the same age next to each other, they will talk and disturb everyone. She wants to avoid that.<br><br>You are given a int[] x. Each element of x is the age of one of the students.<br><br>Determine whether it is possible for the teacher to arrange the students in a line so that there are no disturbances.",
        "inputForm": "Line 1: The number of test cases n<br>Line 2-(n+1): Each element of int[] x, separated by a single space",
        "sampleInput": "1<br>1 2 3 4",
        "outputForm": "If it can be done, return \"possible\" (quotes for clarity). If there will always be some pair of adjacent students with the same age, return \"impossible\". Note that the return value is case-sensitive.<br><br>Explanation of sample: In this case, no two students have the same age so any order works.",
        "sampleOutput": "possible"
    },
    "PRA16": {
        "title": "Bridge Sort",
        "type": "Advanced",
        "state": "up",
        "blurb": "The game of bridge...",
        "description": "A deck of cards contains 52 cards. Each card has a suit (Clubs, Diamonds, Hearts, or Spades) and a value (2, 3, ..., 9, 10, Jack, Queen, King, or Ace).<br>In the game of bridge a hand consists of 13 or fewer cards from the deck. The values of the cards are ordered as shown above, with Ace having the highest value. Suppose that hand is given as a String giving the cards in the hand. Each card is represented by a suit character C, D, H, or S followed by a value character 2, 3, ..., 9, T, J, Q, K, or A. There are no spaces separating adjacent cards in hand.<br><br>Given a String hand, return the String that represents the hand in sorted order. The proper order is to list all the cards that are Clubs, then all the Diamonds, then all the Hearts, and finally all the Spades, with the cards within each suit listed in order of ascending value.<br><br>Link for different sorting algorithms: https:\/\/betterexplained.com\/articles\/sorting-algorithms\/",
        "inputForm": "Line 1: The number of test cases<br>Line 2-(n+1): A String hand",
        "sampleInput": "1<br>HAH2H3C4D5ST",
        "outputForm": "String that represents hand in the correctly sorted order.<br><br>Explanation of Sample: This hand contains the 4 of Clubs, which must come before all the other cards because Clubs comes before all the other suits. The 5 of Diamonds is next because Diamonds are the next suit. Next come the three Heart cards, in order of ascending value, namely 2 then 3 then Ace (which is represented by the A). Finally the 10 of Spades is last because of its suit.",
        "sampleOutput": "C4D5H2H3HAST"
    },
    "PRB15": {
        "title": "Test Taking",
        "type": "Beginner",
        "state": "up",
        "blurb": "Alice was taking a test...",
        "description": "Recently, Alice had to take a test. The test consisted of a sequence of true\/false questions. Alice was completely unprepared for the test, so she just guessed each answer.<br><br>You are given the following inputs:<br><br>an int questions: the number of questions on the test.<br><br>an int guessed: the number of questions for which Alice guessed that the answer is \"true\".<br><br>an int actual: the actual number of questions for which the answer is \"true\".<br><br>In the test, each correct answer was worth 1 point and each incorrect answer was worth 0 points. Compute the largest possible number of points Alice could have received.",
        "inputForm": "Line 1: questions<br>Line 2: guessed<br>Line 3: actual",
        "sampleInput": "3<br>2<br>1",
        "outputForm": "An integer representing the largest possible number of points that Alice could have recieved",
        "sampleOutput": "2"
    },
    "PRA15": {
        "title": "SquareString",
        "type": "Advanced",
        "state": "up",
        "blurb": "Make the String a square",
        "description": "A string S is called a square if there is some string T such that S = T + T. For example, the strings \"\", aabaab\" and \"xxxx\" are squares, but \"a\", \"aabb\" and \"aabbaa\" are not. <br><br>You are given a String s. Find the longest square string that can be obtained from s by erasing some (possibly none, possibly all) of its characters. In other words, we are looking for the longest square that occurs in s as a subsequence. Return the length of that square.<br><br>Note that the answer is well-defined, as the square \"\" (the empty string) will always occur in s as a subsequence. <br><br>Dynamic Programming explanation: https:\/\/www.topcoder.com\/community\/data-science\/data-science-tutorials\/dynamic-programming-from-novice-to-advanced\/",
        "inputForm": "Line 1: The number of test cases n<br><br>Line 2-(n+1): A String",
        "sampleInput": "2<br>singing<br>frankfurt",
        "outputForm": "Integers representing the length of the longest squares that occur in the Strings",
        "sampleOutput": "6<br>4"
    },
    "PRB14": {
        "title": "Numbers Challenge",
        "type": "Beginner",
        "state": "up",
        "blurb": "A challenge of numbers...",
        "description": "Your friend Lucas gave you a sequence S of positive integers.<br><br>For a while, you two played a simple game with S: Lucas would pick a number, and you had to select some elements of S such that the sum of all numbers you selected is the number chosen by Lucas. For example, if S={2,1,2,7} and Lucas chose the number 11, you would answer that 2+2+7 = 11.<br><br>Lucas now wants to trick you by choosing a number X such that there will be no valid answer. For example, if S={2,1,2,7}, it is not possible to select elements of S that sum up to 6.<br><br>You are given the int[] S. Find the smallest positive integer X that cannot be obtained as the sum of some (possibly all) elements of S.",
        "inputForm": "Line 1: A single integer representing the number of test cases n<br>Lines 2-(n+1): The integers in the sequence S, separated by spaces",
        "sampleInput": "2<br>5 1 2<br>2 1 4",
        "outputForm": "A single integer representing the smallest positive integer that cannot be obtained as the sum of some (possibly all) elements of S.",
        "sampleOutput": "4<br>8"
    },
    "PRA14": {
        "title": "Varun's Arrays",
        "type": "Advanced",
        "state": "up",
        "blurb": "Varun likes some arrays...",
        "description": "Varun likes some arrays. The arrays he likes are the arrays that have all of the following properties:<br>1. The length of the array is n.<br>2. Each element is an integer between 1 and k, inclusive.<br>3. Whenever A and B are two consecutive elements of the array (in this order), we have (A <= B) or (A mod B != 0).<br><br>For example, suppose n=4 and k=7. Varun will like the array {1,7,7,2} because it has the right length, all elements are in the correct range, 1 <= 7, 7 <= 7, and 7 mod 2 != 0. Varun will not like the array {4,4,4,2}.<br><br>You are given the ints n and k. Let X be the number of different arrays Varun likes. Compute and return the value of X.",
        "inputForm": "Line 1: The number of test cases i<br>Lines 2-(i+1): n and k, separated by a single space<br><br>n will be between 1 and 10, inclusive.<br>k will be between 1 and 100,000, inclusive.",
        "sampleInput": "2<br>2 2<br>9 1",
        "outputForm": "A single integer representing the number of arrays that Varun likes<br><br>Explanation of sample output:<br>First test case: The three arrays Varun likes are {1,1}, {1,2}, and {2,2}.<br>Second test case: The only array Varun likes is {1,1,1,1,1,1,1,1,1}.",
        "sampleOutput": "3<br>1"
    },
    "PRB13": {
        "title": "Varun's Adoration",
        "type": "Beginner",
        "state": "up",
        "blurb": "Varun loves 12 and 142...",
        "description": "Varun loves the two numbers 12 and 142. His mom, as a birthday gift, gives him a box of digits, consisting of k1 ones, k2 twos, k3 threes, and k4 fours. He takes digits out of the box to make his two favorites numbers, and he wants to maximize the sum of all the numbers he creates. Help him out!",
        "inputForm": "The first line contains 4 numbers, k1, k2, k3, and k4.",
        "sampleInput": "5 5 5 5",
        "outputForm": "One line containing the maximum sum of all the created numbers.",
        "sampleOutput": "710<br><br>Varun will make five 142's,"
    },
    "PRA13": {
        "title": "Painting a Grid",
        "type": "Advanced",
        "state": "up",
        "blurb": "Limak the polar bear...",
        "description": "Limak is a little polar bear. Today he found two things in the snow: a bucket of blue paint and a white rectangular grid with W times H square cells.<br><br>Limak is going to paint some (possibly even all) cells blue. He wants to do it in such a way that the blue cells will form a completely filled blue rectangle. He has enough paint for M cells. What is the largest possible area of a blue rectangle he can paint?<br><br>NOTE: The inputs are large, so use longs not ints.",
        "inputForm": "Line 1: W<br>Line 2: H<br>Line 3: M",
        "sampleInput": "3<br>5<br>14",
        "outputForm": "A single integer representing the area of the largest rectangle that Limak can paint<br><br>Explanation of sample input:<br>Limak has a grid that is W = 3 cells wide and H = 5 cells tall. He doesn't have enough paint to color all 15 cells. He also cannot color just 14 or 13 cells in a way that would produce a blue rectangle. The best he can do is to color four consecutive rows blue. This will produce a blue rectangle. Its area is 12 squares.",
        "sampleOutput": "12"
    },
    "PRB12": {
        "title": "Half-word",
        "type": "Beginner",
        "state": "up",
        "blurb": "Return the half-word...",
        "description": "Given a string of even length, return the first half.",
        "inputForm": "Line 1: The number of test cases n<br>Lines 2-(n+1): A String of even length",
        "sampleInput": "2<br>Samuel<br>yipeeeee",
        "outputForm": "The first half of the given string",
        "sampleOutput": "Sam<br>yipe"
    },
    "PRA12": {
        "title": "Possible or Impossible",
        "type": "Advanced",
        "state": "up",
        "blurb": "Is it possible?",
        "description": "You are given a String S. You can modify this string by repeating the following process:<br>Find the leftmost occurrence of two consecutive letters in S that are the same.<br>If you found a pair of identical letters in the first step, delete those two letters from S.",
        "inputForm": "Line 1: Number of test cases n<br>Lines 2-(n+1): String S",
        "sampleInput": "2<br>aabccb<br>axxyybac",
        "outputForm": "Return \"Possible\" if the String can be reduced to an empty String by repeating the operation or return \"Impossible\" if it cannot",
        "sampleOutput": "Possible<br>Impossible"
    },
    "PRB11": {
        "title": "Area of triangle",
        "type": "Beginner",
        "state": "up",
        "blurb": "Can you find the area?...",
        "description": "Given a polar coordinate, find the area of the right triangle it creates with the x and y axes",
        "inputForm": "The distance from the origin and the angle, separated by a space",
        "sampleInput": "8 30",
        "outputForm": "The area of the right triangle formed, rounded DOWN to an integer<br><br>Explanation of sample:<br><br>Since the angle is 30 degrees and the hypotenuse length is 8, it can by found that the x component of the triangle is 8*cos(30) and the y component of the triangle is 8*sin(30). Thus, the area of the triangle is .5(8*sin(30) * 8 * cos(30)), giving the answer of 13.8564, which gets rounded down to 13",
        "sampleOutput": "13"
    },
    "PRA11": {
        "title": "Programming Contest",
        "type": "Advanced",
        "state": "up",
        "blurb": "1,000,000 contestants in a contest...",
        "description": "Exactly one million contestants, numbered 1 through 1,000,000, took part in a programming contest. The rules of the contest are simple: the winner is the contestant who solves the largest number of tasks. If there are more contestants tied for most tasks solved, the winner is the one who was the first to have all of their tasks solved.<br><br>During the contest the judges were keeping a log of all accepted solutions. You are given this log as a int[] events. The i-th element of events is the number of the contestant who submitted the i-th accepted solution (both indices are 0-based).<br><br>Compute and return the number of the contestant who won the contest.",
        "inputForm": "There are three test cases<br><br>Line 1: each element of int[] events of the first test case, separated by spaces<br><br>Line 2: each element of int[] events of the second test case, separated by spaces<br><br>Line 3: each element of int[] events of the third test case, separated by spaces",
        "sampleInput": "2 7 2 1<br>40 60 90 120<br>123 123 456 456 456 123",
        "outputForm": "The number of the contestant who won for each test case",
        "sampleOutput": "2<br>40<br>456"
    },
    "PRB10": {
        "title": "Fractions",
        "type": "Beginner",
        "state": "up",
        "blurb": "Simplifying fractions...",
        "description": "Given a fraction, simplify the fraction",
        "inputForm": "A fraction with the numerator and denominator separated by a '\/'",
        "sampleInput": "64\/128",
        "outputForm": "A simplified fraction",
        "sampleOutput": "1\/2"
    },
    "PRA10": {
        "title": "Palindrome Prime",
        "type": "Advanced",
        "state": "up",
        "blurb": "Find the palindromic primes...",
        "description": "A positive integer is called a prime if it has exactly two distinct positive integer divisors: 1 and itself. The first few primes are 2, 3, 5, 7, 11, 13, ...<br><br>A positive integer is called a palindrome if its base-10 representation reads the same forwards and backwards. Some palindromes: 2, 77, 101, 33333, 12344321.<br><br>A positive integer is called a palindromic prime if it is both a palindrome and a prime.<br><br>You are given two ints: L and R. Compute and return the number of palindromic primes between L and R, inclusive.",
        "inputForm": "Line 1: The number of test cases (n)<br>Line 2-(n+1): L and R, separated by a space",
        "sampleInput": "2<br>100 150<br>1 9",
        "outputForm": "The number of palindromic primes between L and R, inclusive.<br><br>Explanation of test cases:<br><br>Test Case 1: This range contains only two palindromic primes: 101 and 131.<br><br>Test Case 2: The palindromic primes in this range are 2, 3, 5, and 7.",
        "sampleOutput": "2<br>4"
    },
    "PRB9": {
        "title": "String Challenge",
        "type": "Beginner",
        "state": "up",
        "blurb": "A challenge of Strings...",
        "description": "Given a string, return a version without the first 2 chars, except keep the first char if it is 'a' and keep the second char if it is 'b'",
        "inputForm": "Line 1: The number of test inputs (n)<br>Lines 2-(n+1): A single String",
        "sampleInput": "4<br>basketball<br>anaconda<br>uber<br>abracadabra<br>",
        "outputForm": "A single String for each input with the first letter removed it is not 'a' and the second letter removed if it is not 'b'",
        "sampleOutput": "sketball<br>aaconda<br>ber<br>abracadabra"
    },
    "PRA9": {
        "title": "Xylophone",
        "type": "Advanced",
        "state": "up",
        "blurb": "Can you play the xylophone?",
        "description": "A xylophone is a musical instrument that consists of a sequence of wooden bars. In order to make a sound, you have to strike one of the bars by a mallet.<br><br>For the purpose of this problem we will assume that our xylophone has exactly 50 bars. The bars are numbered from 1 to 50 in the order from the left to the right.<br><br>There are 7 notes: A, B, C, D, E, F, G. Each bar of our xylophone plays one of these notes. The notes repeat periodically. When you play the bars from the left to the right, you will hear the following sequence of notes: A,B,C,D,E,F,G,A,B,C,D,E,F,G,A,B,C,...<br><br>In other words: bar 1 produces the note A, bar 2 plays B, bar 3 plays C, ..., bar 7 plays G, and then the sequence of notes starts repeating: bar 8 plays the note A again, bar 9 is B, and so on.<br><br>You have hit a sequence of bars. You are given their numbers in the int[] keys. Return the number of distinct notes you've hit.",
        "inputForm": "Line 1: The number of test cases (n)<br>Line 2-(n+1): The numbers of the bars hit in the sequence, separated by spaces (each test case input is on its own line)",
        "sampleInput": "2<br>1 8 3<br>11 11 11 11 11 11 11 11 11",
        "outputForm": "Explanation of sample: The first one has 2 distinct notes because if you hit the keys 1,8,3, you have played the notes A,A,C. This means you have hit two distinct notes: A and C.<br>The second one has 1 distinct note because you play the same note 9 times<br>",
        "sampleOutput": "2<br>1"
    },
    "PRB8": {
        "title": "Game of Code",
        "type": "Beginner",
        "state": "up",
        "blurb": "Bran gets pushed from the tower...",
        "description": "If Bran gets pushed from the top of a tower and you are given the height of the tower (in meters), determine how long it will take Bran to hit the ground (rounded to the nearest int)<br><br>Use the equation: y = vt + .5at^2<br>[y=height of tower]<br>[v=initial velocity of Bran as he falls]<br>[a=acceleration of Bran, which is the force of gravity (10 m\/s^2]<br>[t=time]<br>",
        "inputForm": "A single integer representing the height of the tower in meters",
        "sampleInput": "80",
        "outputForm": "A single integer representing the time it takes Bran to hit the ground",
        "sampleOutput": "4"
    },
    "PRA8": {
        "title": "Fibonacci Game",
        "type": "Advanced",
        "state": "up",
        "blurb": "Fibonacci numbers...",
        "description": "The Fibonacci sequence is defined as follows:<br>F[0] = 0<br>F[1] = 1<br>for each i >= 2: F[i] = F[i-1] + F[i-2]<br><br>Thus, the Fibonacci sequence starts as follows: 0, 1, 1, 2, 3, 5, 8, 13, ... The elements of the Fibonacci sequence are called Fibonacci numbers. <br><br>You're given an int N. You want to change N into a Fibonacci number. This change will consist of zero or more steps. In each step, you can either increment or decrement the number you currently have. That is, in each step you can change your current number X either to X+1 or to X-1. <br><br>Return the smallest number of steps needed to change N into a Fibonacci number.",
        "inputForm": "Line 1: The number of inputs i<br><br>Lines 2-(i+1): The int N to convert to a fibonacci number<br>[Each input will be between 1 and 1000000 inclusive]",
        "sampleInput": "6<br>89<br>64<br>37<br>43<br>31<br>19",
        "outputForm": "Int representing the smallest number of steps needed to change N into a Fibonacci number",
        "sampleOutput": "0<br>9<br>3<br>9<br>3<br>2"
    },
    "PRB7": {
        "title": "Probabilities",
        "type": "Beginner",
        "state": "up",
        "blurb": "Finding probabilities",
        "description": "Given a list of n integers, find the probability that an integer i will be selected from the list of n integers ",
        "inputForm": "The first line is a single integer (n) representing the number of integers in the list.<br>The second line is a list of n integers, separated by spaces.<br>The third line is the integer (i) to be picked out of the list",
        "sampleInput": "8<br>1 3 5 8 6 3 43 4<br>3",
        "outputForm": "A single INTEGER representing the PERCENT probability that i will be picked out of the n integers in the list (Do not worry about the percent sign).",
        "sampleOutput": "25"
    },
    "PRA7": {
        "title": "Largest Palindrome",
        "type": "Advanced",
        "state": "up",
        "blurb": "Finding palindromes in a String...",
        "description": "Given a sequence, find the length of the longest palindromic subsequence in it. A palindromic sequence is a sequence that reads the same forwards and backwards.<br><br>(NOTE THAT \"SUBSEQUENCE\" IS DIFFERENT THAN \"SUBSTRING\". \"SUBSEQUENCE\" doesn't only mean contiguous, it may or may not be contiguous whereas \"SUBSTRING\" means only contiguous.",
        "inputForm": "One line with a single String. All letters will be capitalized",
        "sampleInput": "BBABCBCAB",
        "outputForm": "A single integer representing the length of the largest palindromic subsequence.<br><br>Explanation of sample output:<br>the largest palindromic subsequence in           BBABCBCAB is BABCBAB, which has a length of 7. \u201cBBBBB\u201d and \u201cBBCBB\u201d are also palindromic subsequences of the given sequence, but not the longest ones.<br>",
        "sampleOutput": "7"
    },
    "R2B3": {
        "title": "Geometry",
        "type": "Beginner",
        "state": "codeolympics",
        "blurb": "Finding squares...",
        "description": "Varun needs help in geometry, and he is currently learning about squares. His teacher wants him to find the sum of the areas of all the squares with side length less than n. Help him out.",
        "inputForm": "The first line contains a single integer x, which states the number of test cases.<br>The second line contains the integer n.",
        "sampleInput": "2<br>3<br>4",
        "outputForm": "x lines which contains the sum of the areas of all the squares with side length less than n",
        "sampleOutput": "5<br>14"
    },
    "R1B3": {
        "title": "Math Skills",
        "type": "Beginner",
        "state": "codeolympics",
        "blurb": "Andrew's math...",
        "description": "Andrew wants to test his mental math skills. He wants to be able to calculate the sum of all prime numbers less than a given number. However, it\u2019s difficult to know whether he is getting the right answer without having a program to test his answer. Write a program that returns the sum of all prime numbers less than a given number.<br>",
        "inputForm": "An integer representing the number that the primes must be less than.",
        "sampleInput": "10",
        "outputForm": "A single integer representing the sum of all primes less than the input (NOT INCLUDING 1)",
        "sampleOutput": "17<br><br>Description: 2 + 3 + 5 + 7 = 17"
    },
    "R3A1": {
        "title": "Bumbling Buffoons Strike Again",
        "type": "Advanced",
        "state": "codeolympics",
        "blurb": "Oh no! President Dong assigned two of her assistants, Varun and Soham, to go market the Programming Club CodeOlympics competition",
        "description": "Oh no! President Dong assigned two of her assistants, Varun and Soham, to go market the Programming Club CodeOlympics competition all across the grid-like Homestead campus campus. However, the bumbling buffoons mixed up their coordinates and they advertised to some of the same area! Help President Dong clean up this mess by calculating the area in which these two rectangles intersect. <br><br>Note: The first two integers represent the upper left coordinate of the rectangle, while the second pair of integers represents the lower right coordinate of the rectangle.",
        "inputForm": "Line 1 contains four integers x1, y1, x2, y2 representing the edge coordinates of a rectangle<br>Line 2 contains four integers x3, y3, x4, y4 representing the edge coordinates of a rectangle<br>",
        "sampleInput": "2 2 6 4<br>4 3 6 6<br>",
        "outputForm": "A single integer representing the area of intersection between these two rectangles",
        "sampleOutput": "2"
    },
    "R2A1": {
        "title": "Akhil's Cubic Function",
        "type": "Advanced",
        "state": "codeolympics",
        "blurb": "All integer cubic equations take the form of ax^3 + bx^2 + cx + d ",
        "description": "All integer cubic equations take the form of ax^3 + bx^2 + cx + d and have either one or three real roots. Knowing this, Professor Akhil wants to find the greatest unique real root, but is having trouble writing a program that can do so. Will you be the chosen one destined to help him find this greatest root?",
        "inputForm": "The first line contains integers a, b, c, and d representing the integer coefficients of a cubic equation.",
        "sampleInput": "1 -6 11 -6",
        "outputForm": "A single integer representing the greatest real root  solution to the given cubic function.",
        "sampleOutput": "3"
    },
    "R1A1": {
        "title": "Encoded Messages",
        "type": "Advanced",
        "state": "codeolympics",
        "blurb": "Joshua, the Programming Club member, has received a vital message from Master Vignesh. ",
        "description": "Joshua, the Programming Club member, has received a vital message from Master Vignesh. But to prevent the snooping FBLA officers from intercepting the message, Vignesh decided to encode his message as an array of zeros and ones. Luckily, Joshua knows how to decode the message - he must find the length of the shortest contiguous subarray containing exactly k ones. ",
        "inputForm": "The first line of input contains a single integer n (1 <= n <= 100,000) representing the number of elements in the array.<br\/><br><br>The second line of input contains a single integer k (1 <= k <= n) representing the number of ones that need to be in the subarray. <br\/><br><br>The third line of input contains n space separated integers. The ith integer, representing the ith element of the array, will either be a 0 or 1. It is guaranteed the whole array contains at least k ones.",
        "sampleInput": "7<br>2<br>1 0 0 1 1 0 1",
        "outputForm": "A single integer representing the length of the shortest subarray to contain k ones.",
        "sampleOutput": "2"
    },
    "R3B3": {
        "title": "Burnt Phone",
        "type": "Beginner",
        "state": "codeolympics",
        "blurb": "Michael makes way better cookies than Andrew...",
        "description": "Michael and Andrew got into a huge fight over who is better at baking cookies. When the entire Programming Club Officer Team agreed that Michael is the better baker, Andrew stole Michael\u2019s phone and threw it in an oven. Michael got his phone out of the oven, and it still worked, but it started displaying text in a weird way. <br><br>If a word has an even number of characters, it is reversed, and the letter e is replaced with the letter c. <br><br>If a word has an odd number of characters, it is displayed with the first character and second to last character swapped. <br><br>To get revenge, Michael wants to write a program that alters the text on Andrew\u2019s phone in the same way. ",
        "inputForm": "Line 1: The text message received by Andrew<br>",
        "sampleInput": "Yo you wanna meet for lunch?<br>",
        "outputForm": "Line 1: The text that should be displayed on Andrew\u2019s phone<br>",
        "sampleOutput": "Oy oyu nanwa tccm rof ?hcnul<br><br><br>*Note that the question mark was part of the last word, thus it is counted when determining word length"
    },
    "R2B1": {
        "title": "Heidi Goes Shopping",
        "type": "Beginner",
        "state": "codeolympics",
        "blurb": "What will she buy for the proclub members?",
        "description": "Heidi is at the store trying to buy food for the next programming club meeting. She has a certain amount of money and would only like to purchase two items. Of course, Heidi cannot spend more money than she has, but she does like to spend as much club money as possible on food for members. Help Heidi find out what food to buy. <br>",
        "inputForm": "Line 1: The amount of money Heidi has<br>Line 2: The number of food items in the store<br>Line 3: A space separated list of prices of each item<br>",
        "sampleInput": "150<br>4<br>100 10 50 30<br>",
        "outputForm": "Line 1: Two space separated numbers, indicative of the food item she should buy.<br>",
        "sampleOutput": "1 3<br><br>This indicates that Heidi should purchase the 1st item (the one that costs $100) and the 3rd item (the one that costs $50) in order to use all of her money ($150)."
    },
    "PRB6": {
        "title": "Largest Number",
        "type": "Beginner",
        "state": "up",
        "blurb": "Can you find the largest number?",
        "description": "Given a list of 5 integers, if there is a number in the list that the other 4 integers add up to, return that number. Otherwise, return the sum of all the numbers.",
        "inputForm": "Five lines, with one single integer in each line",
        "sampleInput": "Sample Input #1:<br>7<br>8<br>4<br>24<br>5<br><br>Sample Input #2:<br>4<br>3<br>6<br>3<br>1",
        "outputForm": "Return the number that the other four numbers add up to, or the sum of all the numbers if there is no number that exists in the input so that the other four numbers add up to it",
        "sampleOutput": "Sample Output #1:<br>24<br><br>Sample Output #2:<br>17"
    },
    "PRA6": {
        "title": "Pikachu",
        "type": "Advanced",
        "state": "up",
        "blurb": "Learning Pikachu's Language",
        "description": "Pikachu is a well-known character in the Pokemon anime series. Pikachu can speak, but only 3 syllables: \"pi\", \"ka\", and \"chu\". Therefore Pikachu can only pronounce strings that can be created as a concatenation of one or more syllables he can pronounce. For example, he can pronounce the words \"pikapi\" and \"pikachu\". <br><br><br>You are given a String word. Your task is to check whether Pikachu can pronounce the string. If the string can be produced by concatenating copies of the strings \"pi\", \"ka\", and \"chu\", return \"YES\" (quotes for clarity). Otherwise, return \"NO\".",
        "inputForm": "Line 1: an integer n, representing the number      of test cases<br><br>The next n lines: a string with a word that Pikachu may or may not be able to say (they will all be lowercase letters)",
        "sampleInput": "4<br>pikapi<br>chupikapichu<br>proclub<br>piika",
        "outputForm": "Return YES or NO for each input depending on whether on not Pikachu can say",
        "sampleOutput": "YES<br>YES<br>NO<br>NO"
    },
    "R3B2": {
        "title": "Akhil and Heidi's Race",
        "type": "Beginner",
        "state": "codeolympics",
        "blurb": "Akhil and Heidi have the race of a lifetime",
        "description": "Akhil and Heidi disagree on who is the faster runner. They decide to race each other to find out. They both start running at the same time around a track. Akhil runs x miles per hour and Heidi runs y miles per hour. Given the number of labs that Akhil has run, return the number of laps Heidi has run based on their given speeds (round DOWN and return an int). (4 laps = 1 mile)",
        "inputForm": "Line 1: A double value representing Akhil\u2019s speed in miles per hour<br>Line 2: A double value representing Heidi\u2019s speed in miles per hour<br>Line 3: A double value representing the number of laps Akhil has run",
        "sampleInput": "5<br>6<br>3",
        "outputForm": "A single int value representing the number of laps Heidi has run<br><br>Explanation of sample output: 3.6 rounds down to 3",
        "sampleOutput": "3"
    },
    "R2B2": {
        "title": "Michael Chen's Activity",
        "type": "Beginner",
        "state": "codeolympics",
        "blurb": "How Michael Chen wastes his time...",
        "description": "Michael Chen is bored. He decides to see how many reversible numbers there are that less than a certain number. Help Michael waste his time. (A reversible number is a number that reads the same forwards and backwards such as 1001 or 35653)",
        "inputForm": "An integer n that the reversible numbers must be less than.",
        "sampleInput": "1000",
        "outputForm": "A single integer representing the number of reversible numbers less than n",
        "sampleOutput": "90"
    },
    "R3A3": {
        "title": "Quality Control on Andrew",
        "type": "Advanced",
        "state": "codeolympics",
        "blurb": "Digit summing",
        "description": "Soham is checking the quality of Andrew's code, so he needs to know the specific value Andrew's generated numbers add up to.<br><br>Without converting the number to a String, calculate the sum of its digits.",
        "inputForm": "A single number, either positive or negative, with any amount of decimal places.",
        "sampleInput": "-3.141592653",
        "outputForm": "An integer",
        "sampleOutput": "39"
    },
    "R3B1": {
        "title": "Slopes",
        "type": "Beginner",
        "state": "codeolympics",
        "blurb": "Find the slope of a line",
        "description": "Find the slope of a line from the given points. If the slope is infinite, return \"na\". Otherwise, return the number rounded to 3 decimal points. ",
        "inputForm": "1: x1<br>2: y1<br>3: x2<br>4: y2",
        "sampleInput": "5.42<br>10.0<br>3.9<br>33.1",
        "outputForm": "slope",
        "sampleOutput": "-15.197"
    },
    "R3A2": {
        "title": "Finding Patterns",
        "type": "Advanced",
        "state": "codeolympics",
        "blurb": "Arrays",
        "description": "Given two 2-D arrays, find whether the second is contained in the first.",
        "inputForm": "The first line contains an integer x, the number of test cases.<br><br>The ith line contains the two numbers R and C, where R is the number of rows and C is the number of columns in the first array.<br><br>The next R lines contain strings of length C, describing the contents of the first array at row R.<br><br>The i+R+1th line contains the two numbers r and c, where r is the number of rows and c is the number of columns in the second array.<br><br>The next r lines contain strings of length c, describing the contents of the second array at row r.",
        "sampleInput": "1<br>10 10<br>7283455864<br>6731158619<br>8988242643<br>3830589324<br>2229505813<br>5633845374<br>6473530293<br>7053106601<br>0834282956<br>4607924137<br>3 4<br>9505<br>3845<br>3530",
        "outputForm": "x lines, where each line has a single string, \"YES\" or \"NO\", stating whether the second array can be found in the first",
        "sampleOutput": "YES<br><br><br>"
    },
    "R2A3": {
        "title": "Michael Chen's Math Homework",
        "type": "Advanced",
        "state": "codeolympics",
        "blurb": "Michael needs more help beyond multiplying by 3.",
        "description": "Who needs calculus and trig? Back to elementary school math! Evaluate an arithmetic expression that uses the four basic operations.",
        "inputForm": "An arithmetic expression that is guaranteed to evaluate to an integer.",
        "sampleInput": "6 * 2 + 3 - 6 \/ 2",
        "outputForm": "a single integer",
        "sampleOutput": "12"
    },
    "R2A2": {
        "title": "Selling Books",
        "type": "Advanced",
        "state": "codeolympics",
        "blurb": "Varun is selling books...",
        "description": "Varun is trying to raise money for Programming Club, and has decided to sell books. He is smart, and when he sees someone coming back to buy more books, he raises the price of that book. If the original price was C, then the new price would be (x + 1) * C, where x is the number of books the person has already purchased. You and some friends are trying to purchase all the books at a minimum cost. Help find this cost.",
        "inputForm": "The first line contains an integer x, the number of test cases.<br><br>The ith line contains the two numbers n and k, where n is the number of books, and k is the number of people in your group (including you).<br><br>The i+1th line contains n space separated integers, describing the cost of the books.",
        "sampleInput": "2<br>3 3<br>2 5 6<br>3 2<br>2 5 6",
        "outputForm": "x lines, where the ith line contains the minimal cost of test case i.",
        "sampleOutput": "13<br>15<br><br>Description: In the first example, each person buys one book, so the total cost is simply the sum of all the prices (2 + 5 + 6 = 13).<br>In the second example, the first person first buys book 2, then book 1. The second person only buys book 3. The total cost is then 5 + 2 (2) + 6 = 15.<br>"
    },
    "R1A3": {
        "title": "Same.",
        "type": "Advanced",
        "state": "codeolympics",
        "blurb": "String comparison!",
        "description": "Determine if two strings are anagrams of each other. If so, print YES, if not, print NO.",
        "inputForm": "Line 1: a lowercase, alphanumeric string<br>Line 2: a lowercase, alphanumeric string",
        "sampleInput": "aardvark<br>darkvaar",
        "outputForm": "one line containing YES or NO",
        "sampleOutput": "YES"
    },
    "R1A2": {
        "title": "Senior Games",
        "type": "Advanced",
        "state": "codeolympics",
        "blurb": "Soham and Heidi are playing a game...",
        "description": "Soham and Heidi, being seniors, are wasting their time playing a very interesting game. There are two lists of numbers, A and B, where Soham is assigned list A and Heidi list B. Both lists are of the same length. Each turn, one of the two chooses a number from his or her list, and that number gets added onto that player\u2019s score. Furthermore, once a player has chosen the number with index i, neither player can choose it again. Thus, the game concludes when all the indexes have been chosen once. Assuming that both players play optimally, determine who wins, meaning whoever gets more points at the end.",
        "inputForm": "The first line of input contains a single integer x describing the number of test cases.<br><br>The ith line of input contains a single integer n (1 <= n <= 1000) representing the number of elements in each list.<br><br>The ith + 1 line of input contains n space separated integers, where the ith integer is the number with index i in list A.<br><br>The ith + 2 line of input contains n space separated integers, where the ith integer is the number with index i in list B.",
        "sampleInput": "1<br>3<br>1 3 4<br>5 3 1",
        "outputForm": "A single all capitalized string stating who wins. If Soham wins, print \"FIRST\". If Heidi wins, print \"SECOND\". If they tie, print \"TIE\"",
        "sampleOutput": "FIRST<br><br>Description: In the first example, Soham will choose the number 4 with index 3. Heidi will then choose the number 5 with index 1. Soham will choose the number 3 with index 2, and this will conclude the game because all the indexes have been chosen. Soham will have the larger score of 7 to Heidi's 5, and so he wins."
    },
    "R1B2": {
        "title": "Akhil's Bad Joke Company",
        "type": "Beginner",
        "state": "codeolympics",
        "blurb": "!false",
        "description": "Akhil\u2019s Bad Joke Company just hired Soham as an intern. Unfortunately, Soham makes a horrible mistake on his first day. Rather than giving jokes bad punchlines, he gives them good punchlines. After being reprimanded by Akhil, Soham has to change all the good punchlines he wrote to bad ones. Soham is extremely lazy, so he wants to use the minimum number of insertions and deletions to change a good punchline into a bad one.",
        "inputForm": "Line 1: Soham\u2019s good punchline<br>Line 2: The desired bad punchline",
        "sampleInput": "potatoes<br>fish",
        "outputForm": "Line 1: number of insertions and deletions needed to turn the good punchline into the desired bad one<br>",
        "sampleOutput": "11"
    },
    "R1B1": {
        "title": "Varun's Essay",
        "type": "Beginner",
        "state": "codeolympics",
        "blurb": "Change Varun's essay so it doesn't have any repeated words.",
        "description": "Varun writes his essay and realizes that it\u2019s not long enough. To try make it seem longer, he inserts some words twice into the essay. This this is an example of what he did. However, Varun suddenly realizes that he can write so much more on the topic so he finishes it and it ends up being too long. He now wants to delete all his extra words to make it fit. Help Varun do this efficiently.",
        "inputForm": "Sentences with repeated words<br>",
        "sampleInput": "If you want to make your your essay longer, try try to to repeat words.",
        "outputForm": "Same sentences without repeated words",
        "sampleOutput": "If you want to make your essay longer, try to repeat words. "
    },
    "PRA5": {
        "title": "Hiking in the Mountains",
        "type": "Advanced",
        "state": "up",
        "blurb": "Limak goes hiking for N days...",
        "description": "Limak is going to spend N days in the mountains. The days will be numbered 1 through N. In the morning of day 1 Limak starts his hike in the base camp at altitude 0. In the evening of day N Limak must return back to altitude 0. Limak carries a tent and a sleeping bag, so during the hike he can sleep at any altitude. <br><br>During each day of his hike, Limak either ascends or descends. (Each day he has to choose one or the other, he cannot both ascend and descend on the same day.) Additionally, there are two constraints:<br>He cannot ascend too quickly, to make acclimatization to higher altitudes easier. More precisely, each day spent ascending can increase his altitude by at most A.<br>He cannot descend too quickly, otherwise his knees hurt. More precisely, each day spent descending can decrease his altitude by at most B.<br>For example, suppose that Limak's altitude in the morning is 470, and suppose that A=100 and B=200. In the evening of the same day Limak can be anywhere between the altitudes 270 and 570, inclusive. <br><br>You are given the ints N, A, and B. Return the largest altitude Limak can reach.",
        "inputForm": "N will be between 2 and 50, inclusive.<br>A and B will be between 1 and 50, inclusive.<br>The value in the first line is N. The value in the second line is A. The value in the third line is B",
        "sampleInput": "3<br>7<br>10",
        "outputForm": "An integer representing the highest altitude that Limak can reach.<br><br>Explanation of the sample output:<br>On day 1, Limak will start at altitude 0 and he will ascend to altitude 7.<br>On day 2, Limak will start at altitude 7 and he will ascend to altitude 10.<br>On day 3, Limak will start at altitude 10 and he will descend back to altitude 0.",
        "sampleOutput": "10"
    },
    "PRB5": {
        "title": "Special Scores",
        "type": "Beginner",
        "state": "up",
        "blurb": "Sum of special scores...",
        "description": "Given two arrays, A and B, of non-negative int scores. A \"special\" score is one which is a multiple of 10, such as 40 or 90. Return the sum of largest special score in A and the largest special score in B.",
        "inputForm": "The first line contains the integer values in array A. The second line contains the integer values in array B.",
        "sampleInput": "60 55 82 90<br>78 40",
        "outputForm": "The sum of the largest multiple of 10 in A and the largest multiple of 10 in B",
        "sampleOutput": "130"
    },
    "PRB4": {
        "title": "Finding Multiples",
        "type": "Beginner",
        "state": "up",
        "blurb": "Multiples...",
        "description": "Given an integer i and an integer j, print the first j multiples of i. Include i as the first multiple. (if i=6 and j=1, 6 should be printed out)",
        "inputForm": "The integer in the first line represents i, and the integer in the second line represents j",
        "sampleInput": "3<br>4",
        "outputForm": "The first j multiples of i",
        "sampleOutput": "3<br>6<br>9<br>12"
    },
    "PRA4": {
        "title": "Triangles with Sticks",
        "type": "Advanced",
        "state": "up",
        "blurb": "Make some triangles...",
        "description": "You have three sticks. Their current lengths are a, b, and c. You can shorten each of those sticks arbitrarily. Your goal is to produce three sticks with the following properties:<br>The length of each stick is a positive integer.<br>The three sticks can be used to build a triangle. The triangle must be non-degenerate. (I.e., it must have a positive area.)<br>The perimeter of the triangle must be as large as possible.<br>You are given the ints a, b, and c. Compute and return the largest possible perimeter of the triangle constructed from your three sticks.<br><br>Note: The return value is always defined. In other words, for any a, b, and c there is at least one way to build a valid triangle.",
        "inputForm": "a will be between 1 and 100, inclusive.<br>b will be between 1 and 100, inclusive.<br>c will be between 1 and 100, inclusive.",
        "sampleInput": "1<br>2<br>3",
        "outputForm": "The largest possible perimeter that can be made by shortening the sticks however much required. ",
        "sampleOutput": "5<br><br>(shorten the last stick from 3 to 2 to create a triangle with sides (1, 2, 2)) <-- Do not write this in the output. Only print out the integer of the perimeter."
    },
    "PRA3": {
        "title": "Donde's break...",
        "type": "Advanced",
        "state": "up",
        "blurb": "Today is Donde's winter break...",
        "description": "Today is Donde's winter break, so he wants to go and visit his friends. His break lasts for x days. Unfortunately, Donde, during this break, still has some work to do. He has n assignments, where each assignment has importance i and will take a days. His boss needs him to finish enough assignments such that their combined difficulty is equal to or greater than some integer d. Maximize the amount of time he has for himself.<br><br>If all the assignment importances summed together is less than d, return -1.",
        "inputForm": "The first line contains a single integer q, the number of test cases.<br>Each of the q test cases starts with a single line with positive integers x, n, and d.<br>Each of the next n lines contains two positive integers, i and a.",
        "sampleInput": "2<br>10 1 1<br>2 1<br>10 1 100000000<br>500 2",
        "outputForm": "q lines, each with a single integer describing the maximum number of days Donde can hang out with his friends.",
        "sampleOutput": "9<br>-1"
    },
    "PRB3": {
        "title": "Finding Divisors",
        "type": "Beginner",
        "state": "up",
        "blurb": "Divisors...",
        "description": "Drew needs help with his math homework. His teacher told him to find all the divisors of an integer x. Help him.",
        "inputForm": "An integer a, the number of test cases.<br>Each of the next a lines contain one integer, x.",
        "sampleInput": "2<br>10<br>15",
        "outputForm": "The divisors of x, where each divisor is on a new line.",
        "sampleOutput": "1<br>2<br>5<br>10<br>1<br>3<br>5<br>15"
    },
    "PRA2": {
        "title": "Mountain Biking Injury",
        "type": "Advanced",
        "state": "up",
        "blurb": "You go on a mountain biking trip...",
        "description": "You decide to go mountain biking. After some time you decide to try to do a trick. Obviously, you fall and sprain an ankle. You know that there is a hospital a certain number of meters away from your current position. If your step length with your hurt foot is half the distance of your step length with your normal foot, how many steps will it take you to get to the hospital if you take your first step with your good foot? (Round all decimals up).",
        "inputForm": "The first line represents the distance covered with one step with your good. The second line represents the distance to the hospital.",
        "sampleInput": "2<br>9",
        "outputForm": "A single integer representing the total number of paces needed to get to the hospital if your first step is with your healthy foot.",
        "sampleOutput": "6"
    },
    "PRB2": {
        "title": "Bowling Scores",
        "type": "Beginner",
        "state": "up",
        "blurb": "You go bowling...",
        "description": "You decide to go bowling. You go five times and you know each of the five scores you got. Calculate the total score that you got",
        "inputForm": "5 integers representing each score you got.",
        "sampleInput": "4<br>5<br>1<br>2<br>3",
        "outputForm": "The total sum of scores",
        "sampleOutput": "15"
    },
    "PRA1": {
        "title": "Row of Bricks",
        "type": "Advanced",
        "state": "up",
        "blurb": "You decide to build a row of bricks...",
        "description": "You have been coding for three straight days so you choose a task to get some fresh air. You decide to make a row of bricks that is a certain number of inches long. We have a number of small bricks (1 inch each) and big bricks (5 inches each). Return true if it is possible to make a row of the certain number of inches by choosing from the given bricks. (IT IS OK IF THERE ARE EXTRA BRICKS. AS LONG AS THERE IS A POSSIBLE WAY TO GET THE EXACT ROW LENGTH, THE OUTPUT SHOULD BE TRUE)",
        "inputForm": "5 rows of three numbers separated by a spaces. The first number of each row represents the number of 1-inch bricks. The second number is the number of 5-inch bricks. The last number represents the number of inches in the entire row of bricks.",
        "sampleInput": "2 5 11<br>3 2 13<br>1 6 7<br>1 2 1<br>1 2 2",
        "outputForm": "A boolean value of whether or not it is possible to build a row of bricks of the desired length with the bricks given. Use System.out.println() to print the output.",
        "sampleOutput": "true<br>true<br>false<br>true<br>false"
    },
    "PRB1": {
        "title": "Michael Chen's Math",
        "type": "Beginner",
        "state": "up",
        "blurb": "Michael Chen's weakness...",
        "description": "Michael Chen (your great vice president) is known for his mathematical skills. However, he has one fatal flaw. He is unable to multiply numbers by three! He has hired you to help him with this difficult task.<br><br>Practice by multiplying each input by 3 to help Michael out.",
        "inputForm": "A single line containing an integer. We recommend you use a java.util.Scanner to receive the input.",
        "sampleInput": "6",
        "outputForm": "A single line containing an integer representing the input multiplied by three. We recommend using System.out.println(\"\") to output your answer.",
        "sampleOutput": "18"
    }
}