{"title":"Candy Addition","type":"Beginner","state":"up","maxScore":100,"blurb":"Sharing is caring [100]","description":"<p>Bo is planning to surprise his friends with <script type=\"math\/tex\">N<\/script> bags (<script type=\"math\/tex\">1 \\leq N \\leq 100<\/script>) of sweet candies! Each bag already has some number of candies in it.<\/p>\n<p>Bo's friends are easily angered, especially when they don't get enough candy. So, Bo would like to add additional candies to the bags so that every bag has at least <script type=\"math\/tex\">K<\/script> candies in it (<script type=\"math\/tex\">1 \\leq K \\leq 100<\/script>). Due to sanitary reasons, Bo cannot take any candies out of the bags; he can only put more candies in.<\/p>\n<p>Luckily, Bo has an infinite supply of candies, but he wants to save as many for himself as possible. What is the minimum # of candies he needs to add, so that every bag has at least <script type=\"math\/tex\">K<\/script> candies?<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains two space-separated integers <script type=\"math\/tex\">N<\/script> and <script type=\"math\/tex\">K<\/script>.<\/p>\n<p>The next line of input contains <script type=\"math\/tex\">N<\/script> space-separated integers, giving the number of candies in the bags. These integers will be in the range <script type=\"math\/tex\">1 \\ldots 100<\/script>.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output one line containing a single integer: The smallest # of candies Bo needs.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">5 7\n2 8 7 6 15\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">6\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>There are <script type=\"math\/tex\">5<\/script> bags, and Bo would like to place at least <script type=\"math\/tex\">7<\/script> candies in each bag. The best solution is to place 5 candies into bag 1 and 1 candy into bag 4. This way, the # of candies in each bag becomes <script type=\"math\/tex\">[7, 8, 7, 7, 15]<\/script>. So, the answer is <script type=\"math\/tex\">5+1=6<\/script>.<\/p>","inputForm":"","sampleInput":"","outputForm":"","sampleOutput":"","hints":"<ol>\n<li>\n<p>What if there's only one bag of candies (<script type=\"math\/tex\">N=1<\/script>)? Try to solve this modified version of the problem. Then, try extending the solution to work with multiple bags.<\/p>\n<\/li>\n<li>\n<p>Review of input and output handling:<\/p>\n<\/li>\n<\/ol>\n<p>Java<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRB7 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \/\/ Read integers from the console\n        int N = sc.nextInt();\n        int K = sc.nextInt();\n        \/\/ Read an array from the console\n        int[] bags = new int[N];\n        for (int i = 0; i &lt; N; i++) {\n            bags[i] = sc.nextInt();\n        }\n        \/\/ Output to the console\n        System.out.println(bags[0]);\n    }\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\"># Read integers from the console\nN, K = map(int, input().split())\n# Read an array from the console\nbags = input().strip().split()\n# Convert elements to integers\nfor i in range(len(bags)):\n    bags[i] = int(bags[i])\n# Output to the console\nprint(bags[0])\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n    \/\/ Read integers from the console\n    int N, K;\n    cin &gt;&gt; N &gt;&gt; K;\n    \/\/ Read an array from the console\n    vector&lt;int&gt; bags(N);\n    for (int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; bags[i];\n    }\n    \/\/ Output to the console\n    cout &lt;&lt; bags[0] &lt;&lt; endl;\n    return 0;\n}\n<\/code><\/pre>","bonus":"","version":2}