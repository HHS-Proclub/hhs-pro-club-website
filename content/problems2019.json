{
    "PRI8": {
        "title": "Echo",
        "type": "Intermediate",
        "state": "up",
        "blurb": "I like to echo",
        "description": "Time limit: 3 seconds<br>Memory limit: 256 MB<br><br>I like to echo. Do you like to echo?<br>(Oh by the way, I also like doubling numbers. Big numbers. HUGE numbers.)<br><br>Scoring (out of 1000):<br>250 points for subtask 1, 250 points for subtask 2, 500 points for subtask 3.<br>Bonus:<br>50 points for subtask 4, 100 points for subtask 5.",
        "inputForm": "Something to echo, consisting of only alphanumeric characters, possibly separated by a bunch of single spaces. There will be exactly one newline at the end of the input.",
        "sampleInput": "I will have a number 9 large and a number 6 with extra dip<br>",
        "outputForm": "???",
        "sampleOutput": "???"
    },
    "PRA7": {
        "title": "Capital",
        "type": "Advanced",
        "state": "up",
        "blurb": "Choosing a capital",
        "description": "The United States consists of C cities, some pairs of them are connected with unidirectional roads. Overall there are C\u2009-\u20091 roads in the country.<br><br>Trump's administration has now decided to select a new capital. Of course it should be a city of this country. His cabinet is supposed to meet in the capital and regularly move from the capital to other cities. For that reason, if city A is chosen as capital, then all roads must be oriented so that if we move along them, we can get from city A to any other city. For that, some roads may have to be inversed.<br><br>Help President Trump calculate the minimum number of roads to be inversed if the capital is chosen optimally.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>The first input line contains integer C (2\u2009<=\u2009C\u2009<=\u20092*105) \u2014 the number of cities in the United States. Next C\u2009-\u20091 lines contain the descriptions of the roads, one road per line. A road is described by a pair of integers ai,\u2009bi (1\u2009<=\u2009ai,\u2009bi\u2009<=\u2009C; ai\u2009!=\u2009bi) \u2014 the numbers of the cities, connected by that road. The i-th road is oriented from city ai to city bi. You can consider cities in the United States indexed from 1 to C.",
        "sampleInput": "2<br>3<br>2 1<br>2 3<br>4<br>1 4<br>2 4<br>3 4",
        "outputForm": "For each of the n problems, print the minimum number of roads to be inversed if the capital is chosen optimally.",
        "sampleOutput": "0<br>2"
    },
    "PRI7": {
        "title": "Party Time",
        "type": "Intermediate",
        "state": "up",
        "blurb": "Party at Amazon",
        "description": "Amazon has W workers numbered from 1 to W. Each worker either has no immediate boss or exactly one immediate boss, who is another worker with a different number. Worker A is said to be the superior of another Worker B if at least one of the following is true:<br><br>1. Worker A is the immediate boss of Worker B<br>2. Worker B has an immediate boss Worker C such that Worker A is the superior of Worker C.<br><br>Amazon will not have a managerial cycle \u2014 there will not exist a worker who is the superior of his\/her own immediate boss.<br><br>Amazon is planning to arrange a party. This involves dividing all W workers into several groups: every worker must belong to exactly one group. Furthermore, within each group, there must not be two workers A and B such that A is the superior of B.<br><br>Help Amazon determine the minimum number of groups that must be formed.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>The first line contains integer W (1\u2009<=\u2009W\u2009<=\u20092000) \u2014 the number of workers.<br><br>The next W lines contain the integers bi (1\u2009<=\u2009bi\u2009<=\u2009W or bi\u2009=\u2009-1). Every bi denotes the immediate boss for the i-th worker. If bi is -1, that means that the i-th worker does not have an immediate boss.<br><br>It is guaranteed, that no worker will be the immediate boss of him\/herself (bi\u2009!=\u2009i) and that there will be no managerial cycles.",
        "sampleInput": "1<br>5<br>-1<br>1<br>2<br>1<br>-1",
        "outputForm": "For each of the n problems \u2014 print a single integer that is the minimum number of groups that will be formed in the party.",
        "sampleOutput": "3"
    },
    "PRB7": {
        "title": "The Mall",
        "type": "Beginner",
        "state": "up",
        "blurb": "Shopping at the mall",
        "description": "Paul just entered the mall and is looking for a restaurant within the mall to eat at.<br><br>The mall is a rooted tree consisting of S shops (or vertices) with the root at shop 1. Shop 1 also contains the entrance of the mall (where Paul entered). The leaf vertices of the mall contain the restaurants.<br><br>Unfortunately, for Paul, some of the shops contain more than 5 people, which goes against his rule of social distancing. These shops are called \"danger zones.\" Paul will never go to a restaurant if the path from the entrance (shop 1) to the restaurant contains more than M consecutive shops that are danger zones.<br><br>Help Paul count the number of restaurants where he can go.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>The first line contains two integers, S and M (2\u2009<=\u2009S\u2009<=\u2009105, 1\u2009<=\u2009M\u2009<=\u2009S) \u2014 the number of shops (vertices) of the tree and the maximum number of consecutive vertices that are danger zones that is still ok for Paul to go through.<br><br>The second line contains n integers a1,\u2009a2,\u2009...,\u2009an, where each ai either equals to 0 (then vertex i is not a danger zone), or equals to 1 (then vertex i is a danger zone).<br><br>Next S\u2009-\u20091 lines contains the edges of the tree in the format \"xi yi\" (without the quotes) (1\u2009<=\u2009xi,\u2009yi\u2009<=\u2009S, xi\u2009!=\u2009yi), where xi and yi are the vertices of the tree, connected by an edge.<br><br>It is guaranteed that the given set of edges specifies a tree.",
        "sampleInput": "1<br>4 1<br>1 1 0 0<br>1 2<br>1 3<br>1 4",
        "outputForm": "For each of the n problems, print one integer \u2014 the number of restaurants that Paul can go to",
        "sampleOutput": "2"
    },
    "PRA6": {
        "title": "Road building",
        "type": "Advanced",
        "state": "up",
        "blurb": "Enjoying the ride",
        "description": "The neighborhood of Cupertino consists of B buildings connected by M bidirectional roads. Each road connects two distinct buildings and no two roads connect the same pair of buildings. It is possible to get from any building to any other building by these roads. The distance between two buildings is equal to the minimum number of roads on a path between them.<br><br>To improve the transportation system, the city council asks the mayor to build one new road. However, the mayor has just bought a wonderful new Tesla and he enjoys the ride from Homestead High School (building S) to his house (building T). So, he prefers to build a new road in such a way that the distance between these two buildings won't decrease.<br><br>Help the mayor of Cupertino. Compute the number of pairs of buildings that are not connected by road, such that if the new road between these two buildings is built the distance between S and T won't decrease.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>The first line of the input contains integers B, M, S and T (2\u2009<= B\u2009<=\u20091000, 1\u2009<=\u2009M\u2009<=\u20091000, 1\u2009<=\u2009S,\u2009T\u2009<=\u2009B, S\u2009!=\u2009T) \u2014 the number of buildings and the number of roads in Cupertino, as well as the indices of junctions where Homestead High School and the mayor's home are located respectively.<br><br>The i-th of the following m lines contains two integers ui and vi (1\u2009<=\u2009ui,\u2009vi\u2009<=\u2009n, ui\u2009!=\u2009vi), meaning that this road connects buildings ui and vi directly. It is guaranteed that there is a path between any two buildings and no two roads connect the same pair of buildings.",
        "sampleInput": "2<br>5 4 1 5<br>1 2<br>2 3<br>3 4<br>4 5<br>5 4 3 5<br>1 2<br>2 3<br>3 4<br>4 5",
        "outputForm": "For each of the n problems, print one integer \u2014 the number of pairs of buildings not connected by a direct road, such that building a road between these two buildings won't decrease the distance between buildings S and T.",
        "sampleOutput": "0<br>5"
    },
    "PRI6": {
        "title": "Buttons",
        "type": "Intermediate",
        "state": "up",
        "blurb": "Clicking buttons",
        "description": "Sam has found a strange device on Mars. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, the device multiplies the displayed number by 2. After clicking the blue button, device subtracts 1 from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number A.<br><br>Sam wants to get number B on the display. What minimum number of clicks he has to make in order to achieve this result?",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>The first and the only line of the input contains two distinct integers A and B (1\u2009<=\u2009A,\u2009B\u2009<=\u2009104), separated by a space .",
        "sampleInput": "2<br>4 6<br>10 1",
        "outputForm": "For each of the n problems, print a single number \u2014 the minimum number of times one needs to push the button required to get the number B out of number A.",
        "sampleOutput": "2<br>9"
    },
    "PRB6": {
        "title": "Shopping Spree",
        "type": "Beginner",
        "state": "up",
        "blurb": "Shopping at the mall",
        "description": "Dan is going on a shopping spree at Abercrombie and Fitch. The store has A ties, B scarves, C vests and D jackets.<br><br>The store sells single clothing items, and Dan will use these items to create suits of two types:<br><br>1. A suit of the first type consists of one tie and one jacket<br>2. A suit of the second type consists of one scarf, one vest and one jacket<br><br>Each suit of the first type costs E coins, and each suit of the second type costs F coins.<br><br>Calculate the maximum possible cost of a set of suits that can be composed from the available clothing items. Note that one item cannot be used in more than one suit (though some items may be left unused).",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>The first line contains one integer A (1 <= A <= 100000) \u2014 the number of ties.<br><br>The second line contains one integer B (1 <= B <= 100000) \u2014 the number of scarves.<br><br>The third line contains one integer C (1 <= C <= 100000) \u2014 the number of vests.<br><br>The fourth line contains one integer D (1 <= D <= 100000) \u2014 the number of jackets.<br><br>The fifth line contains one integer E (1 <= E <= 1000) \u2014 the cost of one suit of the first type.<br><br>The sixth line contains one integer F (1 <= F <= 1000) \u2014 the cost of one suit of the second type.",
        "sampleInput": "2<br>4<br>5<br>6<br>3<br>1<br>2<br>12<br>11<br>13<br>20<br>4<br>6",
        "outputForm": "For each of the n problems, print one integer \u2014 the maximum total cost of some set of suits that can be composed from the available items.",
        "sampleOutput": "6<br>102"
    },
    "PRA5": {
        "title": "Equality",
        "type": "Advanced",
        "state": "up",
        "blurb": "Making strings equal",
        "description": "Jefferson has S strings s1,\u2009s2,\u2009...,\u2009sn each having lowercase English letters. In one move he can choose a string si, erase the first character and add it to the string's end. For example, if he has the string \"america\", in one move he can transform it into the string \"mericaa\".<br><br>Naturally, being a supporter of natural rights and equality, Jefferson wants to make all strings equal. Help him find the minimal number of moves that he needs to do in order to make all the strings equal.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>The first line contains integer S (1\u2009<=\u2009S\u2009<=\u200950) \u2014 the number of strings.<br><br>This is followed by S lines which contain a string each. The i-th line corresponding to string si. Lengths of strings are equal. Lengths of strings are positive and never exceed 50.",
        "sampleInput": "2<br>4<br>xzzwo<br>zwoxz<br>zzwox<br>xzzwo<br>2<br>molzv<br>lzvmo",
        "outputForm": "For each of the n problems, print the minimal number of moves Jefferson needs in order to make all the strings equal or print -1 if no solution exists.",
        "sampleOutput": "5<br>2"
    },
    "PRI5": {
        "title": "String Match",
        "type": "Intermediate",
        "state": "up",
        "blurb": "Matching strings",
        "description": "Sarah has two strings and needs your help determining if one matches the other. String S has lowercase Latin letters and at most one wildcard character '*'. String T has only lowercase Latin letters. The length of string S equals A, and the length of string T equals B.<br><br>Sarah can replace the wildcard character '*' in string S (if any) with an arbitrary sequence (possibly empty) of lowercase Latin letters. No other character of S can be replaced with anything. If Sarah can replace a wildcard character '*' in S to obtain a string T, then the string T matches the pattern S.<br><br>For example, if S =\"cdc*cdc\" then the following strings match it \"cdccdc\", \"cdcccdc\" and \"cdczzzcdc\", but the following strings do not match: \"cdcdc\", \"cdcefcdc\", \"cdc1cdc\", \"cdc?cdc\".<br><br>If string T matches string S, print \"YES\", otherwise print \"NO\".",
        "inputForm": "The first input line contains integer N (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>The first line contains two integers A and B (1 <= A,B <= 2\u22c5105) \u2014 the length of string S and the length of string T, respectively.<br><br>The second line contains string S of length A, which has lowercase Latin letters and at most one wildcard character '*'.<br><br>The third line contains string T of length B, which has only lowercase Latin letters.<br><br>",
        "sampleInput": "2<br>6 5<br>vk*cup<br>vkcup<br>9 6<br>gfgf*gfgf<br>gfgfgf",
        "outputForm": "For each of the n problems, print \"YES\" (without quotes) if string T matches string S. Otherwise print \"NO\" (without quotes).",
        "sampleOutput": "YES<br>NO"
    },
    "PRB5": {
        "title": "Variety",
        "type": "Beginner",
        "state": "up",
        "blurb": "Maintaining variety",
        "description": "John is writing an essay and wants to make sure that his words contain a variety of letters. He does not necessarily care about whether the words make sense (for example, he is perfectly okay with having a nonsensical word like \"eiod\" in his essay). <br><br>Please help him compute the minimum number of characters he needs to change in a string S, so that it contains at least C different letters. If this can't be done, print that it is impossible.<br><br>String S contains only lowercase Latin letters, and John can change characters only to lowercase Latin letters.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>First line of input contains string S, consisting only of lowercase Latin letters (1 <=\u2009|S|\u2009<=\u20091000, where |S| denotes the length of S).<br><br>Second line of input contains integer C (1\u2009<=\u2009C\u2009<=\u200926).",
        "sampleInput": "2<br>yandex<br>6<br>yahoo<br>5",
        "outputForm": "For each of the n problems, print a single line with the minimum number of necessary changes, or the word \"impossible\" if it is impossible.",
        "sampleOutput": "0<br>1"
    },
    "PRA4": {
        "title": "Skating in Switzerland",
        "type": "Advanced",
        "state": "up",
        "blurb": "Connecting snow drifts",
        "description": "Jorge is learning to ice skate in Switzerland. He's a beginner, so his only mode of transportation is pushing off from a snow drift to the north, east, south or west and sliding until he lands in another snow drift. He has noticed that in this way it's impossible to get from some snow drifts to some other by any sequence of moves. He now wants to heap up some additional snow drifts, so that he can get from any snow drift to any other one. He asked you to find the minimal number of snow drifts that need to be created.<br><br>We assume that Jorge can only heap up snow drifts at integer coordinates.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>The first line of input contains a single integer S (1\u2009<=\u2009S\u2009<=\u2009100) \u2014 the number of snow drifts. Each of the following S lines contains two integers x<sub>i<\/sub> and y<sub>i<\/sub> (1\u2009<=\u2009x<sub>i<\/sub>,\u2009y<sub>i<\/sub>\u2009<=\u20091000) \u2014 the coordinates of the i-th snow drift.<br><br>Note that the north direction coin\u0441ides with the direction of the y axis, so the east direction coin\u0441ides with the direction of the x axis. All snow drift's locations are distinct.",
        "sampleInput": "2<br>2<br>2 1<br>1 2<br>2<br>2 1<br>4 1",
        "outputForm": "For each of the n problems, output the minimal number of snow drifts that need to be created in order for Jorge to be able to reach any snow drift from any other one.",
        "sampleOutput": "1<br>0"
    },
    "PRI4": {
        "title": "Gossip at HHS",
        "type": "Intermediate",
        "state": "up",
        "blurb": "Spreading rumors",
        "description": "Sarah is trying to spread a rumor at Homestead High School and wants everyone to know it.<br><br>She knows that there are S students at HHS. Some students are friends to each other, and they share information they got. Also Sarah knows that she can bribe each student so he or she starts spreading the rumor; i-th student wants c<sub>i<\/sub> gold in exchange for spreading the rumor. When a student hears the rumor, he or she tells it to all his or her friends, and they start spreading the rumor to their friends (for free), and so on.<br><br>What is the minimum amount of gold Sarah needs to spend in order to ensure that all HHS students know the rumor?",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>The first line contains two integer numbers S and P (1\u2009<=\u2009S\u2009<=\u2009105,\u20090\u2009<=\u2009P\u2009<= 105) \u2014 the number of students at HHS and the number of pairs of friends.<br><br>The second line contains S integer numbers c<sub>i<\/sub> (0\u2009<=\u2009c<sub>i<\/sub>\u2009<=\u2009109) \u2014 the amount of gold the i-th student asks to start spreading the rumor.<br><br>Then P lines follow, each containing a pair of numbers (x<sub>i<\/sub>,\u2009y<sub>i<\/sub>) which represent that students x<sub>i<\/sub> and y<sub>i<\/sub> are friends (1\u2009<=\u2009x<sub>i<\/sub>,\u2009y<sub>i<\/sub>\u2009<=\u2009S, x<sub>i<\/sub>\u2009\u2260\u2009y<sub>i<\/sub>). It is guaranteed that each pair is listed at most once.",
        "sampleInput": "2<br>5 2<br>2 5 3 4 8<br>1 4<br>4 5<br>10 0<br>1 2 3 4 5 6 7 8 9 10",
        "outputForm": "For each of the n problems, print one number \u2014 the minimum amount of gold Sarah has to spend to spread the rumor to everyone.",
        "sampleOutput": "10<br>55"
    },
    "PRB4": {
        "title": "Triangle of Love",
        "type": "Beginner",
        "state": "up",
        "blurb": "Loving Cars",
        "description": "As you could know there are no male cars nor female cars. However, each car on Earth likes some other car. There are x cars on Earth, numbered from 1 to x, and the car with number i likes the car with number f<sub>i<\/sub>, where 1\u2009<=\u2009f<sub>i<\/sub>\u2009<=\u2009x and f<sub>i<\/sub>\u2009\u2260\u2009i.<br><br>We call a love triangle a situation in which car A likes car B, car B likes car C and car C likes car A. Find out if there is any love triangle on Earth.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems.<br><br>The input for each problem:<br>The first line contains a single integer x (2\u2009<=\u2009x\u2009<=\u20095000) \u2014 the number of cars.<br>The second line contains x integers f<sub>1<\/sub>,\u2009f<sub>2<\/sub>,\u2009...,\u2009f<sub>n<\/sub> (1\u2009<=\u2009f<sub>i<\/sub>\u2009<=\u2009x, f<sub>i<\/sub>\u2009\u2260\u2009i), meaning that the i-th car likes the f<sub>i<\/sub>-th.",
        "sampleInput": "2<br>5<br>2 4 5 1 3<br>5<br>5 5 5 5 1",
        "outputForm": "For each of the n problems, print \"YES\" if there is a love triangle of cars. Otherwise, output \"NO\".",
        "sampleOutput": "YES<br>NO"
    },
    "PRA3": {
        "title": "My Spotify PlayList",
        "type": "Advanced",
        "state": "up",
        "blurb": "Choosing songs",
        "description": "I have a Spotify playlist consisting of S songs. The \ud835\udc56-th song is characterized by two numbers t<sub>i<\/sub> and b<sub>i<\/sub> \u2014 its length and beauty respectively. The pleasure of listening to a set of songs is equal to the total length of the songs in the set multiplied by the minimum beauty among them. For example, the pleasure of listening to a set of 3 songs having lengths [5,7,4] and beauty values [11,14,6] is equal to (5+7+4)*6=96.<br><br>Please help me choose at most K songs from my playlist, so the pleasure of listening to the set of these songs is maximum possible.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems<br><br>The input for each problem:<br>The first line contains two integers S<sub>n<\/sub> and K<sub>n<\/sub> (1 <= K<sub>n<\/sub> <= S<sub>n<\/sub> <= 3\u22c5105) \u2013 the number of songs in the playlist and the maximum number of songs you can choose, respectively.<br><br>Each of the next S<sub>n<\/sub> lines contains two integers t<sub>i<\/sub> and b<sub>i<\/sub> (1 <= t<sub>i<\/sub>, b<sub>i<\/sub> <= 106) \u2014 the length and beauty of \ud835\udc56-th song.",
        "sampleInput": "2<br>4 3<br>4 7<br>15 1<br>3 6<br>6 8<br>5 3<br>12 31<br>112 4<br>100 100<br>13 55<br>55 50",
        "outputForm": "For each of the n problems, print one integer \u2014 the maximum pleasure you can get.",
        "sampleOutput": "78<br>10000"
    },
    "PRI3": {
        "title": "Archery",
        "type": "Intermediate",
        "state": "up",
        "blurb": "Knocking cans",
        "description": "Recently, Sherry decided to improve her archery skills. Today her coach offered her the following exercise. He placed C cans in a row on a table. Cans are numbered from left to right from 1 to C. Sherry has to knock down each can exactly once to finish the exercise. She is allowed to choose the order in which she will knock the cans down.<br><br>Sherry knows that the durability of the \ud835\udc56-th can is a<sub>i<\/sub>. It means that if Sherry has already knocked \ud835\udc65 cans down and is now about to start shooting arrows at the \ud835\udc56-th one, she will need (a<sub>i<\/sub> * \ud835\udc65) + 1 arrows to knock it down. You can assume that if Sherry starts shooting arrows at the \ud835\udc56-th can, she will continue until she knocks it down.<br><br>Your task is to figure out the minimum number of arrows she needs to knock all of the cans down exactly once.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems<br><br>The input for each problem:<br>The first line contains one integer C<sub>n<\/sub> (2 <= C<sub>n<\/sub> <= 1000) \u2014 the number of cans.<br>The second line contains the sequence a<sub>1<\/sub>, a<sub>2<\/sub>,\u2026,a<sub>c<\/sub> (1 <= a<sub>i<\/sub> <= 1000), where a<sub>i<\/sub> is the durability of the \ud835\udc56-th can.",
        "sampleInput": "2<br>3<br>20 10 20<br>4<br>10 10 10 10",
        "outputForm": "For each of the n problems, print the minimum number of arrows required to knock each of the given cans down exactly once.",
        "sampleOutput": "43<br>64"
    },
    "PRB3": {
        "title": "Letter Scramble",
        "type": "Beginner",
        "state": "up",
        "blurb": "Unscramble the letters",
        "description": "When Dan was three years old, he was given a set of birthday cards containing letters. They were arranged into words in the way which formed Dan's favorite number in binary notation. Dan started playing with them immediately and shuffled them because he wasn't yet able to read. His father decided to rearrange them. Help him restore the original number, with the condition that it was the maximum possible one.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems<br><br>The input for each problem:<br>The first line contains a single integer L<sub>n<\/sub> (1 <= L<sub>n<\/sub> <= 105) \u2014 the length of the string. <br>The second line contains a string consisting of English lowercase letters: 'z', 'e', 'r', 'o' and 'n'.<br><br>It is guaranteed that it is possible to rearrange the letters in such a way that they form a sequence of words, each being either \"zero\" which corresponds to the digit 0 or \"one\" which corresponds to the digit 1.",
        "sampleInput": "2<br>4<br>ezor<br>10<br>nznooeeoer",
        "outputForm": "Print the maximum possible number in binary notation. Print binary digits separated by a space. The leading zeroes are allowed.",
        "sampleOutput": "0<br>1 1 0"
    },
    "PRA2": {
        "title": "Equal Odds and Evens",
        "type": "Advanced",
        "state": "up",
        "blurb": "Splitting a sequence",
        "description": "There is a sequence of integers, which contains an equal number of odd and even numbers. Given a limited amount of money, you have to make the maximum possible number of cuts such that each resulting segment will have the same number of odd and even integers.<br><br>Cuts separate a sequence to continuous (contiguous) segments. A cut is a break between two adjacent elements in a sequence. So after cutting, each element belongs to exactly one segment. Say, [4,1,2,3,4,5,4,4,5,5] \u2192 two cuts \u2192 [4,1|2,3,4,5|4,4,5,5]. On each segment, the number of odd elements should be equal to the number of even elements.<br><br>The cost of the cut between \ud835\udc65 and \ud835\udc66 numbers is |\ud835\udc65\u2212\ud835\udc66| dollars. Find the maximum possible number of cuts that can be made while spending no more than D dollars.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^4) - the number of problems.<br><br>The input for each sequence:<br>First line contains an integer \ud835\udc5b (2 \u2264 \ud835\udc5b \u2264 100) and an integer D (1 \u2264 D \u2264 100) \u2014 the number of elements in the sequence and the number of dollars you have.<br><br>Second line contains \ud835\udc5b integers: \ud835\udc4e<sub>1<\/sub>, \ud835\udc4e<sub>2<\/sub>, ..., \ud835\udc4e<sub>n<\/sub> (1\u2264 \ud835\udc4e<sub>i<\/sub> \u2264 100) \u2014 elements of the sequence, which contains the equal number of even and odd numbers",
        "sampleInput": "3<br>6 4<br>1 2 5 10 15 20<br>4 10<br>1 3 2 4<br>6 100<br>1 2 3 4 5 6",
        "outputForm": "For each sequence, output the maximum possible number of cuts that can be made while spending no more than D dollars.",
        "sampleOutput": "1<br>0<br>2"
    },
    "PRI2": {
        "title": "Big Numbers",
        "type": "Intermediate",
        "state": "up",
        "blurb": "Creating big numbers",
        "description": "You are given a decimal number \ud835\udc4e consisting of \ud835\udc5b digits from 1 to 9. You also have a function \ud835\udc53 that maps every digit from 1 to 9 to some (possibly the same) digit from 1 to 9.<br><br>You can perform the following operation no more than once: choose a non-empty contiguous subsegment of digits in \ud835\udc4e, and replace each digit \ud835\udc65 from this segment with \ud835\udc53(\ud835\udc65). For example, if \ud835\udc4e = 1337, \ud835\udc53(1) = 1, \ud835\udc53(3) = 5, \ud835\udc53(7) = 3, and you choose the segment consisting of three rightmost digits, you get 1553 as the result.<br><br>What is the maximum possible number you can obtain applying this operation one time?",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) - the number of problems<br><br>The input for each problem:<br>The first line contains one integer \ud835\udc5b (1\u2264 \ud835\udc5b \u2264 2\u22c510^5) \u2014 the number of digits in \ud835\udc4e.<br>The second line contains a string of \ud835\udc5b characters, denoting the number \ud835\udc4e. Each character is a decimal digit from 1 to 9.<br>The third line contains exactly 9 integers \ud835\udc53(1), \ud835\udc53(2), ..., \ud835\udc53(9) (1 \u2264 \ud835\udc53(\ud835\udc56) \u2264 9).",
        "sampleInput": "3<br>4<br>1337<br>1 2 5 4 6 6 3 1 9<br>5<br>11111<br>9 8 7 6 5 4 3 2 1<br>2<br>33<br>1 1 1 1 1 1 1 1 1",
        "outputForm": "Output the answer to all n problems in n lines.",
        "sampleOutput": "1557<br>99999<br>33"
    },
    "PRB2": {
        "title": "Insomnia",
        "type": "Beginner",
        "state": "up",
        "blurb": "Unable to sleep",
        "description": "There is a castle with \ud835\udc5b rooms situated on the main street of Transylvania. The castle can be represented as an array of \ud835\udc5b integer numbers \ud835\udc4e<sub>1<\/sub>,\ud835\udc4e<sub>2<\/sub>,\u2026,\ud835\udc4e<sub>n<\/sub>, where \ud835\udc4e<sub>\ud835\udc56<\/sub> = 1 if in the \ud835\udc56-th room the light is on and \ud835\udc4e<sub>\ud835\udc56<\/sub> = 0 otherwise.<br><br>The people in the \ud835\udc56-th room are disturbed and cannot sleep if and only if 1 < \ud835\udc56 < \ud835\udc5b and \ud835\udc4e<sub>i-1<\/sub> = \ud835\udc4e<sub>i+1<\/sub> = 1 and \ud835\udc4e<sub>\ud835\udc56<\/sub> = 0 (in other words, their room's light is turned off while their neighboring rooms' lights are on).<br><br>What is the minimum number \ud835\udc58 such that if people from exactly \ud835\udc58 distinct rooms turn off the lights then nobody will be disturbed? Your task is to find this number \ud835\udc58.",
        "inputForm": "The very first input line contains integer n (1 <= n <= 10^6) - the number of castles.<br><br>The input for each castle:<br>The first line contains one integer \ud835\udc5b (3 \u2264 \ud835\udc5b \u2264 100) \u2014 the number of rooms in the castle.<br>The second line of the input contains \ud835\udc5b integers \ud835\udc4e<sub>1<\/sub>,\ud835\udc4e<sub>2<\/sub>,\u2026,\ud835\udc4e<sub>n<\/sub> (\ud835\udc4e<sub>\ud835\udc56<\/sub> \u2208 {0,1}), where \ud835\udc4e<sub>\ud835\udc56<\/sub> is the state of light in the \ud835\udc56-th room.",
        "sampleInput": "3<br>10<br>1 1 0 1 1 0 1 0 1 0<br>5<br>1 1 0 0 0<br>6<br>1 0 1 1 0 1",
        "outputForm": "For each of the n castles, print the minimum number \ud835\udc58 such that if people from exactly \ud835\udc58 distinct rooms turn off the lights then nobody will be disturbed.",
        "sampleOutput": "2<br>0<br>2"
    },
    "PRA1": {
        "title": "Special Numbers",
        "type": "Advanced",
        "state": "up",
        "blurb": "Ones and Fours",
        "description": "A special number is a number formed by concatenation of numbers 1, 14 and 144. You can use each of these numbers any number of times. Hence, 14144, 141414 and 1411 are special numbers but 1444, 514 and 414 are not.<br><br>You will be given a number. Determine if it is a magic number or not.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) -- the number of problems.<br>The next n lines contain a single integer M<sub>i<\/sub> (0 <= M<sub>i<\/sub> <= 10^9) for problem i",
        "sampleInput": "3<br>114114<br>1111<br>441231",
        "outputForm": "Output the answer to all n problems in n lines",
        "sampleOutput": "YES<br>YES<br>NO"
    },
    "PRI1": {
        "title": "Chocolate Store",
        "type": "Intermediate",
        "state": "up",
        "blurb": "Shopping at the chocolate store",
        "description": "Your favorite chocolate store sells B sealed bags. You know that exactly S snickers bars and exactly H hershey's bars are placed in B sealed bags in total.<br>Each bag can be one of three types:<br>- It can contain a single snickers bar and no hershey's bar.<br>- It can contain a single hershey's bar and no snickers bar<br>- It can contain both a single hershey's bar and a single snickers bar.<br><br>But you don't know which type a particular bag is. All bags look identical and indistinguishable from each other.<br><br>What is the minimum number of bags you have to buy to be sure that, whichever types they are, you'll obtain at least one snickers bar and at least one hershey's bar?<br><br>Note that you do not open the bag in the purchasing process, that is, you just buy some number of bags. It's guaranteed that the answer always exists.",
        "inputForm": "The first input line contains integer n (1 <= n <= 100) -- the number of problems.<br><br>The next n lines contain three integers B<sub>i<\/sub>, S<sub>i<\/sub>, H<sub>i<\/sub>  (0 <= B<sub>i<\/sub> <= 10^9, 1 <= S<sub>i<\/sub>, H<sub>i<\/sub> <= B<sub>i<\/sub>, S<sub>i<\/sub> + H<sub>i<\/sub> >= B<sub>i<\/sub>)for problem i",
        "sampleInput": "3<br>10 5 7<br>10 10 10<br>2 1 1",
        "outputForm": "Output the answer to all n problems in n lines",
        "sampleOutput": "6<br>1<br>2"
    },
    "PRB1": {
        "title": "At the Concert",
        "type": "Beginner",
        "state": "up",
        "blurb": "Sarah Goes to the Concert",
        "description": "After a long day at school, Sarah decides to go to a concert. She wants to figure out how many people will be there. She knows that there are M rows of seats and each row has N seats in it. Help Sarah figure out how many people will be attending the concert. Assume all seats are filled.",
        "inputForm": "The first input line contains integer n (1 <= n <= 10^6) -- the number of problems.<br>The next n lines contain two integers M<sub>i<\/sub> and N<sub>i<\/sub> (0 <= M<sub>i<\/sub>, N<sub>i<\/sub> <= 10^6) for problem i",
        "sampleInput": "3<br>2 4<br>9 1<br>3 7",
        "outputForm": "Output the answer to all n problems in n lines",
        "sampleOutput": "8<br>9<br>21"
    }
}