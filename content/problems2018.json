{
    "PRA11": {
        "title": "Longest Increasing Subsequence",
        "type": "Advanced",
        "state": "up",
        "blurb": "LIS",
        "description": "Given n sequences of a<sub>n<\/sub> integers, find the length of the longest increasing subsequence of each array. A subsequence is a defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 100) \u2014 the number of sequences<br>The input of each of these sequences:<br>The first line contains integers a<sub>n<\/sub> (1 <=\u2009 a<sub>n<\/sub> <= 20,000) -  the number of integers in the sequences<br>The next a<sub>n<\/sub> lines contain the integers in the sequence (-10<sup>6<\/sup> <= b<sub>i<\/sub> <= 10<sup>6<\/sup>) - b<sub>i<\/sub> is the i-th integer in the sequences",
        "sampleInput": "2<br>12<br>4<br>2<br>1<br>3<br>7<br>4<br>2<br>9<br>11<br>6<br>8<br>4<br>10<br>-4<br>3<br>1<br>3<br>3<br>-5<br>0<br>2<br>-5<br>-5",
        "outputForm": "For each sequence, print the length of its longest increasing subsequence.",
        "sampleOutput": "5<br>3"
    },
    "PRB11": {
        "title": "Broken Stick",
        "type": "Beginner",
        "state": "up",
        "blurb": "Fix the Stick",
        "description": "You have a stick that consists of m segments. However, some segments of the stick are broken and need to be repaired. Luckily, you have an infinite roll of tape. You want to cut some pieces from the tape and use them to cover all of the broken segments. Specifically, a piece of tape of integer length t placed at some position s will cover segments s, s+1, ... , s+t-1. You are allowed to cover non-broken segments; it is also possible that some pieces of tape will overlap. As you have limited time, you want to cut at most k continuous pieces of tape to cover all the broken segments. For n potential sticks, what is the minimum total length of the pieces of tape needed to repair these sticks?",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 100) \u2014 the number of potential sticks<br>The input of each of these sticks:<br>The first line contains integers a<sub>n<\/sub>, m<sub>n<\/sub>, k<sub>n<\/sub> (1 <=\u2009 a<sub>n<\/sub> <= 10<sup>5<\/sup>, a<sub>n<\/sub> <= m<sub>n<\/sub> <= 10<sup>9<\/sup>, 1 <= k<sub>n<\/sub> <= a<sub>n<\/sub>) -  the number of broken segments, the length of the stick and the maximum number of pieces of tape you can use.<br>The second line contains a<sub>n<\/sub> integers b<sub>1<\/sub>, b<sub>2<\/sub>,..., b<sub>a<\/sub> (1 <= b<sub>i<\/sub> <= m<sub>n<\/sub>) - the positions of the broken segments",
        "sampleInput": "2<br>4 100 2<br>20 30 75 80<br>5 100 3<br>1 2 4 60 87",
        "outputForm": "For each potential stick, print the minimum total length of the pieces of tape needed to repair these sticks",
        "sampleOutput": "17<br>6"
    },
    "PRA10": {
        "title": "Another pointless game",
        "type": "Advanced",
        "state": "up",
        "blurb": "Luke and Morgan are bored again",
        "description": "Luke and Morgan are bored again and decide to play a new game with the following rules. First, they choose a set of A distinct integers. Then, they take turns to make the following moves. During a move, either Luke or Morgan (the player whose turn it is) can choose two integers x and y from the set, such that the set doesn't contain their positive difference. Then this player adds this positive difference to the set. Luke will make the first move.<br><br>If the current player has no valid move, he (or she) loses the game. If both players play optimally, given N potential starting sets of distinct integers, who will finally win the game.",
        "inputForm": "The first input line contains integer N (1 <=\u2009 N <= 100) \u2014 the number of potential starting sets of integers<br>The input of each of these:<br>The first line contains integer a (2 <=\u2009a <= 100)<br>The second line contains a integers b<sub>1<\/sub>, b<sub>2<\/sub>,...,b<sub>a<\/sub>(1 <=\u2009b<sub>i<\/sub> <= 10<sup>9<\/sup>)",
        "sampleInput": "3<br>2<br>2 3<br>2<br>5 3<br>3<br>5 6 7",
        "outputForm": "For all N potential starting sets of integers, print the winner's name. If Luke wins print \"Luke\", otherwise print \"Morgan\"",
        "sampleOutput": "Luke<br>Luke<br>Morgan"
    },
    "PRB10": {
        "title": "Deforestation",
        "type": "Beginner",
        "state": "up",
        "blurb": "Oscar, Peggy, and Quinn buy land in the forest",
        "description": "Three friends, Oscar, Peggy, and Quinn plan to buy three distinct plots of land A, B, C in a forest. This forest can be divided into equal 1x1 square plots, which can be uniquely described by their integer coordinates. Initially, all plots in the forest (including A, B, C) are covered by trees. The friends decide to clear the trees from some of the plots such that A, B, C are cleared and they can reach any of the plots A, B, C from any other one by moving through adjacent cleared plots.<br><br>In an effort to reduce carbon dioxide emissions, the friends wish to clear the smallest number of plots to satisfy the above conditions. For N potential sets of plots A, B, C help them find out this minimum number of plots they need to clear.",
        "inputForm": "The first input line contains integer N (1 <=\u2009 N <= 100) \u2014 the number of potential sets of plots A, B, C<br>The input of each of these potential sets of plots:<br>The first line contains integers x<sub>a<\/sub> and y<sub>a<\/sub> (1 <=\u2009x<sub>a<\/sub>, y<sub>a<\/sub> <= 1,000)<br>The next line contains integers x<sub>b<\/sub> and y<sub>b<\/sub> (1 <=\u2009x<sub>b<\/sub>, y<sub>b<\/sub> <= 1,000)<br>The next line contains integers x<sub>c<\/sub> and y<sub>c<\/sub> (1 <=\u2009x<sub>c<\/sub>, y<sub>c<\/sub> <= 1,000)",
        "sampleInput": "2<br>0 0<br>1 1<br>2 2<br>0 0<br>2 0<br>1 1",
        "outputForm": "For all N potential sets of plots A, B, C, print the minimum number of plots they need to clear.",
        "sampleOutput": "5<br>4"
    },
    "PRB9": {
        "title": "Perfect Integer",
        "type": "Beginner",
        "state": "up",
        "blurb": "Find the a-th smallest perfect positive integer",
        "description": "A positive integer is perfect, if and only if the sum of its digits is exactly 10. You will be given n positive integers a<sub>1<\/sub>, a<sub>2<\/sub>, ... , a<sub>n<\/sub>. For each of these, find the a<sub>i<\/sub>-th smallest perfect positive integer.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 1,000) \u2014 the number of integers<br>The next n lines contain integer a<sub>i<\/sub> (1 <=\u2009 a<sub>i<\/sub>\u2009 <= 10,000) - the i-th integer",
        "sampleInput": "2<br>1<br>2",
        "outputForm": "For each integer, output the a<sub>i<\/sub>-th smallest perfect integer.",
        "sampleOutput": "19<br>28"
    },
    "PRA9": {
        "title": "Cow Stacking",
        "type": "Advanced",
        "state": "up",
        "blurb": "FJ buys a new bookshelf for the cow library",
        "description": "Every year for a years, Farmer John buys a new bookshelf with height b<sub>a<\/sub> for the cow library. However, these shelves get filled up quite quickly, and by the end of the year, the only available space is at the top.<br><br>FJ has n cows each with some height of h<sub>n<\/sub>. To reach the top of the bookshelf, one or more of the cows can stand on top of each other in a stack, so that their total height is the sum of each of their individual heights. This total height must be no less than the height of the bookshelf in order for the cows to reach the top.<br><br>Since a taller stack of cows than necessary can be dangerous, your job is to find the set of cows that produces a stack of the smallest height possible such that the stack can reach the bookshelf. Your program should print the minimal excess height between the optimal stack of cows and the bookshelf.",
        "inputForm": "The first input line contains integer a (1 <=\u2009 a\u2009 <= 10) \u2014 the number of years<br>The input of each of these years:<br>The first line contains integers n<sub>a<\/sub> (1 <=\u2009 n<sub>a<\/sub> <= 1,000,000) and b<sub>a<\/sub> (1 <= b<sub>a<\/sub> <= s<sub>a<\/sub>, where s<sub>a<\/sub> is the sum of the heights of all cows) - the number of cows and height of the bookshelf<br>The next n<sub>a<\/sub> lines contain integer h<sub>i<\/sub>(1 <= h<sub>i<\/sub><= 1,000,000) - the height of the i-th cow",
        "sampleInput": "1<br>5 16<br>3<br>1<br>3<br>5<br>6",
        "outputForm": "For each year, output a single integer representing the (non-negative) difference between the total height of the optimal set of cows and the height of the shelf.",
        "sampleOutput": "1"
    },
    "PRA8": {
        "title": "Keys",
        "type": "Advanced",
        "state": "up",
        "blurb": "Get to the office",
        "description": "For <i>n<\/i> days, there are <i>a<sub>n<sub><\/i> people and <i>b<sub>n<sub><\/i> keys on a straight line. Every person wants to get to the office which is located somewhere on the line as well. To do that, they need to reach some point with a key, take the key and then go to the office. Once a key is taken, it can\u2019t be used by anybody else. A person can also pass through a point with a key without taking it.<br><br>Determine the minimum time needed for all <i>a<sub>n<sub><\/i> people to get to the office with keys. Assume that people move 1 unit per second.",
        "inputForm": "The first input line contains integer <i>n<\/i> (1 <=\u2009 <i>n<\/i>\u2009 <= 10) \u2014 the number of days<br>The input of each of these days:<br>The first line contains integers <i>a<sub>n<sub><\/i>, <i>b<sub>n<sub><\/i>, <i>c<sub>n<sub><\/i> (1 <= <i>a<sub>n<sub><\/i> <= 1000, <i>a<sub>n<sub><\/i> <= <i>b<sub>n<sub><\/i> <= 2000, 1 <= <i>c<sub>n<sub><\/i> <= 10<sup>9<\/sup>) \u2014 the number of people, the number of keys, and the location of the officer<br>The second line contains <i>a<sub>n<sub><\/i> distinct integers <i>d<sub>1<sub><\/i>, <i>d<sub>2<sub><\/i>, ..., <i>d<sub>a<sub><\/i> (1 <= <i>d<sub>i<sub><\/i> <= 10<sup>9<\/sup>) \u2014 initial positions of the people<br>The second line contains <i>b<sub>n<sub><\/i> distinct integers <i>e<sub>1<sub><\/i>, <i>e<sub>2<sub><\/i>, ..., <i>e<sub>b<sub><\/i> (1 <= <i>e<sub>i<sub><\/i> <= 10<sup>9<\/sup>) \u2014 initial positions of the keys",
        "sampleInput": "2<br>2 4 50<br>20 100<br>60 10 40 80<br>1 2 10<br>11<br>15 7",
        "outputForm": "Print the minimum time (in seconds) needed for all <i>a<sub>n<sub><\/i> people to get to the office with keys",
        "sampleOutput": "50<br>7"
    },
    "PRB8": {
        "title": "Test",
        "type": "Beginner",
        "state": "up",
        "blurb": "Nicole is on a game show",
        "description": "Nicole has been selected to participate in a game show. On the show, she takes <i>n<\/i> tests which consist of <i>a<sub>n<sub><\/i> consecutive questions. Each correct answer gives one point to Nicole for that test. The game show also has a counter of consecutive correct answers. When she answers a question correctly, the counter increases by 1. If the player answers a question incorrectly, the counter is reset to 0. If after an answer the counter reaches <i>k<sub>n<\/sub><\/i>, then it is reset to 0, and Nicole\u2019s score for that test doubles. (In this situation, first 1 point is added to Nicole\u2019s score, and then the total score is doubled) At the beginning of each test, Nicole\u2019s score and counter are set to 0.<br><br>Nicole remembers that she answered <i>m<sub>n<\/sub><\/i> questions correctly on each test. However, she doesn\u2019t remember the order of the questions. Help Nicole figure out the minimum possible score she could\u2019ve received on each test.",
        "inputForm": "The first input line contains integer <i>n<\/i> (1 <=\u2009 <i>n<\/i> <= 10) \u2014 the number of test<br>The next <i>n<\/i> lines will contain integers <i>a<sub>i<\/sub><\/i>, <i>m<sub>i<\/sub><\/i>, and <i>k<sub>i<\/sub><\/i> (2 <= <i>k<sub>i<\/sub><\/i> <= <i>a<sub>i<\/sub><\/i> <= 10<sup>9<\/sup>, 0 <= <i>m<sub>i<\/sub><\/i> <= <i>a<sub>i<\/sub><\/i>) - the number of questions, the number of correct answers, and the number the counter needs to reach for the score to double",
        "sampleInput": "2<br>5 3 2<br>5 4 2",
        "outputForm": "Print the minimum possible score Nicole could\u2019ve received on each test.",
        "sampleOutput": "3<br>6"
    },
    "PRA7": {
        "title": "Swapping Digits",
        "type": "Advanced",
        "state": "up",
        "blurb": "Divisible by 25",
        "description": "You are given n integers. In one move you can swap any two adjacent digits in a number such that the resulting number will not contain leading zeroes. For each of the given integers, what is the minimum number of moves you have to make to obtain a number that is divisible by 25. Print \u201c-1\u201d if it\u2019s impossible to do so.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 100) \u2014 the number of integers<br>The next n lines will contain integer a<sub>n<\/sub> (1 <= a<sub>n<\/sub> <= 10<sup>18<\/sup>)",
        "sampleInput": "3<br>5071<br>705<br>1241367",
        "outputForm": "For each of the given integers, print the minimum number of moves you have to make to obtain a number that is divisible by 25. Print \u201c-1\u201d if it\u2019s impossible to do so.",
        "sampleOutput": "4<br>1<br>-1"
    },
    "PRB7": {
        "title": "The Pointless Game",
        "type": "Beginner",
        "state": "up",
        "blurb": "Luke and Morgan are bored",
        "description": "Luke and Morgan are playing a pointless game which consists of multiple rounds. The rules are simple: In each round, a natural number k is chosen. Then, the one who says it faster than the other wins. The winner\u2019s score is multiplied by k<sup>2<\/sup> and the loser\u2019s score is multiplied by k. At the beginning of the game, they both have scores of one. <br><br>Luke forgets the history of all n games they played but managed to recall the final results. Help Luke verify that, for each game, these final results are possible.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 10<sup>6<\/sup>) \u2014 the number of games)<br>The next n lines will contain integers a<sub>n<\/sub> and b <sub>n<\/sub> (1 <= a<sub>n<\/sub>, b<sub>n<\/sub> <= 10<sup>9<\/sup>) - the scores of Luke and Morgan at the end of each game",
        "sampleInput": "6<br>2 4<br>75 45<br>8 8<br>16 16<br>247 994<br>1000000000 1000000",
        "outputForm": "For each pair of scores, print \u201cYes\u201d if it\u2019s possible for a game to finish with these scores. Otherwise, print \u201cNo\u201d.",
        "sampleOutput": "Yes<br>Yes<br>Yes<br>No<br>No<br>Yes"
    },
    "PRA6": {
        "title": "Cross the River",
        "type": "Advanced",
        "state": "up",
        "blurb": "Why did the frog cross the river?",
        "description": "For n years, an infinite number of frogs need to cross a river with w<sub>n<\/sub> units width, but the frogs can only jump up to l<sub>n<\/sub> units. Hopefully, there are some stones in the river to help them. These stones are located integer distances from the banks of the rivers. Specifically, there are a<sub>i<\/sub> stones i units from the bank the frogs start at. Each stone can only be used by one frog, after that it drowns in the water. What is the maximum number of frogs that can cross the river, given that they can only jump on the stones?",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 10) \u2014 the number of years<br>The input of each of these years:<br>The first line contains integers w<sub>n<\/sub> and l<sub>n<\/sub> (1 <=\u2009 l<sub>n<\/sub> < w<sub>n<\/sub> <= 10<sup>5<\/sup>) - the width of the river and the maximum length of a frog\u2019s jump<br>The second line contains (w - 1) integers a<sub>1<\/sub>, a<sub>2<\/sub>,..., a<sub>w-1<\/sub> (0 <= a<sub>i<\/sub> <= 10<sup>4<\/sup>) - a<sub>i<\/sub> is the number of stones i units away from the bank the frogs start at",
        "sampleInput": "2<br>10 5<br>0 0 1 0 2 0 0 1 0<br>10 3<br>1 1 1 1 2 1 1 1 1",
        "outputForm": "For each year, print the maximum number of frogs that can cross the river.",
        "sampleOutput": "3<br>3"
    },
    "PRB6": {
        "title": "Shine the Spotlight",
        "type": "Beginner",
        "state": "up",
        "blurb": "Illuminate the Actors",
        "description": "There is a theater performance once every n years. Every year, the theater stage is size a<sub>n<\/sub> * b<sub>n<\/sub>. Throughout the performance, all of the actors will stay in the same cell. Your job during the performance is to place a spotlight on the stage. The spotlight\u2019s position can be described by the cell it is placed to and the direction it shines (left, right, up, down). A position is called good if there is no actor in the cell the spotlight is placed to and there is at least one actor in the direction the spotlight projects. Count the number of potential good positions for the spotlight. Two positions are considered different if the location cells or direction differ.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 1000) \u2014 the number of performances<br>The input of each of these performances:<br>The first line contains integers a<sub>n<\/sub> and b<sub>n<\/sub> (1 <=\u2009 a<sub>n<\/sub>, b<sub>n<\/sub> <= 1000) - the number of rows and columns on stage<br>The next a<sub>n<\/sub> lines contain b<sub>n<\/sub> integers, 0 or 1. 1 means there will be an actor in the cell and 0 means the cell will be empty.",
        "sampleInput": "2<br>2 4<br>0 1 0 0<br>1 0 1 0<br>4 4<br>0 0 0 0<br>1 0 0 1<br>0 1 1 0<br>0 1 0 0",
        "outputForm": "For all n performances, print the number of potential good positions for the spotlight.",
        "sampleOutput": "9<br>20"
    },
    "PRA5": {
        "title": "Powers",
        "type": "Advanced",
        "state": "up",
        "blurb": "Kevin is One Year Old",
        "description": "Kevin just turned one year old! As a gift, his parents gave him two integers. Since Kevin is a very curious child, he immediately comes up with a task that he could do with these integers. He wants to find the number of possible x such that x can be expressed as a<sup>p<\/sup> (a > 0, p > 1) and x is equal to one of his integers or in between them. Given n possible pairs of numbers that Kevin could\u2019ve received, help him find the number of possible x.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 10<sup>5<\/sup>) \u2014 the number of possible pairs<br>The next n lines contain two integers l<sub>n<\/sub> and r<sub>n<\/sub> (1 <= l <= r <= 10<sup>18<\/sup>) \u2014 the pair of integers",
        "sampleInput": "7<br>1 4<br>9 9<br>5 7<br>12 29<br>137 591<br>1 1000000<br>387291074607832779 798305191127761550",
        "outputForm": "For all n possible pairs of numbers, output the number of x such that l <= x =< r and x can be expressed in terms of a<sup>p<\/sup> where a > 0 and p > 1.",
        "sampleOutput": "2<br>1<br>0<br>3<br>17<br>1111<br>271351299"
    },
    "PRB5": {
        "title": "Palindrome Formation",
        "type": "Beginner",
        "state": "up",
        "blurb": "Dancers prepare for their performance",
        "description": "For n performances, a group of dancers plan to arrange themselves in a row (Note that the people in the group change from performance to performance). For each of these performances, a blue suit is already bought for some of the dancers, a red suit is already bought for some of the dancers, and the rest of the suits need to be bought in the future. The group decides that for all of their performances, they want the colors of the suits to form a palindrome. This means that they will buy the rest of their suits so that the color of the leftmost dancer's suit is the same as the color of the rightmost dancer's suit, the 2nd left is the same as 2nd right, and so on. Given the cost of a blue suit and a red suit, find out whether it\u2019s possible to buy suits to form a palindrome, and if it\u2019s possible, what\u2019s the minimal cost of doing so. Remember that dancers cannot change positions and new suits aren\u2019t allowed to be bought for dances who already have suits.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 10) \u2014 the number of performances<br>The input of each of these performances :<br>The first line contains integers a<sub>n<\/sub>, b<sub>n<\/sub>, and c<sub>n<\/sub> (1 <=\u2009 a<sub>n<\/sub> <= 20, 1 <=\u2009 b<sub>n<\/sub>, c<sub>n<\/sub> <= 100) - the number of dancers, the cost of a blue suit, and the cost of a red suit<br>The second line contains a<sub>i<\/sub> integers which denote the colors of the suits of the dancers. The number 0 denotes blue color, the number 1 denotes red colors, and the number 2 denotes that a suit needs to be bought for this performers.",
        "sampleInput": "3<br>5 100 1<br>0 1 2 1 2<br>3 10 12<br>1 2 0<br>3 12 1<br>0 1 0",
        "outputForm": "For all n performances, print -1 if it\u2019s impossible to form a palindrome or the minimum price to get the desired visual effect.",
        "sampleOutput": "101<br>-1<br>0"
    },
    "PRA4": {
        "title": "Winning Ticket",
        "type": "Advanced",
        "state": "up",
        "blurb": "Heidi Tries to Win the Lottery",
        "description": "Heidi recently bought n lottery tickets. Each of these tickets has a sequence of i<sub>n<\/sub> digits. A ticket is a winning ticket if it can be divided into two or more non-intersecting segments with equal sums. For example, ticket 350178 is a winning ticket because it can be divided into three segments 350, 17, and 8: 3 + 5 + 0 = 1 + 7 = 8. Note that each digit of the sequence should belong to exactly one segment. For each of her n tickets, help Heidi determine if it\u2019s a winning ticket.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 10) \u2014 the number of tickets<br>The input of each of these tickets:<br>The first line contains integer i<sub>n<\/sub> (1 <=\u2009 i<sub>n<\/sub> <= 100) - the number of digits in the ticket\u2019s sequence<br>The second line contains  i<sub>n<\/sub> digits a<sub>1<\/sub>a<sub>2<\/sub>...a<sub>i<\/sub> (0 <=\u2009 a<sub>k<\/sub> <= 9) - the digits are printed without spaces",
        "sampleInput": "2<br>5<br>73452<br>4<br>1248",
        "outputForm": "For all n tickets, print \u201cYES\u201d if its a winning ticket or \u201cNO\u201d if it's not.",
        "sampleOutput": "YES<br>NO"
    },
    "PRB4": {
        "title": "Slime",
        "type": "Beginner",
        "state": "up",
        "blurb": "Find the Largest Slime",
        "description": "For n years, John has purchased i<sub>n<\/sub> slimes. Each slime has an integer value associated with it. Each of these years, John organizes his slimes into a row.  Any slime can eat its adjacent slime (the closest slime to its left or to its right, assuming that this slime exists). When a slime with a value x eats a slime with a value y, the eaten slime disappears, and the value of the remaining slime changes to x\u2212y. The slimes will eat each other until there is only one slime left. For each year, find the maximum possible value of the last slime.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 10) \u2014 the number of years<br>The input of each of these years:<br>The first line contains integer i<sub>n<\/sub> (1 <=\u2009 i<sub>n<\/sub> <= 500000) - the number of slimes<br>The second line contains the integer values of the slimes a<sub>1<\/sub>, a<sub>2<\/sub>, ... , a<sub>i<\/sub><br>(-10<sup>9<\/sup> <=\u2009 a<sub>k<\/sub> <= 10<sup>9<\/sup>)",
        "sampleInput": "3<br>4<br>2 1 2 1<br>5<br>0 -1 -1 -1 -1<br>7<br>-8 9 0 -10 -20 -8 3",
        "outputForm": "For all n years, print the maximum possible value of the last slime.",
        "sampleOutput": "4<br>4<br>58"
    },
    "PRA3_1": {
        "title": "Cutting Wood",
        "type": "Advanced",
        "state": "up",
        "blurb": "Eve Lives in the Forest",
        "description": "Eve has n pieces of wood with length k<sub>n<\/sub>. For each piece of wood, she needs to cut it into i<sub>n<\/sub> pieces of lengths a<sub>1<\/sub>, a<sub>2<\/sub>, . . . , a<sub>i<\/sub> (Note a<sub>1<\/sub> + a<sub>2<\/sub> + . . . + a<sub>i<\/sub> = k). However, every time Eve that cuts a piece of wood with length b into two pieces with lengths that sum up to b, it costs her b units of energy. For each of Eve\u2019s pieces of wood, help her determine the minimum units of energy she needs to use in order to cut them into her desired pieces.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 1,000) \u2014 the number of pieces of wood<br>The input of each of these pieces:<br>The first line contains integer k<sub>n<\/sub> &  i<sub>n<\/sub> (1 <=\u2009 i <= k <= 1,000,000) - the length of the piece of wood and the number of pieces<br>The second line contains the lengths of i<sub>n<\/sub> desired pieces of wood a<sub>1<\/sub>, a<sub>2<\/sub>, . . . , a<sub>i<\/sub> (1 <=\u2009 a<sub>j<\/sub> <= k)",
        "sampleInput": "4<br>5 1<br>5<br>9 3<br>2 5 2<br>10 4<br>3 2 4 1<br>10 4<br>2 3 3 2",
        "outputForm": "For all n pieces of wood, print the minimum units of energy Eve needs to use in order to cut them into her desired pieces.",
        "sampleOutput": "0<br>13<br>19<br>20"
    },
    "PRB3_1": {
        "title": "Power of Two",
        "type": "Beginner",
        "state": "up",
        "blurb": "Dan Wants Good Sequences",
        "description": "Dan has n sequences of i<sub>n<\/sub> integers. A sequence a<sub>1<\/sub>, a<sub>2<\/sub>, . . . , a<sub>i<\/sub> is called good if, for each element a<sub>k<\/sub>, it contains an integer a<sub>j<\/sub> (j can\u2019t equal k) such that a<sub>j<\/sub> + a<sub>k<\/sub> is a power of two.<br><br>For example the following sequences are good: [5,3,11] , [1,1,1,1023], [7,39,89,25,89], []. (Note that an empty sequence is called good).<br><br>For each of Dan\u2019s n sequences, determine the minimum number of elements you need to remove from it to make it good.",
        "inputForm": "The first line of input contains integer n (1 <=\u2009 i <= 100) \u2014 the number of sequences<br>The input of each of these sequences:<br>The first line contains integer i<sub>n<\/sub> (1 <=\u2009 i <= 1,000) - the number of elements in sequence n<br>The second line contains the sequence of i<sub>n<\/sub> elements a<sub>1<\/sub>, a<sub>2<\/sub>, . . . , a<sub>i<\/sub> (1 <=\u2009 a<sub>k<\/sub> <= 1,000,000,000)",
        "sampleInput": "3<br>6<br>4 7 1 5 4 9<br>5<br>1 2 3 4 5<br>1<br>16",
        "outputForm": "For all n sequences, print a line containing the number of elements that you need to remove from the sequence to make it good.",
        "sampleOutput": "1<br>2<br>1"
    },
    "PRA2": {
        "title": "Emirp",
        "type": "Advanced",
        "state": "up",
        "blurb": "Prime Backwards",
        "description": "One day, Carol was looking at the number 13 and realized that by flipping its digits, you get a different prime number. A number with this property (creating a different prime when its digits are reversed) is called an emirp. Carol then decides to look for more emirps by choosing n different integers to examine. Help Carol determine if each of her n chosen integers are emirps.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 100,000) \u2014 the number of integers Carol chooses<br>The next n lines contain an integer a<sub>i<\/sub> (1 <= a<sub>i<\/sub> <= 1,000,000) - the i-th integer Carol chooses ",
        "sampleInput": "5<br>2<br>13<br>11<br>95<br>157",
        "outputForm": "Print n lines containing \u201cYES\u201d if the integer as an emirp or \u201cNO\u201d if it isn\u2019t.",
        "sampleOutput": "NO<br>YES<br>NO<br>NO<br>YES"
    },
    "PRB2": {
        "title": "Points in a Rectangle",
        "type": "Beginner",
        "state": "up",
        "blurb": "Alice Grows Crops",
        "description": "Every year, Alice plants crops in a different rectangular region of her infinitely large field. For year i, the region has vertices (0,d<sub>i<\/sub>), (d<sub>i<\/sub>,0), (n<sub>i<\/sub>,n<sub>i<\/sub>\u2212d<sub>i<\/sub>), (n<sub>i<\/sub>-d<sub>i<\/sub>,n<sub>i<\/sub>). Each year, m<sub>i<\/sub> different crickets try to destroy her crops. However, Alice knows the coordinate locations (x,y) of these m crickets. For the given years, help Alice determine if each cricket is inside (including the border) or outside of the rectangular region where she plants her crops.",
        "inputForm": "The first line of input contains integer i (1 <=\u2009 i <= 1,000) \u2014 the number of years<br>The input of each of these years will be as follows:<br>The first line contains integers n and d (1 <=\u2009 d < n <= 100)<br>The second line contains integer m (1 <=\u2009 m <= 1,000) \u2014 the number of crickets<br>The following m lines contains integers x<sub>j<\/sub> and y<sub>j<\/sub> (0 <=\u2009 x<sub>j<\/sub>, y<sub>j<\/sub> <= n) \u2014 the coordinates of cricket j",
        "sampleInput": "2<br>8 7<br>4<br>4 4<br>2 8<br>8 1<br>6 1<br>7 2<br>4<br>2 4<br>4 1<br>6 3<br>4 5",
        "outputForm": "For all i years, print m<sub>i<\/sub> lines containing \u201cYES\u201d if the cricket lies within the border of the region with the crops or \u201cNO\u201d if the cricket lies outside of this region.",
        "sampleOutput": "YES<br>NO<br>YES<br>YES<br>YES<br>NO<br>NO<br>YES"
    },
    "PRA1": {
        "title": "Distinct Year",
        "type": "Advanced",
        "state": "up",
        "blurb": "Time is Cool",
        "description": "You will be given n years. For each of them, find the minimum distinct year which is strictly larger than the given one. A distinct year is defined as a year that has only distinct digits.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 100) \u2014 the number of years<br>The next n lines contain an integer a (1000 <= a <= 9000) \u2014 the year",
        "sampleInput": "2<br>1987<br>2013",
        "outputForm": "Output the n minimum distinct years that are strictly larger than the given ones in n lines",
        "sampleOutput": "2013<br>2014"
    },
    "PRB1": {
        "title": "Adding Numbers",
        "type": "Beginner",
        "state": "up",
        "blurb": "Bob Does Homework",
        "description": "After getting home from school, Bob starts his math homework which is composed of n addition problems. Each problem is in the form a + b. Help Bob check his homework by finding the answers to each of his problems.",
        "inputForm": "The first input line contains integer n (1 <=\u2009 n\u2009 <= 10^6) \u2014 the number of problems<br>The next n lines contain two integers a<sub>i<\/sub> and b<sub>i<\/sub> (-10^6 <= a<sub>i<\/sub>, b<sub>i<\/sub> <= 10^6) \u2014 the addends for problem i",
        "sampleInput": "3<br>1 5<br>1 1<br>-5 3",
        "outputForm": "Output the answer to all n problems in n lines",
        "sampleOutput": "6<br>2<br>-2"
    }
}