{
    "PRTEST": {
        "title": "TEST",
        "type": "Advanced",
        "state": "down",
        "blurb": "test",
        "description": "test test :)",
        "inputForm": "test ;)",
        "sampleInput": "test",
        "outputForm": "TEST :D",
        "sampleOutput": "TEST"
    },
    "BOMB2": {
        "title": "Episode 2",
        "type": "Advanced",
        "state": "up",
        "maxScore": 500,
        "blurb": "[500]",
        "description": "<p>Looks like someone didn't learn their lesson... We've just found another <script type=\"math\/tex\">100<\/script> bombs! Help us defuse them.<\/p>\n<p>This time, there are <script type=\"math\/tex\">20<\/script> wires on each bomb. We'll list the colors to you, one bomb at a time, and you need to tell us which wire to cut.<\/p>\n<p>Be quick!<\/p>\n<h4>BOMB 1 (INPUT)<\/h4>\n<pre><code class=\"text\">red\nred\nyellow\nblue\nwhite\nblue\nyellow\nblood\nyellow\nwhite\ngreen\nblue\nblack\nwhite\ngreen\nblue\nred\nblue\nyellow\nyellow\n<\/code><\/pre>\n\n<h4>BOMB 1 (OUTPUT)<\/h4>\n<pre><code class=\"text\">Cut wire 15\n<\/code><\/pre>\n\n<h4>BOMB 2 (INPUT)<\/h4>\n<pre><code class=\"text\">gold\ngold\ngold\ngold\nsilver\ngold\ngold\ngold\ngold\ngold\ngold\ngold\ngold\ngold\ngold\ngold\ngold\nsilver\ngold\ngold\n<\/code><\/pre>\n\n<h4>BOMB 2 (OUTPUT)<\/h4>\n<pre><code class=\"text\">Cut wire 8\n<\/code><\/pre>\n\n<p>The rest of the bombs will be hidden until you submit a solution.<\/p>\n<h4>BOMB DEFUSAL MANUAL<\/h4>\n<p>Only the <strong>first<\/strong> correct wire needs to be cut to defuse the bomb (the first instruction that matches). Wire ordering begins with the first on the top. Follow the instructions starting at the top, and working your way down.<\/p>\n<ul>\n<li>If the 17th wire is silver, cut the 10th wire.<\/li>\n<li>If the 20th wire is wine, cut the 20th wire.<\/li>\n<li>If there are exactly 18 gold wires, cut the 8th wire.<\/li>\n<li>If the 12th wire is pearl, cut the 11th wire.<\/li>\n<li>If there are exactly 14 caramel wires, cut the 11th wire.<\/li>\n<li>If there are more than 11 oyster wires, cut the 16th wire.<\/li>\n<li>If there are exactly 12 seaweed wires, cut the 5th wire.<\/li>\n<li>If there are more than 18 emerald wires, cut the 4th wire.<\/li>\n<li>If there are more than 14 fire wires, cut the 1st wire.<\/li>\n<li>If there are exactly 18 lapis wires, cut the 3rd wire.<\/li>\n<li>If the 11th wire is berry, cut the 2nd wire.<\/li>\n<li>If there is exactly 1 pineapple wire, cut the 12th wire.<\/li>\n<li>If there is exactly 1 blood wire, cut the 15th wire.<\/li>\n<li>If there are exactly 4 green wires, cut the 16th wire.<\/li>\n<li>If the 20th wire is fern, cut the 6th wire.<\/li>\n<li>If the 8th wire is berry, cut the 14th wire.<\/li>\n<li>If there are exactly 12 navy wires, cut the 5th wire.<\/li>\n<li>If the 4th wire is peach, cut the 9th wire.<\/li>\n<li>If there are more than 7 apricot wires, cut the 17th wire.<\/li>\n<li>If the 7th wire is obsidian, cut the 16th wire.<\/li>\n<li>If there are exactly 13 ruby wires, cut the 15th wire.<\/li>\n<li>If the 15th wire is black, cut the 8th wire.<\/li>\n<li>If there are exactly 17 grape wires, cut the 17th wire.<\/li>\n<li>If there are exactly 2 granola wires, cut the 16th wire.<\/li>\n<li>If there are exactly 15 macaroon wires, cut the 7th wire.<\/li>\n<li>If there are more than 8 iris wires, cut the 7th wire.<\/li>\n<li>If the 13th wire is cobalt, cut the 1st wire.<\/li>\n<li>If there are exactly 8 hickory wires, cut the 12th wire.<\/li>\n<li>If the 11th wire is wine, cut the 3rd wire.<\/li>\n<li>If the 8th wire is charcoal, cut the 10th wire.<\/li>\n<li>If the 13th wire is silver, cut the 10th wire.<\/li>\n<li>If the 16th wire is dijon, cut the 19th wire.<\/li>\n<li>If there are more than 9 caramel wires, cut the 4th wire.<\/li>\n<li>If there are exactly 9 squash wires, cut the 5th wire.<\/li>\n<li>If the 16th wire is tortilla, cut the 7th wire.<\/li>\n<li>If the 4th wire is white, cut the 18th wire.<\/li>\n<li>If there are exactly 16 hickory wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 5 coconut wires, cut the 2nd wire.<\/li>\n<li>If there are more than 19 fawn wires, cut the 13th wire.<\/li>\n<li>If there are exactly 14 white wires, cut the 12th wire.<\/li>\n<li>If the 10th wire is buttermilk, cut the 1st wire.<\/li>\n<li>If there are exactly 17 orange wires, cut the 12th wire.<\/li>\n<li>If there are exactly 19 gray wires, cut the 7th wire.<\/li>\n<li>If there are exactly 5 banana wires, cut the 16th wire.<\/li>\n<li>If the 10th wire is marigold, cut the 9th wire.<\/li>\n<li>If there are exactly 12 red wires, cut the 14th wire.<\/li>\n<li>If the 4th wire is ivory, cut the 12th wire.<\/li>\n<li>If there are exactly 15 carrot wires, cut the 5th wire.<\/li>\n<li>If there are exactly 11 bronze wires, cut the 6th wire.<\/li>\n<li>If there are exactly 9 corn wires, cut the 4th wire.<\/li>\n<li>If there are exactly 13 marigold wires, cut the 17th wire.<\/li>\n<li>If there are exactly 12 white wires, cut the 17th wire.<\/li>\n<li>If there are more than 7 carrot wires, cut the 18th wire.<\/li>\n<li>If the 10th wire is seaweed, cut the 15th wire.<\/li>\n<li>If the 16th wire is pickle, cut the 16th wire.<\/li>\n<li>If the 16th wire is green, cut the 4th wire.<\/li>\n<li>If there are exactly 13 rust wires, cut the 18th wire.<\/li>\n<li>If there are exactly 15 porcelain wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 2 cobalt wires, cut the 4th wire.<\/li>\n<li>If there are exactly 2 blood wires, cut the 16th wire.<\/li>\n<li>If there are exactly 18 sandstone wires, cut the 8th wire.<\/li>\n<li>If there are more than 8 candy wires, cut the 2nd wire.<\/li>\n<li>If there are more than 9 violet wires, cut the 11th wire.<\/li>\n<li>If the 16th wire is green, cut the 14th wire.<\/li>\n<li>If there are exactly 17 arctic wires, cut the 1st wire.<\/li>\n<li>If there are exactly 18 wood wires, cut the 1st wire.<\/li>\n<li>If there are exactly 12 fern wires, cut the 8th wire.<\/li>\n<li>If the 10th wire is orchid, cut the 14th wire.<\/li>\n<li>If there are exactly 11 dijon wires, cut the 14th wire.<\/li>\n<li>If there are exactly 19 rose wires, cut the 13th wire.<\/li>\n<li>If there are exactly 12 crimson wires, cut the 10th wire.<\/li>\n<li>If there are exactly 6 stone wires, cut the 13th wire.<\/li>\n<li>If the 20th wire is green, cut the 20th wire.<\/li>\n<li>If there are exactly 6 rose wires, cut the 15th wire.<\/li>\n<li>If the 16th wire is cloud, cut the 5th wire.<\/li>\n<li>If there are exactly 5 gold wires, cut the 19th wire.<\/li>\n<li>If the 5th wire is fawn, cut the 11th wire.<\/li>\n<li>If there are more than 12 green wires, cut the 14th wire.<\/li>\n<li>If there are exactly 12 squash wires, cut the 13th wire.<\/li>\n<li>If the 15th wire is rouge, cut the 12th wire.<\/li>\n<li>If the 8th wire is watermelon, cut the 18th wire.<\/li>\n<li>If the 20th wire is tan, cut the 5th wire.<\/li>\n<li>If there are exactly 17 orchid wires, cut the 9th wire.<\/li>\n<li>If the 17th wire is dijon, cut the 3rd wire.<\/li>\n<li>If there are exactly 20 rouge wires, cut the 13th wire.<\/li>\n<li>If there are more than 14 rouge wires, cut the 9th wire.<\/li>\n<li>If there are exactly 12 teal wires, cut the 19th wire.<\/li>\n<li>If there are exactly 15 red wires, cut the 15th wire.<\/li>\n<li>If the 13th wire is sand, cut the 3rd wire.<\/li>\n<li>If the 11th wire is obsidian, cut the 15th wire.<\/li>\n<li>If there are exactly 10 macaroon wires, cut the 20th wire.<\/li>\n<li>If the 3rd wire is gray, cut the 4th wire.<\/li>\n<li>If the 14th wire is bone, cut the 7th wire.<\/li>\n<li>If there are exactly 9 marmalade wires, cut the 13th wire.<\/li>\n<li>If there are more than 15 navy wires, cut the 7th wire.<\/li>\n<li>If there are exactly 16 apricot wires, cut the 5th wire.<\/li>\n<li>If there are exactly 14 scarlet wires, cut the 11th wire.<\/li>\n<li>If the 8th wire is fawn, cut the 5th wire.<\/li>\n<li>If there are exactly 20 gray wires, cut the 14th wire.<\/li>\n<li>If there are more than 7 apricot wires, cut the 8th wire.<\/li>\n<li>If there are exactly 10 arctic wires, cut the 8th wire.<\/li>\n<li>If there are exactly 4 silver wires, cut the 2nd wire.<\/li>\n<li>If the 7th wire is basil, cut the 13th wire.<\/li>\n<li>If there are exactly 7 silver wires, cut the 5th wire.<\/li>\n<li>If the 1st wire is dijon, cut the 20th wire.<\/li>\n<li>If the 4th wire is pineapple, cut the 14th wire.<\/li>\n<li>If the 10th wire is ruby, cut the 1st wire.<\/li>\n<li>If there are exactly 19 pearl wires, cut the 9th wire.<\/li>\n<li>If the 8th wire is fern, cut the 17th wire.<\/li>\n<li>If there are exactly 7 bronze wires, cut the 2nd wire.<\/li>\n<li>If the 6th wire is rose, cut the 19th wire.<\/li>\n<li>If there are exactly 18 rose wires, cut the 1st wire.<\/li>\n<li>If there is exactly 1 basil wire, cut the 6th wire.<\/li>\n<li>If there are exactly 8 white wires, cut the 5th wire.<\/li>\n<li>If there are exactly 11 crepe wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 4 ash wires, cut the 7th wire.<\/li>\n<li>If the 3rd wire is orchid, cut the 18th wire.<\/li>\n<li>If there are exactly 5 bubblegum wires, cut the 15th wire.<\/li>\n<li>If the 2nd wire is shortbread, cut the 5th wire.<\/li>\n<li>If there are exactly 6 gold wires, cut the 20th wire.<\/li>\n<li>If there are exactly 19 hickory wires, cut the 10th wire.<\/li>\n<li>If the 15th wire is yellow, cut the 12th wire.<\/li>\n<li>If there are exactly 13 iris wires, cut the 4th wire.<\/li>\n<li>If the 10th wire is daisy, cut the 10th wire.<\/li>\n<li>If the 4th wire is chiffon, cut the 20th wire.<\/li>\n<li>If there are more than 13 hazelnut wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 16 macaroon wires, cut the 6th wire.<\/li>\n<li>If there are more than 14 ivory wires, cut the 6th wire.<\/li>\n<li>If the 11th wire is cotton, cut the 13th wire.<\/li>\n<li>If there are exactly 9 squash wires, cut the 20th wire.<\/li>\n<li>If the 10th wire is cherry, cut the 18th wire.<\/li>\n<li>If there are exactly 2 sandstone wires, cut the 16th wire.<\/li>\n<li>If the 5th wire is arctic, cut the 5th wire.<\/li>\n<li>If there are more than 14 violet wires, cut the 12th wire.<\/li>\n<li>If there are more than 14 orchid wires, cut the 11th wire.<\/li>\n<li>If there are exactly 8 peach wires, cut the 4th wire.<\/li>\n<li>If the 10th wire is navy, cut the 16th wire.<\/li>\n<li>If there are exactly 13 arctic wires, cut the 20th wire.<\/li>\n<li>If there are more than 19 dijon wires, cut the 11th wire.<\/li>\n<li>If there is exactly 1 coral wire, cut the 11th wire.<\/li>\n<li>If there are exactly 16 marigold wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 18 lapis wires, cut the 10th wire.<\/li>\n<li>If there are more than 16 rouge wires, cut the 10th wire.<\/li>\n<li>If there are exactly 2 peach wires, cut the 15th wire.<\/li>\n<li>If there are exactly 6 gold wires, cut the 5th wire.<\/li>\n<li>If there are exactly 9 azure wires, cut the 12th wire.<\/li>\n<li>If there are exactly 18 azure wires, cut the 15th wire.<\/li>\n<li>If there are exactly 16 butter wires, cut the 14th wire.<\/li>\n<li>If there are exactly 17 oyster wires, cut the 13th wire.<\/li>\n<li>If there are more than 16 gold wires, cut the 14th wire.<\/li>\n<li>If there are exactly 5 coffee wires, cut the 13th wire.<\/li>\n<li>If there are exactly 4 eggplant wires, cut the 12th wire.<\/li>\n<li>If the 2nd wire is grape, cut the 17th wire.<\/li>\n<li>If there are exactly 5 crimson wires, cut the 15th wire.<\/li>\n<li>If there are exactly 18 tan wires, cut the 12th wire.<\/li>\n<li>If there are exactly 8 bubblegum wires, cut the 11th wire.<\/li>\n<li>If there are exactly 13 rose wires, cut the 9th wire.<\/li>\n<li>If there are exactly 5 white wires, cut the 16th wire.<\/li>\n<li>If the 5th wire is watermelon, cut the 20th wire.<\/li>\n<li>If there are exactly 9 violet wires, cut the 7th wire.<\/li>\n<li>If the 17th wire is pink, cut the 7th wire.<\/li>\n<li>If there are more than 10 lapis wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 19 watermelon wires, cut the 7th wire.<\/li>\n<li>If the 14th wire is green, cut the 11th wire.<\/li>\n<li>If the 5th wire is blush, cut the 18th wire.<\/li>\n<li>If there are exactly 4 sandstone wires, cut the 12th wire.<\/li>\n<li>If the 8th wire is charcoal, cut the 16th wire.<\/li>\n<li>If the 13th wire is crepe, cut the 3rd wire.<\/li>\n<li>If there are exactly 18 bronze wires, cut the 10th wire.<\/li>\n<li>If there are exactly 16 fawn wires, cut the 5th wire.<\/li>\n<li>If there are exactly 12 candy wires, cut the 15th wire.<\/li>\n<li>If there are exactly 11 jade wires, cut the 13th wire.<\/li>\n<li>If there are exactly 13 chiffon wires, cut the 20th wire.<\/li>\n<li>If there are exactly 7 sage wires, cut the 6th wire.<\/li>\n<li>If the 18th wire is green, cut the 1st wire.<\/li>\n<li>If the 10th wire is charcoal, cut the 4th wire.<\/li>\n<li>If the 9th wire is honey, cut the 9th wire.<\/li>\n<li>If there are exactly 12 blood wires, cut the 12th wire.<\/li>\n<li>If the 1st wire is banana, cut the 8th wire.<\/li>\n<li>If there are exactly 5 teal wires, cut the 7th wire.<\/li>\n<li>If there are exactly 10 orange wires, cut the 15th wire.<\/li>\n<li>If there are exactly 17 blush wires, cut the 5th wire.<\/li>\n<li>If there are exactly 9 lapis wires, cut the 15th wire.<\/li>\n<li>If there are more than 19 pear wires, cut the 10th wire.<\/li>\n<li>If the 7th wire is pear, cut the 20th wire.<\/li>\n<li>If the 18th wire is blush, cut the 2nd wire.<\/li>\n<li>If the 16th wire is chiffon, cut the 19th wire.<\/li>\n<li>If the 17th wire is orchid, cut the 4th wire.<\/li>\n<li>If there are exactly 17 pink wires, cut the 17th wire.<\/li>\n<li>If the 6th wire is blood, cut the 9th wire.<\/li>\n<li>If the 19th wire is grape, cut the 19th wire.<\/li>\n<li>If the 9th wire is cherry, cut the 18th wire.<\/li>\n<li>If there are exactly 4 basil wires, cut the 4th wire.<\/li>\n<li>If there are more than 10 violet wires, cut the 15th wire.<\/li>\n<li>If there are exactly 14 rosewood wires, cut the 4th wire.<\/li>\n<li>If there are exactly 4 arctic wires, cut the 11th wire.<\/li>\n<li>If the 8th wire is honey, cut the 18th wire.<\/li>\n<li>If there are exactly 12 flint wires, cut the 14th wire.<\/li>\n<li>If there are exactly 3 violet wires, cut the 13th wire.<\/li>\n<li>If there are exactly 2 jade wires, cut the 5th wire.<\/li>\n<li>If there are more than 15 shamrock wires, cut the 5th wire.<\/li>\n<li>If the 7th wire is cotton, cut the 14th wire.<\/li>\n<li>If there are exactly 2 rosewood wires, cut the 4th wire.<\/li>\n<li>If there are exactly 2 blush wires, cut the 17th wire.<\/li>\n<li>If the 17th wire is hazelnut, cut the 13th wire.<\/li>\n<li>If the 3rd wire is rust, cut the 15th wire.<\/li>\n<li>If there are exactly 5 candy wires, cut the 7th wire.<\/li>\n<li>If there are exactly 15 teal wires, cut the 19th wire.<\/li>\n<li>If there are exactly 5 iris wires, cut the 4th wire.<\/li>\n<li>If the 14th wire is brown, cut the 13th wire.<\/li>\n<li>If the 17th wire is crepe, cut the 15th wire.<\/li>\n<li>If there are exactly 20 coffee wires, cut the 9th wire.<\/li>\n<li>If the 11th wire is candy, cut the 15th wire.<\/li>\n<li>If the 7th wire is scarlet, cut the 9th wire.<\/li>\n<li>If there are exactly 8 coffee wires, cut the 17th wire.<\/li>\n<li>If there are exactly 19 hickory wires, cut the 4th wire.<\/li>\n<li>If there are exactly 18 cloud wires, cut the 17th wire.<\/li>\n<li>If there are more than 17 chocolate wires, cut the 4th wire.<\/li>\n<li>If there are exactly 5 bronze wires, cut the 13th wire.<\/li>\n<li>If the 4th wire is teal, cut the 1st wire.<\/li>\n<li>If there are exactly 20 iris wires, cut the 13th wire.<\/li>\n<li>If the 8th wire is ash, cut the 10th wire.<\/li>\n<li>If there are more than 12 sand wires, cut the 4th wire.<\/li>\n<li>If the 3rd wire is chiffon, cut the 15th wire.<\/li>\n<li>If there are exactly 8 red wires, cut the 18th wire.<\/li>\n<li>If the 18th wire is carrot, cut the 7th wire.<\/li>\n<li>If the 18th wire is stone, cut the 10th wire.<\/li>\n<li>If the 2nd wire is pink, cut the 19th wire.<\/li>\n<li>If there are exactly 15 tiger wires, cut the 7th wire.<\/li>\n<li>If there are more than 16 lime wires, cut the 17th wire.<\/li>\n<li>If there are exactly 20 caramel wires, cut the 19th wire.<\/li>\n<li>If there are exactly 18 violet wires, cut the 4th wire.<\/li>\n<li>If the 1st wire is sage, cut the 16th wire.<\/li>\n<li>If there are more than 8 corn wires, cut the 5th wire.<\/li>\n<li>If the 2nd wire is penny, cut the 19th wire.<\/li>\n<li>If there are exactly 4 teal wires, cut the 10th wire.<\/li>\n<li>If the 2nd wire is iris, cut the 18th wire.<\/li>\n<li>If the 8th wire is iris, cut the 5th wire.<\/li>\n<li>If there are more than 18 sage wires, cut the 1st wire.<\/li>\n<li>If the 12th wire is red, cut the 11th wire.<\/li>\n<li>If the 19th wire is tiger, cut the 8th wire.<\/li>\n<li>If there are exactly 13 sage wires, cut the 19th wire.<\/li>\n<li>If the 6th wire is lime, cut the 4th wire.<\/li>\n<li>If there are exactly 8 flint wires, cut the 20th wire.<\/li>\n<li>If there are exactly 18 ruby wires, cut the 20th wire.<\/li>\n<li>If the 19th wire is corn, cut the 12th wire.<\/li>\n<li>If there are more than 12 honey wires, cut the 12th wire.<\/li>\n<li>If there are exactly 6 watermelon wires, cut the 16th wire.<\/li>\n<li>If the 5th wire is marmalade, cut the 8th wire.<\/li>\n<li>If there are exactly 18 porcelain wires, cut the 13th wire.<\/li>\n<li>If there are exactly 8 pineapple wires, cut the 19th wire.<\/li>\n<li>If there are exactly 17 tiger wires, cut the 10th wire.<\/li>\n<li>If there is exactly 1 azure wire, cut the 6th wire.<\/li>\n<li>If there are exactly 16 teal wires, cut the 17th wire.<\/li>\n<li>If the 7th wire is sky, cut the 20th wire.<\/li>\n<li>If there are exactly 20 hazelnut wires, cut the 16th wire.<\/li>\n<li>If there are exactly 7 magenta wires, cut the 12th wire.<\/li>\n<li>If there are more than 13 crimson wires, cut the 20th wire.<\/li>\n<li>If the 17th wire is green, cut the 3rd wire.<\/li>\n<li>If there are exactly 11 rosewood wires, cut the 1st wire.<\/li>\n<li>If the 10th wire is corn, cut the 15th wire.<\/li>\n<li>If the 19th wire is dijon, cut the 14th wire.<\/li>\n<li>If there are exactly 5 gray wires, cut the 10th wire.<\/li>\n<li>If there are exactly 16 macaroon wires, cut the 16th wire.<\/li>\n<li>If there are exactly 19 bronze wires, cut the 8th wire.<\/li>\n<li>If the 9th wire is pink, cut the 13th wire.<\/li>\n<li>If there are exactly 10 marmalade wires, cut the 1st wire.<\/li>\n<li>If the 8th wire is hazelnut, cut the 4th wire.<\/li>\n<li>If the 19th wire is bronze, cut the 13th wire.<\/li>\n<li>If there are exactly 2 coconut wires, cut the 10th wire.<\/li>\n<li>If the 8th wire is sage, cut the 7th wire.<\/li>\n<li>If there are exactly 16 buttermilk wires, cut the 7th wire.<\/li>\n<li>If the 14th wire is chiffon, cut the 19th wire.<\/li>\n<li>If the 10th wire is brown, cut the 16th wire.<\/li>\n<li>If there are exactly 6 rosewood wires, cut the 8th wire.<\/li>\n<li>If there are more than 17 pear wires, cut the 9th wire.<\/li>\n<li>If there are more than 10 magenta wires, cut the 8th wire.<\/li>\n<li>If there are exactly 12 peach wires, cut the 15th wire.<\/li>\n<li>If there are exactly 2 teal wires, cut the 13th wire.<\/li>\n<li>If the 19th wire is buttermilk, cut the 13th wire.<\/li>\n<li>If the 1st wire is honey, cut the 3rd wire.<\/li>\n<li>If there are exactly 8 granola wires, cut the 19th wire.<\/li>\n<li>If there are exactly 20 teal wires, cut the 6th wire.<\/li>\n<li>If the 15th wire is white, cut the 14th wire.<\/li>\n<li>If there are more than 16 granola wires, cut the 13th wire.<\/li>\n<li>If the 11th wire is pink, cut the 2nd wire.<\/li>\n<li>If there are more than 16 candy wires, cut the 15th wire.<\/li>\n<li>If the 19th wire is apricot, cut the 14th wire.<\/li>\n<li>If there are exactly 19 candy wires, cut the 20th wire.<\/li>\n<li>If there are more than 12 watermelon wires, cut the 1st wire.<\/li>\n<li>If there are exactly 5 honey wires, cut the 11th wire.<\/li>\n<li>If there are exactly 16 shortbread wires, cut the 8th wire.<\/li>\n<li>If there are more than 13 pickle wires, cut the 1st wire.<\/li>\n<li>If there are exactly 9 plum wires, cut the 2nd wire.<\/li>\n<li>If the 1st wire is iris, cut the 8th wire.<\/li>\n<li>If there are exactly 16 coconut wires, cut the 10th wire.<\/li>\n<li>If there are exactly 17 green wires, cut the 19th wire.<\/li>\n<li>If the 11th wire is dijon, cut the 13th wire.<\/li>\n<li>If there are exactly 15 grape wires, cut the 15th wire.<\/li>\n<li>If the 11th wire is orchid, cut the 1st wire.<\/li>\n<li>If there are more than 7 rouge wires, cut the 3rd wire.<\/li>\n<li>If there is exactly 1 seaweed wire, cut the 13th wire.<\/li>\n<li>If there are exactly 16 cotton wires, cut the 16th wire.<\/li>\n<li>If the 16th wire is shortbread, cut the 3rd wire.<\/li>\n<li>If there are exactly 19 black wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 7 marigold wires, cut the 9th wire.<\/li>\n<li>If the 16th wire is granola, cut the 4th wire.<\/li>\n<li>If there are exactly 19 scarlet wires, cut the 12th wire.<\/li>\n<li>If the 5th wire is berry, cut the 9th wire.<\/li>\n<li>If there are exactly 5 sandstone wires, cut the 1st wire.<\/li>\n<li>If the 5th wire is pearl, cut the 16th wire.<\/li>\n<li>If there are exactly 4 candy wires, cut the 10th wire.<\/li>\n<li>If the 2nd wire is coral, cut the 8th wire.<\/li>\n<li>If the 2nd wire is basil, cut the 5th wire.<\/li>\n<li>If the 1st wire is pearl, cut the 5th wire.<\/li>\n<li>If there are exactly 14 arctic wires, cut the 3rd wire.<\/li>\n<li>If the 15th wire is azure, cut the 15th wire.<\/li>\n<li>If there are exactly 7 teal wires, cut the 4th wire.<\/li>\n<li>If the 8th wire is honey, cut the 7th wire.<\/li>\n<li>If there are more than 7 hickory wires, cut the 11th wire.<\/li>\n<li>If there is exactly 1 bone wire, cut the 13th wire.<\/li>\n<li>If there are exactly 16 scarlet wires, cut the 17th wire.<\/li>\n<li>If there are exactly 16 iron wires, cut the 4th wire.<\/li>\n<li>If there are exactly 18 pearl wires, cut the 2nd wire.<\/li>\n<li>If the 20th wire is lead, cut the 18th wire.<\/li>\n<li>If the 20th wire is scarlet, cut the 12th wire.<\/li>\n<li>If there are exactly 19 caramel wires, cut the 16th wire.<\/li>\n<li>If there are exactly 13 macaroon wires, cut the 8th wire.<\/li>\n<li>If there are exactly 2 jade wires, cut the 16th wire.<\/li>\n<li>If there are exactly 9 lead wires, cut the 17th wire.<\/li>\n<li>If there are exactly 18 macaroon wires, cut the 18th wire.<\/li>\n<li>If there are exactly 2 jade wires, cut the 19th wire.<\/li>\n<li>If the 16th wire is banana, cut the 7th wire.<\/li>\n<li>If there are exactly 10 cherry wires, cut the 12th wire.<\/li>\n<li>If there are exactly 14 tiger wires, cut the 4th wire.<\/li>\n<li>If there are exactly 16 sky wires, cut the 20th wire.<\/li>\n<li>If the 8th wire is marigold, cut the 4th wire.<\/li>\n<li>If there are exactly 15 rouge wires, cut the 19th wire.<\/li>\n<li>If there are exactly 6 banana wires, cut the 20th wire.<\/li>\n<li>If there are exactly 20 pear wires, cut the 14th wire.<\/li>\n<li>If there are exactly 8 magenta wires, cut the 13th wire.<\/li>\n<li>If the 16th wire is ivory, cut the 5th wire.<\/li>\n<li>If the 5th wire is iron, cut the 8th wire.<\/li>\n<li>If there are exactly 6 pearl wires, cut the 6th wire.<\/li>\n<li>If there are exactly 18 lime wires, cut the 20th wire.<\/li>\n<li>If the 13th wire is fawn, cut the 16th wire.<\/li>\n<li>If there are exactly 11 charcoal wires, cut the 15th wire.<\/li>\n<li>If the 13th wire is hazelnut, cut the 16th wire.<\/li>\n<li>If there are exactly 7 porcelain wires, cut the 1st wire.<\/li>\n<li>If there are more than 15 purple wires, cut the 11th wire.<\/li>\n<li>If the 10th wire is brown, cut the 9th wire.<\/li>\n<li>If there are exactly 5 sage wires, cut the 8th wire.<\/li>\n<li>If the 2nd wire is jade, cut the 17th wire.<\/li>\n<li>If there is exactly 1 tan wire, cut the 2nd wire.<\/li>\n<li>If the 2nd wire is jade, cut the 5th wire.<\/li>\n<li>If there are exactly 8 rose wires, cut the 5th wire.<\/li>\n<li>If the 18th wire is lead, cut the 7th wire.<\/li>\n<li>If there are exactly 2 charcoal wires, cut the 5th wire.<\/li>\n<li>If the 11th wire is marmalade, cut the 5th wire.<\/li>\n<li>If the 14th wire is crepe, cut the 9th wire.<\/li>\n<li>If the 7th wire is sky, cut the 5th wire.<\/li>\n<li>If the 19th wire is candy, cut the 9th wire.<\/li>\n<li>If there is exactly 1 grape wire, cut the 11th wire.<\/li>\n<li>If there are more than 16 lapis wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 14 crimson wires, cut the 16th wire.<\/li>\n<li>If the 8th wire is yellow, cut the 11th wire.<\/li>\n<li>If there are exactly 5 purple wires, cut the 11th wire.<\/li>\n<li>If there are exactly 16 tiger wires, cut the 11th wire.<\/li>\n<li>If there are exactly 6 tan wires, cut the 19th wire.<\/li>\n<li>If there are more than 15 crimson wires, cut the 18th wire.<\/li>\n<li>If there are exactly 18 wood wires, cut the 6th wire.<\/li>\n<li>If the 8th wire is brown, cut the 20th wire.<\/li>\n<li>If there are exactly 12 penny wires, cut the 2nd wire.<\/li>\n<li>If the 1st wire is grape, cut the 20th wire.<\/li>\n<li>If the 5th wire is silver, cut the 19th wire.<\/li>\n<li>If the 4th wire is caramel, cut the 11th wire.<\/li>\n<li>If there are exactly 2 stone wires, cut the 15th wire.<\/li>\n<li>If there are exactly 7 chocolate wires, cut the 20th wire.<\/li>\n<li>If the 18th wire is blush, cut the 6th wire.<\/li>\n<li>If the 8th wire is teal, cut the 3rd wire.<\/li>\n<li>If there are exactly 15 cobalt wires, cut the 5th wire.<\/li>\n<li>If the 3rd wire is ruby, cut the 15th wire.<\/li>\n<li>If there are exactly 8 gold wires, cut the 18th wire.<\/li>\n<li>If there are exactly 15 orchid wires, cut the 15th wire.<\/li>\n<li>If there is exactly 1 butter wire, cut the 2nd wire.<\/li>\n<li>If there are exactly 17 rouge wires, cut the 12th wire.<\/li>\n<li>If the 20th wire is peach, cut the 20th wire.<\/li>\n<li>If the 10th wire is coconut, cut the 5th wire.<\/li>\n<li>If the 20th wire is emerald, cut the 17th wire.<\/li>\n<li>If there are more than 7 plum wires, cut the 19th wire.<\/li>\n<li>If the 4th wire is penny, cut the 11th wire.<\/li>\n<li>If there is exactly 1 charcoal wire, cut the 19th wire.<\/li>\n<li>If there are exactly 6 coconut wires, cut the 14th wire.<\/li>\n<li>If there are exactly 10 sand wires, cut the 9th wire.<\/li>\n<li>If there are exactly 3 hazelnut wires, cut the 18th wire.<\/li>\n<li>If there are exactly 20 marmalade wires, cut the 18th wire.<\/li>\n<li>If there are more than 7 basil wires, cut the 13th wire.<\/li>\n<li>If there are exactly 11 pink wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 10 honey wires, cut the 7th wire.<\/li>\n<li>If the 12th wire is blood, cut the 19th wire.<\/li>\n<li>If there are exactly 19 amethyst wires, cut the 17th wire.<\/li>\n<li>If there are exactly 4 amethyst wires, cut the 16th wire.<\/li>\n<li>If there is less than 1 red wire, cut the 4th wire.<\/li>\n<li>If there are exactly 7 fern wires, cut the 7th wire.<\/li>\n<li>If there are more than 15 charcoal wires, cut the 1st wire.<\/li>\n<li>If there are exactly 2 cobalt wires, cut the 18th wire.<\/li>\n<li>If there are exactly 12 honey wires, cut the 17th wire.<\/li>\n<li>If there are exactly 5 azure wires, cut the 15th wire.<\/li>\n<li>If the 5th wire is shamrock, cut the 5th wire.<\/li>\n<li>If there are exactly 17 bone wires, cut the 12th wire.<\/li>\n<li>If there are exactly 9 gray wires, cut the 14th wire.<\/li>\n<li>If there are exactly 13 candy wires, cut the 20th wire.<\/li>\n<li>If the 3rd wire is cloud, cut the 6th wire.<\/li>\n<li>If there are exactly 10 cotton wires, cut the 12th wire.<\/li>\n<li>If there are exactly 15 rouge wires, cut the 12th wire.<\/li>\n<li>If there are exactly 5 rust wires, cut the 7th wire.<\/li>\n<li>If the 15th wire is lead, cut the 10th wire.<\/li>\n<li>If there are more than 7 banana wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 19 ash wires, cut the 16th wire.<\/li>\n<li>If there is exactly 1 magenta wire, cut the 20th wire.<\/li>\n<li>If there are exactly 6 fern wires, cut the 7th wire.<\/li>\n<li>If there are exactly 14 tiger wires, cut the 20th wire.<\/li>\n<li>If there are exactly 12 berry wires, cut the 9th wire.<\/li>\n<li>If there are more than 15 jade wires, cut the 5th wire.<\/li>\n<li>If there are exactly 15 pear wires, cut the 10th wire.<\/li>\n<li>If the 6th wire is pear, cut the 8th wire.<\/li>\n<li>If the 17th wire is violet, cut the 15th wire.<\/li>\n<li>If the 2nd wire is pickle, cut the 11th wire.<\/li>\n<li>If there are exactly 15 obsidian wires, cut the 2nd wire.<\/li>\n<li>If the 11th wire is plum, cut the 10th wire.<\/li>\n<li>If the 1st wire is penny, cut the 6th wire.<\/li>\n<li>If the 9th wire is magenta, cut the 2nd wire.<\/li>\n<li>If there are exactly 9 granola wires, cut the 12th wire.<\/li>\n<li>If the 19th wire is carrot, cut the 8th wire.<\/li>\n<li>If the 9th wire is crepe, cut the 7th wire.<\/li>\n<li>If the 7th wire is iron, cut the 6th wire.<\/li>\n<li>If the 15th wire is iron, cut the 19th wire.<\/li>\n<li>If there are exactly 18 wine wires, cut the 4th wire.<\/li>\n<li>If the 7th wire is chocolate, cut the 3rd wire.<\/li>\n<li>If there are exactly 5 peach wires, cut the 8th wire.<\/li>\n<li>If there are exactly 8 sand wires, cut the 16th wire.<\/li>\n<li>If there are exactly 20 wood wires, cut the 20th wire.<\/li>\n<li>If the 10th wire is tortilla, cut the 10th wire.<\/li>\n<li>If the 4th wire is ivory, cut the 2nd wire.<\/li>\n<li>If the 7th wire is gray, cut the 13th wire.<\/li>\n<li>If the 15th wire is buttermilk, cut the 18th wire.<\/li>\n<li>If there are exactly 11 orchid wires, cut the 1st wire.<\/li>\n<li>If there are exactly 5 shamrock wires, cut the 5th wire.<\/li>\n<li>If the 12th wire is frost, cut the 18th wire.<\/li>\n<li>If there are exactly 12 orange wires, cut the 10th wire.<\/li>\n<li>If there are exactly 15 purple wires, cut the 12th wire.<\/li>\n<li>If there are exactly 8 fern wires, cut the 20th wire.<\/li>\n<li>If the 15th wire is white, cut the 12th wire.<\/li>\n<li>If there are exactly 15 bone wires, cut the 15th wire.<\/li>\n<li>If the 10th wire is apricot, cut the 19th wire.<\/li>\n<li>If there are exactly 7 stone wires, cut the 4th wire.<\/li>\n<li>If the 15th wire is shamrock, cut the 12th wire.<\/li>\n<li>If there are exactly 12 crepe wires, cut the 18th wire.<\/li>\n<li>If there are exactly 15 red wires, cut the 1st wire.<\/li>\n<li>If there are exactly 13 sky wires, cut the 7th wire.<\/li>\n<li>If there are exactly 9 pineapple wires, cut the 12th wire.<\/li>\n<li>If there are exactly 17 cherry wires, cut the 2nd wire.<\/li>\n<li>If there are more than 14 brown wires, cut the 16th wire.<\/li>\n<li>If the 1st wire is peach, cut the 2nd wire.<\/li>\n<li>If there are exactly 13 coconut wires, cut the 19th wire.<\/li>\n<li>If there is exactly 1 carrot wire, cut the 20th wire.<\/li>\n<li>If the 5th wire is blood, cut the 18th wire.<\/li>\n<li>If there are exactly 4 charcoal wires, cut the 12th wire.<\/li>\n<li>If there are exactly 19 blood wires, cut the 11th wire.<\/li>\n<li>If the 19th wire is blue, cut the 15th wire.<\/li>\n<li>If there are exactly 18 granola wires, cut the 15th wire.<\/li>\n<li>If there are exactly 19 pickle wires, cut the 1st wire.<\/li>\n<li>If there are exactly 13 plum wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 9 granola wires, cut the 6th wire.<\/li>\n<li>If there are exactly 19 black wires, cut the 19th wire.<\/li>\n<li>If there are exactly 14 coconut wires, cut the 18th wire.<\/li>\n<li>If there are exactly 12 ruby wires, cut the 7th wire.<\/li>\n<li>If there are exactly 20 azure wires, cut the 7th wire.<\/li>\n<li>If there are exactly 15 sage wires, cut the 3rd wire.<\/li>\n<li>If the 12th wire is pickle, cut the 1st wire.<\/li>\n<li>If there are exactly 4 lead wires, cut the 19th wire.<\/li>\n<li>If there are exactly 17 azure wires, cut the 7th wire.<\/li>\n<li>If the 10th wire is sky, cut the 7th wire.<\/li>\n<li>If there are exactly 9 teal wires, cut the 9th wire.<\/li>\n<li>If there are exactly 8 pickle wires, cut the 9th wire.<\/li>\n<li>If there are exactly 7 rosewood wires, cut the 15th wire.<\/li>\n<li>If there are exactly 6 shortbread wires, cut the 8th wire.<\/li>\n<li>If the 18th wire is brown, cut the 16th wire.<\/li>\n<li>If there are exactly 13 seaweed wires, cut the 16th wire.<\/li>\n<li>If there are exactly 15 bronze wires, cut the 12th wire.<\/li>\n<li>If the 7th wire is bubblegum, cut the 20th wire.<\/li>\n<li>If there are exactly 13 butter wires, cut the 15th wire.<\/li>\n<li>If there are exactly 2 oyster wires, cut the 14th wire.<\/li>\n<li>If there are more than 19 shamrock wires, cut the 12th wire.<\/li>\n<li>If the 11th wire is apricot, cut the 7th wire.<\/li>\n<li>If the 19th wire is pearl, cut the 10th wire.<\/li>\n<li>If the 8th wire is iris, cut the 6th wire.<\/li>\n<li>If the 17th wire is shortbread, cut the 2nd wire.<\/li>\n<li>If the 8th wire is lapis, cut the 14th wire.<\/li>\n<li>If there are exactly 19 emerald wires, cut the 18th wire.<\/li>\n<li>If the 2nd wire is sandstone, cut the 14th wire.<\/li>\n<li>If there are exactly 18 rosewood wires, cut the 6th wire.<\/li>\n<li>If the 12th wire is berry, cut the 13th wire.<\/li>\n<li>If the 14th wire is pear, cut the 2nd wire.<\/li>\n<li>If the 10th wire is corn, cut the 4th wire.<\/li>\n<li>If the 11th wire is pickle, cut the 3rd wire.<\/li>\n<li>If there are exactly 9 navy wires, cut the 10th wire.<\/li>\n<li>If there are exactly 2 chiffon wires, cut the 8th wire.<\/li>\n<li>If the 16th wire is hazelnut, cut the 8th wire.<\/li>\n<li>If there are exactly 19 penny wires, cut the 12th wire.<\/li>\n<li>If the 11th wire is obsidian, cut the 15th wire.<\/li>\n<li>If there are exactly 19 red wires, cut the 7th wire.<\/li>\n<li>If there is exactly 1 cherry wire, cut the 16th wire.<\/li>\n<li>If there are exactly 8 bone wires, cut the 20th wire.<\/li>\n<li>If the 6th wire is watermelon, cut the 9th wire.<\/li>\n<li>If the 10th wire is cobalt, cut the 9th wire.<\/li>\n<li>If there are exactly 5 flint wires, cut the 4th wire.<\/li>\n<li>If the 9th wire is coconut, cut the 2nd wire.<\/li>\n<li>If the 7th wire is iron, cut the 14th wire.<\/li>\n<li>If the 14th wire is coral, cut the 8th wire.<\/li>\n<li>If there are exactly 19 silver wires, cut the 20th wire.<\/li>\n<li>If the 20th wire is rust, cut the 5th wire.<\/li>\n<li>If there are exactly 18 emerald wires, cut the 14th wire.<\/li>\n<li>If there are exactly 2 latte wires, cut the 2nd wire.<\/li>\n<li>If the 19th wire is tan, cut the 11th wire.<\/li>\n<li>If the 9th wire is basil, cut the 17th wire.<\/li>\n<li>If there are exactly 12 red wires, cut the 5th wire.<\/li>\n<li>If there are more than 15 plum wires, cut the 18th wire.<\/li>\n<li>If the 19th wire is chiffon, cut the 15th wire.<\/li>\n<li>If there are exactly 18 tiger wires, cut the 8th wire.<\/li>\n<li>If there are exactly 15 sky wires, cut the 5th wire.<\/li>\n<li>If there are exactly 20 gray wires, cut the 12th wire.<\/li>\n<li>If the 12th wire is penny, cut the 11th wire.<\/li>\n<li>If there are exactly 20 carrot wires, cut the 18th wire.<\/li>\n<li>If there are exactly 5 shortbread wires, cut the 19th wire.<\/li>\n<li>If there are exactly 4 rouge wires, cut the 6th wire.<\/li>\n<li>If there are exactly 10 rust wires, cut the 14th wire.<\/li>\n<li>If there are exactly 2 iris wires, cut the 15th wire.<\/li>\n<li>If there are exactly 12 arctic wires, cut the 15th wire.<\/li>\n<li>If there are exactly 8 berry wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 2 iris wires, cut the 14th wire.<\/li>\n<li>If there is exactly 1 cloud wire, cut the 5th wire.<\/li>\n<li>If the 10th wire is eggplant, cut the 16th wire.<\/li>\n<li>If the 18th wire is hickory, cut the 10th wire.<\/li>\n<li>If the 1st wire is crepe, cut the 20th wire.<\/li>\n<li>If there are more than 16 green wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 17 blood wires, cut the 19th wire.<\/li>\n<li>If there are exactly 7 lime wires, cut the 18th wire.<\/li>\n<li>If there are exactly 16 bone wires, cut the 8th wire.<\/li>\n<li>If there are more than 16 ivory wires, cut the 9th wire.<\/li>\n<li>If there are more than 7 ash wires, cut the 19th wire.<\/li>\n<li>If there are exactly 19 watermelon wires, cut the 9th wire.<\/li>\n<li>If there are more than 13 silver wires, cut the 7th wire.<\/li>\n<li>If the 1st wire is navy, cut the 18th wire.<\/li>\n<li>If the 4th wire is coral, cut the 10th wire.<\/li>\n<li>If the 12th wire is eggplant, cut the 11th wire.<\/li>\n<li>If there are exactly 5 apricot wires, cut the 20th wire.<\/li>\n<li>If there are more than 14 gray wires, cut the 9th wire.<\/li>\n<li>If the 15th wire is tortilla, cut the 8th wire.<\/li>\n<li>If there are exactly 3 pear wires, cut the 14th wire.<\/li>\n<li>If there are exactly 3 chiffon wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 11 watermelon wires, cut the 13th wire.<\/li>\n<li>If the 10th wire is crimson, cut the 13th wire.<\/li>\n<li>If there are exactly 12 fawn wires, cut the 5th wire.<\/li>\n<li>If there are more than 15 violet wires, cut the 9th wire.<\/li>\n<li>If there are exactly 6 arctic wires, cut the 9th wire.<\/li>\n<li>If the 7th wire is shamrock, cut the 4th wire.<\/li>\n<li>If there are exactly 18 watermelon wires, cut the 18th wire.<\/li>\n<li>If there are exactly 18 teal wires, cut the 18th wire.<\/li>\n<li>If there are exactly 17 watermelon wires, cut the 9th wire.<\/li>\n<li>If there are more than 13 rust wires, cut the 7th wire.<\/li>\n<li>If there is exactly 1 oyster wire, cut the 4th wire.<\/li>\n<li>If there are exactly 4 oyster wires, cut the 19th wire.<\/li>\n<li>If there are exactly 13 fern wires, cut the 8th wire.<\/li>\n<li>If the 11th wire is magenta, cut the 10th wire.<\/li>\n<li>If there are exactly 11 pineapple wires, cut the 7th wire.<\/li>\n<li>If there are exactly 16 scarlet wires, cut the 18th wire.<\/li>\n<li>If the 20th wire is sky, cut the 6th wire.<\/li>\n<li>If there are exactly 4 lapis wires, cut the 13th wire.<\/li>\n<li>If the 3rd wire is arctic, cut the 3rd wire.<\/li>\n<li>If the 8th wire is blue, cut the 1st wire.<\/li>\n<li>If the 16th wire is pear, cut the 11th wire.<\/li>\n<li>If there are exactly 4 charcoal wires, cut the 13th wire.<\/li>\n<li>If there are exactly 9 stone wires, cut the 18th wire.<\/li>\n<li>If there are exactly 10 ruby wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 17 peach wires, cut the 17th wire.<\/li>\n<li>If the 12th wire is stone, cut the 9th wire.<\/li>\n<li>If there are exactly 3 silver wires, cut the 16th wire.<\/li>\n<li>If the 3rd wire is azure, cut the 20th wire.<\/li>\n<li>If there are exactly 15 caramel wires, cut the 13th wire.<\/li>\n<li>If the 16th wire is dijon, cut the 6th wire.<\/li>\n<li>If there are exactly 3 watermelon wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 7 teal wires, cut the 13th wire.<\/li>\n<li>If the 7th wire is peach, cut the 20th wire.<\/li>\n<li>If the 10th wire is blush, cut the 1st wire.<\/li>\n<li>If there are exactly 13 granola wires, cut the 1st wire.<\/li>\n<li>If the 19th wire is coconut, cut the 1st wire.<\/li>\n<li>If there are exactly 4 gold wires, cut the 1st wire.<\/li>\n<li>If there are more than 15 blue wires, cut the 8th wire.<\/li>\n<li>If there are more than 10 navy wires, cut the 4th wire.<\/li>\n<li>If there are exactly 7 magenta wires, cut the 6th wire.<\/li>\n<li>If there are exactly 10 pink wires, cut the 4th wire.<\/li>\n<li>If there are exactly 12 blush wires, cut the 5th wire.<\/li>\n<li>If there are exactly 13 azure wires, cut the 2nd wire.<\/li>\n<li>If the 16th wire is cobalt, cut the 20th wire.<\/li>\n<li>If the 17th wire is jade, cut the 17th wire.<\/li>\n<li>If the 19th wire is bone, cut the 19th wire.<\/li>\n<li>If there are exactly 6 gold wires, cut the 11th wire.<\/li>\n<li>If the 18th wire is granola, cut the 12th wire.<\/li>\n<li>If there are exactly 7 butter wires, cut the 9th wire.<\/li>\n<li>If the 13th wire is stone, cut the 16th wire.<\/li>\n<li>If the 11th wire is green, cut the 11th wire.<\/li>\n<li>If there are exactly 9 emerald wires, cut the 11th wire.<\/li>\n<li>If there are exactly 3 basil wires, cut the 8th wire.<\/li>\n<li>If the 16th wire is ruby, cut the 9th wire.<\/li>\n<li>If the 18th wire is white, cut the 7th wire.<\/li>\n<li>If the 14th wire is seaweed, cut the 2nd wire.<\/li>\n<li>If there is exactly 1 cobalt wire, cut the 7th wire.<\/li>\n<li>If there are exactly 17 sky wires, cut the 17th wire.<\/li>\n<li>If there are more than 15 bubblegum wires, cut the 3rd wire.<\/li>\n<li>If the 13th wire is arctic, cut the 3rd wire.<\/li>\n<li>If the 19th wire is pear, cut the 17th wire.<\/li>\n<li>If there are exactly 12 cherry wires, cut the 5th wire.<\/li>\n<li>If the 10th wire is hazelnut, cut the 9th wire.<\/li>\n<li>If the 9th wire is tortilla, cut the 10th wire.<\/li>\n<li>If the 12th wire is pineapple, cut the 15th wire.<\/li>\n<li>If there are exactly 4 frost wires, cut the 19th wire.<\/li>\n<li>If there are exactly 20 shortbread wires, cut the 17th wire.<\/li>\n<li>If there are more than 9 bronze wires, cut the 11th wire.<\/li>\n<li>If the 9th wire is ivory, cut the 13th wire.<\/li>\n<li>If the 8th wire is pearl, cut the 7th wire.<\/li>\n<li>If the 13th wire is scarlet, cut the 11th wire.<\/li>\n<li>If there are exactly 7 cotton wires, cut the 12th wire.<\/li>\n<li>If the 3rd wire is seaweed, cut the 6th wire.<\/li>\n<li>If the 20th wire is iron, cut the 9th wire.<\/li>\n<li>If there are exactly 7 banana wires, cut the 1st wire.<\/li>\n<li>If the 19th wire is berry, cut the 14th wire.<\/li>\n<li>If there is exactly 1 teal wire, cut the 1st wire.<\/li>\n<li>If the 5th wire is coral, cut the 5th wire.<\/li>\n<li>If there are exactly 4 cotton wires, cut the 13th wire.<\/li>\n<li>If there are exactly 9 stone wires, cut the 5th wire.<\/li>\n<li>If there are exactly 3 teal wires, cut the 1st wire.<\/li>\n<li>If there is exactly 1 crimson wire, cut the 15th wire.<\/li>\n<li>If the 8th wire is grape, cut the 5th wire.<\/li>\n<li>If the 6th wire is hickory, cut the 14th wire.<\/li>\n<li>If there are exactly 18 corn wires, cut the 14th wire.<\/li>\n<li>If there are more than 14 wine wires, cut the 6th wire.<\/li>\n<li>If there are exactly 2 cotton wires, cut the 3rd wire.<\/li>\n<li>If the 4th wire is iris, cut the 10th wire.<\/li>\n<li>If there are exactly 5 coconut wires, cut the 20th wire.<\/li>\n<li>If there are exactly 2 honey wires, cut the 10th wire.<\/li>\n<li>If there are exactly 2 granola wires, cut the 3rd wire.<\/li>\n<li>If the 3rd wire is jade, cut the 7th wire.<\/li>\n<li>If there are exactly 4 sky wires, cut the 6th wire.<\/li>\n<li>If the 1st wire is caramel, cut the 4th wire.<\/li>\n<li>If the 19th wire is coral, cut the 9th wire.<\/li>\n<li>If there are exactly 8 latte wires, cut the 9th wire.<\/li>\n<li>If there are exactly 7 azure wires, cut the 19th wire.<\/li>\n<li>If the 5th wire is yellow, cut the 15th wire.<\/li>\n<li>If there are more than 15 pineapple wires, cut the 17th wire.<\/li>\n<li>If the 1st wire is navy, cut the 1st wire.<\/li>\n<li>If there are exactly 10 peach wires, cut the 1st wire.<\/li>\n<li>If the 1st wire is coconut, cut the 14th wire.<\/li>\n<li>If the 13th wire is apricot, cut the 16th wire.<\/li>\n<li>If there are exactly 12 black wires, cut the 6th wire.<\/li>\n<li>If there are exactly 12 azure wires, cut the 17th wire.<\/li>\n<li>If there are exactly 11 azure wires, cut the 9th wire.<\/li>\n<li>If there are exactly 8 ash wires, cut the 20th wire.<\/li>\n<li>If there are exactly 19 orchid wires, cut the 5th wire.<\/li>\n<li>If there are exactly 6 lapis wires, cut the 4th wire.<\/li>\n<li>If the 7th wire is penny, cut the 2nd wire.<\/li>\n<li>If there are exactly 20 apricot wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 6 latte wires, cut the 16th wire.<\/li>\n<li>If there are more than 14 butter wires, cut the 6th wire.<\/li>\n<li>If there are exactly 20 sky wires, cut the 3rd wire.<\/li>\n<li>If the 3rd wire is seaweed, cut the 12th wire.<\/li>\n<li>If the 6th wire is magenta, cut the 4th wire.<\/li>\n<li>If there are exactly 13 apricot wires, cut the 19th wire.<\/li>\n<li>If there are more than 9 lead wires, cut the 6th wire.<\/li>\n<li>If there are exactly 19 green wires, cut the 5th wire.<\/li>\n<li>If there are exactly 7 tan wires, cut the 15th wire.<\/li>\n<li>If the 12th wire is silver, cut the 8th wire.<\/li>\n<li>If the 3rd wire is penny, cut the 2nd wire.<\/li>\n<li>If the 20th wire is porcelain, cut the 18th wire.<\/li>\n<li>If the 16th wire is chocolate, cut the 19th wire.<\/li>\n<li>If the 10th wire is fawn, cut the 7th wire.<\/li>\n<li>If there are exactly 14 marmalade wires, cut the 20th wire.<\/li>\n<li>If the 14th wire is cotton, cut the 6th wire.<\/li>\n<li>If the 11th wire is emerald, cut the 13th wire.<\/li>\n<li>If there are exactly 9 tan wires, cut the 14th wire.<\/li>\n<li>If the 16th wire is white, cut the 11th wire.<\/li>\n<li>If there are exactly 19 fawn wires, cut the 15th wire.<\/li>\n<li>If there are exactly 3 butter wires, cut the 19th wire.<\/li>\n<li>If there are exactly 13 squash wires, cut the 11th wire.<\/li>\n<li>If there are exactly 6 carrot wires, cut the 18th wire.<\/li>\n<li>If there are exactly 17 ruby wires, cut the 5th wire.<\/li>\n<li>If there are exactly 15 caramel wires, cut the 19th wire.<\/li>\n<li>If the 19th wire is pineapple, cut the 2nd wire.<\/li>\n<li>If there are exactly 2 marmalade wires, cut the 2nd wire.<\/li>\n<li>If the 12th wire is marigold, cut the 16th wire.<\/li>\n<li>If there are exactly 17 sage wires, cut the 18th wire.<\/li>\n<li>If there are exactly 13 grape wires, cut the 17th wire.<\/li>\n<li>If there is exactly 1 granola wire, cut the 6th wire.<\/li>\n<li>If there are exactly 19 teal wires, cut the 10th wire.<\/li>\n<li>If the 18th wire is purple, cut the 10th wire.<\/li>\n<li>If there are exactly 4 sandstone wires, cut the 20th wire.<\/li>\n<li>If the 3rd wire is penny, cut the 10th wire.<\/li>\n<li>If there are exactly 5 orange wires, cut the 19th wire.<\/li>\n<li>If there are exactly 10 coral wires, cut the 19th wire.<\/li>\n<li>If there are more than 16 sandstone wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 10 purple wires, cut the 17th wire.<\/li>\n<li>If there are more than 14 lime wires, cut the 7th wire.<\/li>\n<li>If there are exactly 6 lime wires, cut the 19th wire.<\/li>\n<li>If there are exactly 5 shamrock wires, cut the 13th wire.<\/li>\n<li>If there are exactly 13 blood wires, cut the 8th wire.<\/li>\n<li>If there are more than 18 granola wires, cut the 19th wire.<\/li>\n<li>If there are exactly 7 blood wires, cut the 16th wire.<\/li>\n<li>If there are more than 12 banana wires, cut the 9th wire.<\/li>\n<li>If the 8th wire is jade, cut the 12th wire.<\/li>\n<li>If there are exactly 7 cherry wires, cut the 15th wire.<\/li>\n<li>If there are exactly 18 flint wires, cut the 1st wire.<\/li>\n<li>If the 5th wire is cherry, cut the 9th wire.<\/li>\n<li>If there are more than 17 lemon wires, cut the 4th wire.<\/li>\n<li>If there are exactly 5 chocolate wires, cut the 13th wire.<\/li>\n<li>If there are exactly 6 bronze wires, cut the 5th wire.<\/li>\n<li>If there are exactly 18 magenta wires, cut the 4th wire.<\/li>\n<li>If the 9th wire is bronze, cut the 10th wire.<\/li>\n<li>If the 4th wire is brown, cut the 7th wire.<\/li>\n<li>If the 4th wire is watermelon, cut the 7th wire.<\/li>\n<li>If the 17th wire is carrot, cut the 16th wire.<\/li>\n<li>If there are more than 11 berry wires, cut the 19th wire.<\/li>\n<li>If the 15th wire is bone, cut the 4th wire.<\/li>\n<li>If there are exactly 4 coconut wires, cut the 1st wire.<\/li>\n<li>If there are exactly 18 granola wires, cut the 11th wire.<\/li>\n<li>If the 20th wire is pink, cut the 13th wire.<\/li>\n<li>If the 7th wire is flint, cut the 4th wire.<\/li>\n<li>If there are exactly 19 cobalt wires, cut the 16th wire.<\/li>\n<li>If there is exactly 1 berry wire, cut the 2nd wire.<\/li>\n<li>If the 12th wire is ash, cut the 7th wire.<\/li>\n<li>If there are exactly 16 carrot wires, cut the 7th wire.<\/li>\n<li>If the 20th wire is rosewood, cut the 8th wire.<\/li>\n<li>If the 19th wire is butter, cut the 8th wire.<\/li>\n<li>If the 17th wire is granola, cut the 19th wire.<\/li>\n<li>If there are exactly 15 bubblegum wires, cut the 18th wire.<\/li>\n<li>If there are exactly 14 jade wires, cut the 4th wire.<\/li>\n<li>If there are exactly 8 black wires, cut the 12th wire.<\/li>\n<li>If there are exactly 6 silver wires, cut the 9th wire.<\/li>\n<li>If there are exactly 20 hazelnut wires, cut the 12th wire.<\/li>\n<li>If there are exactly 19 wine wires, cut the 11th wire.<\/li>\n<li>If the 12th wire is pink, cut the 5th wire.<\/li>\n<li>If the 5th wire is teal, cut the 7th wire.<\/li>\n<li>If there are exactly 8 chiffon wires, cut the 5th wire.<\/li>\n<li>If there are exactly 8 butter wires, cut the 8th wire.<\/li>\n<li>If there are exactly 8 honey wires, cut the 17th wire.<\/li>\n<li>If the 8th wire is wine, cut the 15th wire.<\/li>\n<li>If there are more than 7 bubblegum wires, cut the 14th wire.<\/li>\n<li>If there are exactly 11 stone wires, cut the 20th wire.<\/li>\n<li>If the 15th wire is ruby, cut the 7th wire.<\/li>\n<li>If there are exactly 6 penny wires, cut the 11th wire.<\/li>\n<li>If there are exactly 15 arctic wires, cut the 6th wire.<\/li>\n<li>If there are exactly 14 hickory wires, cut the 1st wire.<\/li>\n<li>If the 11th wire is arctic, cut the 16th wire.<\/li>\n<li>If there are exactly 3 red wires, cut the 12th wire.<\/li>\n<li>If the 16th wire is pear, cut the 15th wire.<\/li>\n<li>If the 2nd wire is cloud, cut the 14th wire.<\/li>\n<li>If there are exactly 19 rose wires, cut the 10th wire.<\/li>\n<li>If there are exactly 5 marmalade wires, cut the 8th wire.<\/li>\n<li>If there are exactly 18 daisy wires, cut the 1st wire.<\/li>\n<li>If the 9th wire is corn, cut the 13th wire.<\/li>\n<li>If there are exactly 13 pearl wires, cut the 13th wire.<\/li>\n<li>If the 18th wire is obsidian, cut the 20th wire.<\/li>\n<li>If there are exactly 10 silver wires, cut the 17th wire.<\/li>\n<li>If there are exactly 12 shortbread wires, cut the 13th wire.<\/li>\n<li>If the 16th wire is yellow, cut the 9th wire.<\/li>\n<li>If the 2nd wire is charcoal, cut the 18th wire.<\/li>\n<li>If there are exactly 15 ash wires, cut the 8th wire.<\/li>\n<li>If the 3rd wire is shamrock, cut the 8th wire.<\/li>\n<li>If there are exactly 13 sandstone wires, cut the 5th wire.<\/li>\n<li>If there are exactly 8 black wires, cut the 19th wire.<\/li>\n<li>If the 20th wire is wood, cut the 7th wire.<\/li>\n<li>If there are exactly 18 pearl wires, cut the 19th wire.<\/li>\n<li>If there are exactly 20 rouge wires, cut the 1st wire.<\/li>\n<li>If there are exactly 2 bronze wires, cut the 9th wire.<\/li>\n<li>If there are exactly 15 azure wires, cut the 10th wire.<\/li>\n<li>If the 19th wire is candy, cut the 8th wire.<\/li>\n<li>If there are exactly 14 macaroon wires, cut the 16th wire.<\/li>\n<li>If the 20th wire is pear, cut the 10th wire.<\/li>\n<li>If there are exactly 4 coral wires, cut the 8th wire.<\/li>\n<li>If the 19th wire is scarlet, cut the 5th wire.<\/li>\n<li>If there are exactly 19 orchid wires, cut the 15th wire.<\/li>\n<li>If there are exactly 16 plum wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 5 charcoal wires, cut the 12th wire.<\/li>\n<li>If there are exactly 19 latte wires, cut the 12th wire.<\/li>\n<li>If there are exactly 5 wood wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 5 orchid wires, cut the 7th wire.<\/li>\n<li>If the 17th wire is corn, cut the 10th wire.<\/li>\n<li>If there are exactly 14 bone wires, cut the 10th wire.<\/li>\n<li>If there are more than 11 bubblegum wires, cut the 16th wire.<\/li>\n<li>If there are exactly 18 fire wires, cut the 17th wire.<\/li>\n<li>If there are exactly 14 white wires, cut the 1st wire.<\/li>\n<li>If there are exactly 2 cherry wires, cut the 16th wire.<\/li>\n<li>If the 12th wire is cotton, cut the 16th wire.<\/li>\n<li>If the 10th wire is carrot, cut the 17th wire.<\/li>\n<li>If the 14th wire is banana, cut the 8th wire.<\/li>\n<li>If there are exactly 7 fire wires, cut the 8th wire.<\/li>\n<li>If the 2nd wire is blood, cut the 2nd wire.<\/li>\n<li>If the 13th wire is lemon, cut the 3rd wire.<\/li>\n<li>If there are exactly 16 plum wires, cut the 18th wire.<\/li>\n<li>If the 20th wire is cotton, cut the 20th wire.<\/li>\n<li>If there are more than 13 black wires, cut the 6th wire.<\/li>\n<li>If there are exactly 18 shamrock wires, cut the 20th wire.<\/li>\n<li>If there are more than 13 lime wires, cut the 12th wire.<\/li>\n<li>If the 3rd wire is apricot, cut the 17th wire.<\/li>\n<li>If there are exactly 20 magenta wires, cut the 11th wire.<\/li>\n<li>If there are exactly 6 azure wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 11 latte wires, cut the 19th wire.<\/li>\n<li>If the 5th wire is coconut, cut the 20th wire.<\/li>\n<li>If there are exactly 5 ivory wires, cut the 6th wire.<\/li>\n<li>If there are exactly 4 bubblegum wires, cut the 20th wire.<\/li>\n<li>If there are exactly 4 tan wires, cut the 13th wire.<\/li>\n<li>If there are exactly 3 fawn wires, cut the 18th wire.<\/li>\n<li>If there are more than 9 gold wires, cut the 10th wire.<\/li>\n<li>If there are exactly 10 blue wires, cut the 1st wire.<\/li>\n<li>If there are exactly 4 macaroon wires, cut the 1st wire.<\/li>\n<li>If the 7th wire is magenta, cut the 14th wire.<\/li>\n<li>If there are exactly 17 candy wires, cut the 17th wire.<\/li>\n<li>If the 10th wire is daisy, cut the 3rd wire.<\/li>\n<li>If there are exactly 8 chocolate wires, cut the 3rd wire.<\/li>\n<li>If the 16th wire is tan, cut the 12th wire.<\/li>\n<li>If there is exactly 1 tan wire, cut the 3rd wire.<\/li>\n<li>If the 15th wire is bronze, cut the 18th wire.<\/li>\n<li>If there are exactly 18 daisy wires, cut the 5th wire.<\/li>\n<li>If there are exactly 13 hazelnut wires, cut the 12th wire.<\/li>\n<li>If the 12th wire is charcoal, cut the 12th wire.<\/li>\n<li>If there are exactly 16 orchid wires, cut the 9th wire.<\/li>\n<li>If the 10th wire is cotton, cut the 17th wire.<\/li>\n<li>If there are exactly 17 carrot wires, cut the 6th wire.<\/li>\n<li>If there are exactly 13 sky wires, cut the 9th wire.<\/li>\n<li>If the 20th wire is tortilla, cut the 13th wire.<\/li>\n<li>If there are exactly 16 shamrock wires, cut the 3rd wire.<\/li>\n<li>If the 8th wire is lapis, cut the 6th wire.<\/li>\n<li>If the 18th wire is cherry, cut the 10th wire.<\/li>\n<li>If there are exactly 10 wood wires, cut the 1st wire.<\/li>\n<li>If there are exactly 4 hazelnut wires, cut the 5th wire.<\/li>\n<li>If there are exactly 12 tan wires, cut the 9th wire.<\/li>\n<li>If there are exactly 12 corn wires, cut the 8th wire.<\/li>\n<li>If there are exactly 3 iris wires, cut the 20th wire.<\/li>\n<li>If there are exactly 5 jade wires, cut the 3rd wire.<\/li>\n<li>If the 13th wire is plum, cut the 18th wire.<\/li>\n<li>If the 13th wire is brick, cut the 11th wire.<\/li>\n<li>If there are exactly 3 banana wires, cut the 8th wire.<\/li>\n<li>If the 17th wire is cloud, cut the 2nd wire.<\/li>\n<li>If there are exactly 19 coral wires, cut the 13th wire.<\/li>\n<li>If there are exactly 16 plum wires, cut the 15th wire.<\/li>\n<li>If there are more than 8 daisy wires, cut the 19th wire.<\/li>\n<li>If there are exactly 16 rouge wires, cut the 18th wire.<\/li>\n<li>If there are exactly 19 lemon wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 10 red wires, cut the 11th wire.<\/li>\n<li>If there are exactly 6 sky wires, cut the 4th wire.<\/li>\n<li>If there are exactly 8 red wires, cut the 8th wire.<\/li>\n<li>If there are exactly 7 pearl wires, cut the 1st wire.<\/li>\n<li>If the 18th wire is charcoal, cut the 20th wire.<\/li>\n<li>If there are exactly 9 brown wires, cut the 20th wire.<\/li>\n<li>If there are exactly 11 caramel wires, cut the 7th wire.<\/li>\n<li>If the 9th wire is azure, cut the 8th wire.<\/li>\n<li>If there are exactly 16 eggplant wires, cut the 7th wire.<\/li>\n<li>If the 10th wire is oyster, cut the 1st wire.<\/li>\n<li>If there are exactly 6 magenta wires, cut the 10th wire.<\/li>\n<li>If the 18th wire is shamrock, cut the 6th wire.<\/li>\n<li>If there are exactly 13 black wires, cut the 19th wire.<\/li>\n<li>If the 11th wire is fire, cut the 12th wire.<\/li>\n<li>If there are exactly 18 plum wires, cut the 17th wire.<\/li>\n<li>If there are more than 12 charcoal wires, cut the 10th wire.<\/li>\n<li>If there is exactly 1 granola wire, cut the 14th wire.<\/li>\n<li>If the 2nd wire is honey, cut the 20th wire.<\/li>\n<li>If there are exactly 5 stone wires, cut the 9th wire.<\/li>\n<li>If there are more than 7 navy wires, cut the 6th wire.<\/li>\n<li>If the 2nd wire is dijon, cut the 4th wire.<\/li>\n<li>If there are exactly 20 cherry wires, cut the 18th wire.<\/li>\n<li>If there are exactly 17 ash wires, cut the 19th wire.<\/li>\n<li>If there is less than 1 gold wire, cut the 9th wire.<\/li>\n<li>If the 1st wire is pear, cut the 19th wire.<\/li>\n<li>If there are exactly 18 white wires, cut the 9th wire.<\/li>\n<li>If there are more than 19 scarlet wires, cut the 10th wire.<\/li>\n<li>If the 8th wire is porcelain, cut the 18th wire.<\/li>\n<li>If there are exactly 2 yellow wires, cut the 10th wire.<\/li>\n<li>If the 13th wire is emerald, cut the 20th wire.<\/li>\n<li>If the 1st wire is azure, cut the 12th wire.<\/li>\n<li>If the 3rd wire is scarlet, cut the 12th wire.<\/li>\n<li>If there are exactly 9 cobalt wires, cut the 1st wire.<\/li>\n<li>If there are exactly 4 arctic wires, cut the 19th wire.<\/li>\n<li>If there are exactly 17 arctic wires, cut the 13th wire.<\/li>\n<li>If there are exactly 5 wood wires, cut the 19th wire.<\/li>\n<li>If the 19th wire is berry, cut the 1st wire.<\/li>\n<li>If the 1st wire is ash, cut the 1st wire.<\/li>\n<li>If there are exactly 6 sandstone wires, cut the 19th wire.<\/li>\n<li>If there are exactly 14 flint wires, cut the 18th wire.<\/li>\n<li>If there are exactly 14 crimson wires, cut the 19th wire.<\/li>\n<li>If the 6th wire is oyster, cut the 20th wire.<\/li>\n<li>If the 4th wire is emerald, cut the 13th wire.<\/li>\n<li>If there are exactly 13 stone wires, cut the 15th wire.<\/li>\n<li>If there are exactly 7 pear wires, cut the 3rd wire.<\/li>\n<li>If the 1st wire is pickle, cut the 20th wire.<\/li>\n<li>If the 7th wire is lead, cut the 16th wire.<\/li>\n<li>If the 6th wire is wine, cut the 14th wire.<\/li>\n<li>If there are exactly 15 bone wires, cut the 8th wire.<\/li>\n<li>If there are exactly 4 black wires, cut the 17th wire.<\/li>\n<li>If the 3rd wire is arctic, cut the 1st wire.<\/li>\n<li>If the 1st wire is iron, cut the 16th wire.<\/li>\n<li>If the 3rd wire is tan, cut the 15th wire.<\/li>\n<li>If the 8th wire is purple, cut the 3rd wire.<\/li>\n<li>If there are exactly 16 candy wires, cut the 15th wire.<\/li>\n<li>If the 2nd wire is grape, cut the 13th wire.<\/li>\n<li>If there are exactly 9 eggplant wires, cut the 20th wire.<\/li>\n<li>If there are exactly 4 coral wires, cut the 18th wire.<\/li>\n<li>If the 9th wire is seaweed, cut the 2nd wire.<\/li>\n<li>If the 1st wire is squash, cut the 16th wire.<\/li>\n<li>If the 13th wire is apricot, cut the 10th wire.<\/li>\n<li>If the 8th wire is fawn, cut the 17th wire.<\/li>\n<li>If the 15th wire is penny, cut the 15th wire.<\/li>\n<li>If the 3rd wire is rose, cut the 19th wire.<\/li>\n<li>If the 11th wire is tiger, cut the 11th wire.<\/li>\n<li>If there are exactly 3 yellow wires, cut the 19th wire.<\/li>\n<li>If there are exactly 14 rose wires, cut the 6th wire.<\/li>\n<li>If there are exactly 7 honey wires, cut the 13th wire.<\/li>\n<li>If there are exactly 12 blue wires, cut the 19th wire.<\/li>\n<li>If there are more than 11 green wires, cut the 5th wire.<\/li>\n<li>If the 9th wire is shamrock, cut the 20th wire.<\/li>\n<li>If the 10th wire is rosewood, cut the 6th wire.<\/li>\n<li>If there are exactly 6 banana wires, cut the 19th wire.<\/li>\n<li>If the 19th wire is teal, cut the 10th wire.<\/li>\n<li>If the 20th wire is corn, cut the 6th wire.<\/li>\n<li>If there are exactly 10 bronze wires, cut the 19th wire.<\/li>\n<li>If there are exactly 13 pear wires, cut the 12th wire.<\/li>\n<li>If there are exactly 6 white wires, cut the 5th wire.<\/li>\n<li>If the 9th wire is caramel, cut the 18th wire.<\/li>\n<li>If the 18th wire is corn, cut the 13th wire.<\/li>\n<li>If the 19th wire is plum, cut the 18th wire.<\/li>\n<li>If there are more than 16 banana wires, cut the 20th wire.<\/li>\n<li>If the 7th wire is frost, cut the 18th wire.<\/li>\n<li>If there are exactly 5 ash wires, cut the 8th wire.<\/li>\n<li>If there are exactly 4 bronze wires, cut the 2nd wire.<\/li>\n<li>If there are more than 14 cherry wires, cut the 7th wire.<\/li>\n<li>If the 6th wire is cobalt, cut the 14th wire.<\/li>\n<li>If there are exactly 16 obsidian wires, cut the 15th wire.<\/li>\n<li>If the 11th wire is pickle, cut the 14th wire.<\/li>\n<li>If there are exactly 7 blue wires, cut the 7th wire.<\/li>\n<li>If there are exactly 2 ivory wires, cut the 15th wire.<\/li>\n<li>If the 10th wire is red, cut the 6th wire.<\/li>\n<li>If the 4th wire is bubblegum, cut the 13th wire.<\/li>\n<li>If the 5th wire is penny, cut the 13th wire.<\/li>\n<li>If there are exactly 8 macaroon wires, cut the 20th wire.<\/li>\n<li>If there are exactly 10 peach wires, cut the 9th wire.<\/li>\n<li>If there are exactly 3 amethyst wires, cut the 15th wire.<\/li>\n<li>If the 4th wire is seaweed, cut the 3rd wire.<\/li>\n<li>If there are exactly 8 sand wires, cut the 3rd wire.<\/li>\n<li>If the 19th wire is wine, cut the 5th wire.<\/li>\n<li>If there are exactly 3 fern wires, cut the 18th wire.<\/li>\n<li>If there are exactly 19 bubblegum wires, cut the 18th wire.<\/li>\n<li>If the 6th wire is shortbread, cut the 9th wire.<\/li>\n<li>If there are more than 19 coffee wires, cut the 13th wire.<\/li>\n<li>If there are exactly 16 bone wires, cut the 15th wire.<\/li>\n<li>If the 9th wire is pearl, cut the 13th wire.<\/li>\n<li>If there are exactly 8 grape wires, cut the 20th wire.<\/li>\n<li>If the 11th wire is violet, cut the 18th wire.<\/li>\n<li>If there are exactly 4 pineapple wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 20 tan wires, cut the 19th wire.<\/li>\n<li>If the 8th wire is gold, cut the 17th wire.<\/li>\n<li>If the 16th wire is tiger, cut the 11th wire.<\/li>\n<li>If the 13th wire is bone, cut the 17th wire.<\/li>\n<li>If there are exactly 5 squash wires, cut the 19th wire.<\/li>\n<li>If the 12th wire is magenta, cut the 8th wire.<\/li>\n<li>If there are exactly 13 orchid wires, cut the 20th wire.<\/li>\n<li>If the 17th wire is ivory, cut the 11th wire.<\/li>\n<li>If the 16th wire is pear, cut the 5th wire.<\/li>\n<li>If there are exactly 6 basil wires, cut the 2nd wire.<\/li>\n<li>If there are more than 9 charcoal wires, cut the 8th wire.<\/li>\n<li>If the 5th wire is banana, cut the 5th wire.<\/li>\n<li>If the 19th wire is carrot, cut the 1st wire.<\/li>\n<li>If there are exactly 19 crimson wires, cut the 4th wire.<\/li>\n<li>If the 18th wire is marmalade, cut the 17th wire.<\/li>\n<li>If there are exactly 19 iron wires, cut the 5th wire.<\/li>\n<li>If the 9th wire is pink, cut the 20th wire.<\/li>\n<li>If there are exactly 15 cobalt wires, cut the 5th wire.<\/li>\n<li>If there are more than 14 fire wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 13 teal wires, cut the 8th wire.<\/li>\n<li>If the 2nd wire is cherry, cut the 2nd wire.<\/li>\n<li>If the 12th wire is green, cut the 18th wire.<\/li>\n<li>If there are more than 14 white wires, cut the 19th wire.<\/li>\n<li>If there are exactly 18 red wires, cut the 16th wire.<\/li>\n<li>If the 20th wire is rose, cut the 20th wire.<\/li>\n<li>If the 1st wire is rust, cut the 9th wire.<\/li>\n<li>If there are exactly 15 amethyst wires, cut the 11th wire.<\/li>\n<li>If there are exactly 10 coffee wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 3 green wires, cut the 18th wire.<\/li>\n<li>If there are exactly 2 orchid wires, cut the 2nd wire.<\/li>\n<li>If the 3rd wire is violet, cut the 15th wire.<\/li>\n<li>If there are exactly 2 gold wires, cut the 16th wire.<\/li>\n<li>If the 18th wire is ivory, cut the 17th wire.<\/li>\n<li>If there are exactly 15 penny wires, cut the 19th wire.<\/li>\n<li>If the 1st wire is corn, cut the 5th wire.<\/li>\n<li>If there are more than 19 lemon wires, cut the 8th wire.<\/li>\n<li>If there are exactly 9 wood wires, cut the 2nd wire.<\/li>\n<li>If the 1st wire is shortbread, cut the 2nd wire.<\/li>\n<li>If there are exactly 11 seaweed wires, cut the 14th wire.<\/li>\n<li>If the 19th wire is cotton, cut the 9th wire.<\/li>\n<li>If there are exactly 20 fern wires, cut the 20th wire.<\/li>\n<li>If there are exactly 20 charcoal wires, cut the 1st wire.<\/li>\n<li>If there are exactly 15 rose wires, cut the 6th wire.<\/li>\n<li>If the 7th wire is arctic, cut the 15th wire.<\/li>\n<li>If there are exactly 20 obsidian wires, cut the 7th wire.<\/li>\n<li>If the 7th wire is candy, cut the 4th wire.<\/li>\n<li>If there are exactly 20 granola wires, cut the 20th wire.<\/li>\n<li>If there are more than 15 brown wires, cut the 15th wire.<\/li>\n<li>If there are exactly 6 oyster wires, cut the 14th wire.<\/li>\n<li>If the 1st wire is flint, cut the 11th wire.<\/li>\n<li>If there are exactly 13 tan wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 14 granola wires, cut the 16th wire.<\/li>\n<li>If there are exactly 7 squash wires, cut the 13th wire.<\/li>\n<li>If the 8th wire is blood, cut the 3rd wire.<\/li>\n<li>If the 17th wire is dijon, cut the 16th wire.<\/li>\n<li>If the 2nd wire is buttermilk, cut the 6th wire.<\/li>\n<li>If there are more than 16 grape wires, cut the 8th wire.<\/li>\n<li>If there are exactly 18 sand wires, cut the 11th wire.<\/li>\n<li>If there are exactly 2 lemon wires, cut the 17th wire.<\/li>\n<li>If there are exactly 3 rosewood wires, cut the 15th wire.<\/li>\n<li>If the 12th wire is chocolate, cut the 14th wire.<\/li>\n<li>If there are exactly 7 gold wires, cut the 6th wire.<\/li>\n<li>If the 12th wire is bubblegum, cut the 6th wire.<\/li>\n<li>If there are exactly 4 eggplant wires, cut the 7th wire.<\/li>\n<li>If there are exactly 20 crimson wires, cut the 9th wire.<\/li>\n<li>If there are exactly 11 yellow wires, cut the 20th wire.<\/li>\n<li>If there are exactly 13 coconut wires, cut the 15th wire.<\/li>\n<li>If there are more than 18 pickle wires, cut the 19th wire.<\/li>\n<li>If there are exactly 9 ruby wires, cut the 4th wire.<\/li>\n<li>If the 2nd wire is green, cut the 7th wire.<\/li>\n<li>If the 6th wire is candy, cut the 1st wire.<\/li>\n<li>If the 10th wire is bronze, cut the 1st wire.<\/li>\n<li>If there are more than 11 lapis wires, cut the 12th wire.<\/li>\n<li>If there are more than 17 frost wires, cut the 18th wire.<\/li>\n<li>If there are exactly 16 green wires, cut the 13th wire.<\/li>\n<li>If there are exactly 5 crimson wires, cut the 8th wire.<\/li>\n<li>If the 10th wire is bronze, cut the 11th wire.<\/li>\n<li>If there are exactly 12 marmalade wires, cut the 2nd wire.<\/li>\n<li>If there are more than 10 sage wires, cut the 1st wire.<\/li>\n<li>If the 13th wire is watermelon, cut the 17th wire.<\/li>\n<li>If the 5th wire is purple, cut the 16th wire.<\/li>\n<li>If there are exactly 11 cotton wires, cut the 1st wire.<\/li>\n<li>If there are more than 19 ash wires, cut the 19th wire.<\/li>\n<li>If the 20th wire is frost, cut the 3rd wire.<\/li>\n<li>If there are exactly 9 wine wires, cut the 20th wire.<\/li>\n<li>If there are exactly 15 banana wires, cut the 19th wire.<\/li>\n<li>If there are more than 14 violet wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 8 azure wires, cut the 2nd wire.<\/li>\n<li>If the 8th wire is purple, cut the 15th wire.<\/li>\n<li>If the 14th wire is dijon, cut the 13th wire.<\/li>\n<li>If there are exactly 10 ivory wires, cut the 7th wire.<\/li>\n<li>If the 6th wire is rose, cut the 1st wire.<\/li>\n<li>If the 14th wire is apricot, cut the 13th wire.<\/li>\n<li>If there are exactly 14 latte wires, cut the 10th wire.<\/li>\n<li>If there are exactly 3 magenta wires, cut the 7th wire.<\/li>\n<li>If the 3rd wire is stone, cut the 5th wire.<\/li>\n<li>If the 1st wire is orchid, cut the 1st wire.<\/li>\n<li>If the 19th wire is sky, cut the 20th wire.<\/li>\n<li>If there are exactly 19 basil wires, cut the 17th wire.<\/li>\n<li>If there are exactly 10 fire wires, cut the 17th wire.<\/li>\n<li>If the 17th wire is violet, cut the 5th wire.<\/li>\n<li>If the 1st wire is orange, cut the 10th wire.<\/li>\n<li>If there are exactly 7 berry wires, cut the 10th wire.<\/li>\n<li>If there are exactly 8 marigold wires, cut the 19th wire.<\/li>\n<li>If there are exactly 10 lapis wires, cut the 7th wire.<\/li>\n<li>If there are exactly 2 chiffon wires, cut the 18th wire.<\/li>\n<li>If the 13th wire is buttermilk, cut the 20th wire.<\/li>\n<li>If the 5th wire is candy, cut the 5th wire.<\/li>\n<li>If there are exactly 18 coral wires, cut the 20th wire.<\/li>\n<li>If the 6th wire is tan, cut the 20th wire.<\/li>\n<li>If there are exactly 14 pearl wires, cut the 12th wire.<\/li>\n<li>If there is exactly 1 coffee wire, cut the 8th wire.<\/li>\n<li>If there are exactly 5 rose wires, cut the 13th wire.<\/li>\n<li>If the 5th wire is macaroon, cut the 16th wire.<\/li>\n<li>If the 2nd wire is bone, cut the 11th wire.<\/li>\n<li>If the 3rd wire is cobalt, cut the 15th wire.<\/li>\n<li>If there are exactly 12 rouge wires, cut the 13th wire.<\/li>\n<li>If the 20th wire is hickory, cut the 13th wire.<\/li>\n<li>If there is exactly 1 marmalade wire, cut the 10th wire.<\/li>\n<li>If there are exactly 15 latte wires, cut the 20th wire.<\/li>\n<li>If the 9th wire is emerald, cut the 2nd wire.<\/li>\n<li>If the 4th wire is blue, cut the 4th wire.<\/li>\n<li>If there are exactly 19 white wires, cut the 4th wire.<\/li>\n<li>If the 7th wire is obsidian, cut the 3rd wire.<\/li>\n<li>If there are exactly 17 pink wires, cut the 6th wire.<\/li>\n<li>If the 8th wire is coconut, cut the 7th wire.<\/li>\n<li>If the 10th wire is gold, cut the 4th wire.<\/li>\n<li>If the 8th wire is charcoal, cut the 13th wire.<\/li>\n<li>If the 11th wire is crepe, cut the 1st wire.<\/li>\n<li>If there are exactly 5 marmalade wires, cut the 15th wire.<\/li>\n<li>If there are more than 18 grape wires, cut the 9th wire.<\/li>\n<li>If the 10th wire is silver, cut the 11th wire.<\/li>\n<li>If there are exactly 10 ivory wires, cut the 19th wire.<\/li>\n<li>If the 14th wire is sky, cut the 19th wire.<\/li>\n<li>If the 4th wire is pearl, cut the 8th wire.<\/li>\n<li>If there are exactly 12 red wires, cut the 20th wire.<\/li>\n<li>If there are more than 12 jade wires, cut the 6th wire.<\/li>\n<li>If there are exactly 12 gray wires, cut the 18th wire.<\/li>\n<li>If there are exactly 8 chocolate wires, cut the 17th wire.<\/li>\n<li>If there are exactly 15 black wires, cut the 6th wire.<\/li>\n<li>If the 6th wire is emerald, cut the 6th wire.<\/li>\n<li>If the 15th wire is blue, cut the 8th wire.<\/li>\n<li>If the 11th wire is butter, cut the 1st wire.<\/li>\n<li>If there are less than 2 lime wires, cut the 12th wire.<\/li>\n<li>If the 6th wire is sandstone, cut the 7th wire.<\/li>\n<li>If there are exactly 16 arctic wires, cut the 15th wire.<\/li>\n<li>If the 5th wire is lemon, cut the 18th wire.<\/li>\n<li>If the 18th wire is pineapple, cut the 5th wire.<\/li>\n<li>If there are exactly 9 penny wires, cut the 17th wire.<\/li>\n<li>If there are exactly 9 buttermilk wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 20 berry wires, cut the 7th wire.<\/li>\n<li>If there are exactly 9 basil wires, cut the 18th wire.<\/li>\n<li>If the 18th wire is charcoal, cut the 9th wire.<\/li>\n<li>If the 20th wire is azure, cut the 14th wire.<\/li>\n<li>If there are exactly 20 granola wires, cut the 7th wire.<\/li>\n<li>If there are exactly 6 plum wires, cut the 6th wire.<\/li>\n<li>If the 7th wire is bone, cut the 3rd wire.<\/li>\n<li>If there are exactly 6 banana wires, cut the 6th wire.<\/li>\n<li>If there are exactly 13 charcoal wires, cut the 15th wire.<\/li>\n<li>If the 19th wire is tan, cut the 8th wire.<\/li>\n<li>If there are exactly 7 bronze wires, cut the 5th wire.<\/li>\n<li>If the 2nd wire is sand, cut the 20th wire.<\/li>\n<li>If there are exactly 2 oyster wires, cut the 5th wire.<\/li>\n<li>If there are exactly 19 bronze wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 18 seaweed wires, cut the 16th wire.<\/li>\n<li>If there are exactly 5 banana wires, cut the 20th wire.<\/li>\n<li>If the 12th wire is pineapple, cut the 12th wire.<\/li>\n<li>If the 9th wire is charcoal, cut the 3rd wire.<\/li>\n<li>If there are more than 16 orchid wires, cut the 7th wire.<\/li>\n<li>If there are exactly 7 candy wires, cut the 12th wire.<\/li>\n<li>If the 4th wire is rouge, cut the 12th wire.<\/li>\n<li>If there are exactly 3 lime wires, cut the 17th wire.<\/li>\n<li>If there are exactly 8 crepe wires, cut the 1st wire.<\/li>\n<li>If there are exactly 4 scarlet wires, cut the 8th wire.<\/li>\n<li>If there are exactly 14 flint wires, cut the 6th wire.<\/li>\n<li>If there are exactly 3 porcelain wires, cut the 14th wire.<\/li>\n<li>If there are more than 11 coconut wires, cut the 11th wire.<\/li>\n<li>If there are exactly 7 basil wires, cut the 5th wire.<\/li>\n<li>If there are exactly 4 banana wires, cut the 18th wire.<\/li>\n<li>If there are exactly 8 pickle wires, cut the 1st wire.<\/li>\n<li>If the 7th wire is caramel, cut the 18th wire.<\/li>\n<li>If there are more than 9 crimson wires, cut the 16th wire.<\/li>\n<li>If there are exactly 10 ash wires, cut the 14th wire.<\/li>\n<li>If there are more than 16 frost wires, cut the 15th wire.<\/li>\n<li>If the 15th wire is fawn, cut the 19th wire.<\/li>\n<li>If there are exactly 13 scarlet wires, cut the 16th wire.<\/li>\n<li>If the 17th wire is emerald, cut the 18th wire.<\/li>\n<li>If there are exactly 13 candy wires, cut the 5th wire.<\/li>\n<li>If there are more than 10 brown wires, cut the 15th wire.<\/li>\n<li>If there are exactly 11 rouge wires, cut the 10th wire.<\/li>\n<li>If there are exactly 16 latte wires, cut the 14th wire.<\/li>\n<li>If the 3rd wire is flint, cut the 13th wire.<\/li>\n<li>If the 3rd wire is silver, cut the 2nd wire.<\/li>\n<li>If there are more than 16 corn wires, cut the 15th wire.<\/li>\n<li>If the 17th wire is wood, cut the 17th wire.<\/li>\n<li>If there are exactly 9 fern wires, cut the 6th wire.<\/li>\n<li>If the 4th wire is hickory, cut the 4th wire.<\/li>\n<li>If the 12th wire is carrot, cut the 18th wire.<\/li>\n<li>If there are exactly 3 jade wires, cut the 10th wire.<\/li>\n<li>If there are exactly 8 penny wires, cut the 5th wire.<\/li>\n<li>If there are exactly 14 iris wires, cut the 9th wire.<\/li>\n<li>If there are exactly 2 watermelon wires, cut the 13th wire.<\/li>\n<li>If the 14th wire is arctic, cut the 5th wire.<\/li>\n<li>If there are exactly 9 blue wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 7 iris wires, cut the 8th wire.<\/li>\n<li>If the 8th wire is ivory, cut the 4th wire.<\/li>\n<li>If there are exactly 18 coffee wires, cut the 1st wire.<\/li>\n<li>If the 2nd wire is wood, cut the 6th wire.<\/li>\n<li>If there are exactly 14 arctic wires, cut the 15th wire.<\/li>\n<li>If the 5th wire is plum, cut the 8th wire.<\/li>\n<li>If there are exactly 4 brown wires, cut the 20th wire.<\/li>\n<li>If there are exactly 11 rouge wires, cut the 3rd wire.<\/li>\n<li>If there are more than 14 daisy wires, cut the 19th wire.<\/li>\n<li>If the 11th wire is emerald, cut the 17th wire.<\/li>\n<li>If the 5th wire is violet, cut the 1st wire.<\/li>\n<li>If there are exactly 9 brown wires, cut the 3rd wire.<\/li>\n<li>If the 12th wire is ivory, cut the 19th wire.<\/li>\n<li>If the 5th wire is berry, cut the 3rd wire.<\/li>\n<li>If there are more than 10 pickle wires, cut the 4th wire.<\/li>\n<li>If there are exactly 9 rouge wires, cut the 1st wire.<\/li>\n<li>If the 18th wire is amethyst, cut the 5th wire.<\/li>\n<li>If the 8th wire is coffee, cut the 8th wire.<\/li>\n<li>If the 9th wire is fawn, cut the 2nd wire.<\/li>\n<li>If there are exactly 11 obsidian wires, cut the 7th wire.<\/li>\n<li>If there are more than 12 tiger wires, cut the 1st wire.<\/li>\n<li>If there are exactly 3 granola wires, cut the 8th wire.<\/li>\n<li>If there are exactly 12 purple wires, cut the 5th wire.<\/li>\n<li>If there are more than 17 rose wires, cut the 10th wire.<\/li>\n<li>If the 13th wire is lemon, cut the 4th wire.<\/li>\n<li>If the 14th wire is gold, cut the 11th wire.<\/li>\n<li>If the 1st wire is apricot, cut the 17th wire.<\/li>\n<li>If there are exactly 3 black wires, cut the 2nd wire.<\/li>\n<li>If the 15th wire is magenta, cut the 12th wire.<\/li>\n<li>If there is exactly 1 lead wire, cut the 20th wire.<\/li>\n<li>If the 10th wire is sandstone, cut the 16th wire.<\/li>\n<li>If there are exactly 8 blood wires, cut the 11th wire.<\/li>\n<li>If there is exactly 1 frost wire, cut the 11th wire.<\/li>\n<li>If the 5th wire is hickory, cut the 13th wire.<\/li>\n<li>If there are exactly 20 white wires, cut the 20th wire.<\/li>\n<li>If there are more than 14 purple wires, cut the 11th wire.<\/li>\n<li>If there are exactly 5 latte wires, cut the 3rd wire.<\/li>\n<li>If there is exactly 1 iron wire, cut the 8th wire.<\/li>\n<li>If the 2nd wire is cotton, cut the 2nd wire.<\/li>\n<li>If the 17th wire is lapis, cut the 18th wire.<\/li>\n<li>If there are exactly 4 sky wires, cut the 19th wire.<\/li>\n<li>If the 18th wire is jade, cut the 5th wire.<\/li>\n<li>If there are exactly 15 black wires, cut the 4th wire.<\/li>\n<li>If there are exactly 8 rosewood wires, cut the 14th wire.<\/li>\n<li>If the 13th wire is gray, cut the 4th wire.<\/li>\n<li>If the 14th wire is chocolate, cut the 14th wire.<\/li>\n<li>If the 6th wire is silver, cut the 3rd wire.<\/li>\n<li>If there are exactly 10 oyster wires, cut the 1st wire.<\/li>\n<li>If the 20th wire is white, cut the 3rd wire.<\/li>\n<li>If the 20th wire is ivory, cut the 10th wire.<\/li>\n<li>If the 11th wire is stone, cut the 19th wire.<\/li>\n<li>If the 2nd wire is gray, cut the 19th wire.<\/li>\n<li>If there are exactly 2 lead wires, cut the 6th wire.<\/li>\n<li>If the 2nd wire is shortbread, cut the 16th wire.<\/li>\n<li>If there are exactly 16 crepe wires, cut the 4th wire.<\/li>\n<li>If there are exactly 3 buttermilk wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 15 bone wires, cut the 15th wire.<\/li>\n<li>If the 18th wire is apricot, cut the 3rd wire.<\/li>\n<li>If there are exactly 15 peach wires, cut the 15th wire.<\/li>\n<li>If the 15th wire is latte, cut the 20th wire.<\/li>\n<li>If the 2nd wire is arctic, cut the 8th wire.<\/li>\n<li>If there are exactly 17 rust wires, cut the 15th wire.<\/li>\n<li>If the 15th wire is cobalt, cut the 5th wire.<\/li>\n<li>If there are more than 17 pineapple wires, cut the 9th wire.<\/li>\n<li>If the 20th wire is violet, cut the 18th wire.<\/li>\n<li>If there are more than 9 grape wires, cut the 9th wire.<\/li>\n<li>If there are exactly 2 porcelain wires, cut the 10th wire.<\/li>\n<li>If there are exactly 14 crepe wires, cut the 10th wire.<\/li>\n<li>If the 10th wire is butter, cut the 6th wire.<\/li>\n<li>If there are exactly 2 pineapple wires, cut the 19th wire.<\/li>\n<li>If there are exactly 10 teal wires, cut the 11th wire.<\/li>\n<li>If the 18th wire is cloud, cut the 6th wire.<\/li>\n<li>If the 18th wire is cherry, cut the 14th wire.<\/li>\n<li>If there are exactly 11 stone wires, cut the 9th wire.<\/li>\n<li>If there are exactly 15 rust wires, cut the 15th wire.<\/li>\n<li>If the 16th wire is scarlet, cut the 6th wire.<\/li>\n<li>If there are exactly 15 wine wires, cut the 2nd wire.<\/li>\n<li>If there are exactly 13 shamrock wires, cut the 4th wire.<\/li>\n<li>If there are more than 17 daisy wires, cut the 15th wire.<\/li>\n<li>If the 19th wire is shortbread, cut the 10th wire.<\/li>\n<li>If the 7th wire is fern, cut the 12th wire.<\/li>\n<li>If there are exactly 9 teal wires, cut the 6th wire.<\/li>\n<li>If there are exactly 7 coral wires, cut the 16th wire.<\/li>\n<li>If the 9th wire is berry, cut the 18th wire.<\/li>\n<li>If there are more than 10 butter wires, cut the 18th wire.<\/li>\n<li>If the 9th wire is teal, cut the 6th wire.<\/li>\n<li>If there are exactly 9 emerald wires, cut the 6th wire.<\/li>\n<li>If there are exactly 6 cloud wires, cut the 12th wire.<\/li>\n<li>If the 4th wire is caramel, cut the 20th wire.<\/li>\n<li>If the 6th wire is stone, cut the 14th wire.<\/li>\n<li>If there are exactly 18 chocolate wires, cut the 18th wire.<\/li>\n<li>If there are exactly 15 gold wires, cut the 4th wire.<\/li>\n<li>If there are exactly 7 ruby wires, cut the 18th wire.<\/li>\n<li>If there are exactly 6 coconut wires, cut the 1st wire.<\/li>\n<li>If the 7th wire is brown, cut the 16th wire.<\/li>\n<li>If the 16th wire is carrot, cut the 14th wire.<\/li>\n<li>If there are exactly 13 hickory wires, cut the 11th wire.<\/li>\n<li>If there are exactly 11 stone wires, cut the 10th wire.<\/li>\n<li>If the 10th wire is sand, cut the 4th wire.<\/li>\n<li>If the 2nd wire is bronze, cut the 19th wire.<\/li>\n<li>If the 2nd wire is cloud, cut the 2nd wire.<\/li>\n<li>If there are exactly 3 grape wires, cut the 11th wire.<\/li>\n<li>If there are exactly 7 latte wires, cut the 11th wire.<\/li>\n<li>If there are exactly 16 jade wires, cut the 12th wire.<\/li>\n<li>If the 18th wire is black, cut the 9th wire.<\/li>\n<li>If the 20th wire is pear, cut the 6th wire.<\/li>\n<li>If there are more than 8 sandstone wires, cut the 16th wire.<\/li>\n<li>If the 13th wire is yellow, cut the 4th wire.<\/li>\n<li>If there are exactly 20 pickle wires, cut the 3rd wire.<\/li>\n<li>If there are exactly 7 azure wires, cut the 1st wire.<\/li>\n<li>If the 7th wire is banana, cut the 9th wire.<\/li>\n<li>If the 13th wire is rust, cut the 19th wire.<\/li>\n<li>If the 5th wire is purple, cut the 18th wire.<\/li>\n<li>If there are exactly 18 pink wires, cut the 10th wire.<\/li>\n<li>If the 19th wire is pineapple, cut the 1st wire.<\/li>\n<li>If the 18th wire is wine, cut the 17th wire.<\/li>\n<li>If there are more than 8 ruby wires, cut the 13th wire.<\/li>\n<li>If there is exactly 1 pear wire, cut the 9th wire.<\/li>\n<li>If there are exactly 6 gold wires, cut the 13th wire.<\/li>\n<li>If the 19th wire is macaroon, cut the 17th wire.<\/li>\n<li>If the 11th wire is granola, cut the 4th wire.<\/li>\n<li>If there are exactly 19 peach wires, cut the 9th wire.<\/li>\n<li>If the 10th wire is rouge, cut the 1st wire.<\/li>\n<li>If the 7th wire is orchid, cut the 16th wire.<\/li>\n<li>If there are exactly 18 ivory wires, cut the 10th wire.<\/li>\n<li>If there are exactly 17 penny wires, cut the 5th wire.<\/li>\n<li>If the 7th wire is seaweed, cut the 14th wire.<\/li>\n<li>If there are exactly 13 cherry wires, cut the 14th wire.<\/li>\n<li>If the 8th wire is bronze, cut the 5th wire.<\/li>\n<li>If there is exactly 1 green wire, cut the 13th wire.<\/li>\n<li>If there are exactly 17 candy wires, cut the 8th wire.<\/li>\n<li>If the 10th wire is eggplant, cut the 14th wire.<\/li>\n<li>If there are exactly 3 rust wires, cut the 18th wire.<\/li>\n<li>If there is exactly 1 wood wire, cut the 20th wire.<\/li>\n<li>If there are exactly 7 pink wires, cut the 17th wire.<\/li>\n<li>If the 13th wire is cotton, cut the 19th wire.<\/li>\n<li>If there are exactly 15 macaroon wires, cut the 1st wire.<\/li>\n<li>If there are more than 8 blue wires, cut the 8th wire.<\/li>\n<li>If there are exactly 6 iron wires, cut the 4th wire.<\/li>\n<li>If there are exactly 11 navy wires, cut the 12th wire.<\/li>\n<li>If the 19th wire is watermelon, cut the 5th wire.<\/li>\n<li>If there are exactly 17 fire wires, cut the 18th wire.<\/li>\n<li>If there are exactly 2 arctic wires, cut the 1st wire.<\/li>\n<li>If there are exactly 10 fern wires, cut the 20th wire.<\/li>\n<li>If there are more than 16 plum wires, cut the 12th wire.<\/li>\n<li>If there are exactly 3 tiger wires, cut the 13th wire.<\/li>\n<li>If the 1st wire is arctic, cut the 11th wire.<\/li>\n<li>If there are exactly 19 ruby wires, cut the 20th wire.<\/li>\n<li>If there are exactly 10 pearl wires, cut the 4th wire.<\/li>\n<li>If there are exactly 8 corn wires, cut the 13th wire.<\/li>\n<li>If the 4th wire is caramel, cut the 6th wire.<\/li>\n<li>If the 6th wire is cotton, cut the 6th wire.<\/li>\n<li>If there are exactly 2 squash wires, cut the 12th wire.<\/li>\n<li>If the 18th wire is orange, cut the 15th wire.<\/li>\n<li>If there are exactly 12 yellow wires, cut the 3rd wire.<\/li>\n<li>If the 9th wire is coral, cut the 4th wire.<\/li>\n<li>If the 6th wire is squash, cut the 12th wire.<\/li>\n<li>If there are exactly 2 tiger wires, cut the 8th wire.<\/li>\n<li>If there are more than 11 green wires, cut the 17th wire.<\/li>\n<li>If there are more than 9 wood wires, cut the 8th wire.<\/li>\n<li>If there is exactly 1 orange wire, cut the 7th wire.<\/li>\n<li>If there are exactly 17 butter wires, cut the 10th wire.<\/li>\n<li>If there are exactly 6 frost wires, cut the 17th wire.<\/li>\n<li>If there are more than 7 arctic wires, cut the 8th wire.<\/li>\n<li>If there are more than 11 grape wires, cut the 9th wire.<\/li>\n<li>If the 9th wire is latte, cut the 8th wire.<\/li>\n<li>Cut the 1st wire.<\/li>\n<\/ul>\n<p>Credit to <a href=\"https:\/\/keeptalkinggame.com\/\">KTANE<\/a> for this problem idea!<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>PLEASE do not try to code all the instructions by hand. These bombs are well designed... they might get through all <script type=\"math\/tex\">1\\,337<\/script> instructions!<\/p>\n<\/li>\n<li>\n<p>There are two ways to turn the instructions into regular code: Either use regular expressions (find and replace), or write a parser program.<\/p>\n<\/li>\n<li>\n<p>Here is a find and replace regex that turns the final instruction into Python code:<\/p>\n<\/li>\n<\/ol>\n<pre><code class=\"text\">Find:    &quot;Cut the ([0-9]*)[a-z]* wire.&quot;\nReplace: &quot;print('Cut wire \\1')&quot;\n<\/code><\/pre>\n\n<p>Where the \\1 represents capture group 1.<\/p>",
        "bonus": "",
        "version": 2
    },
    "BOMB1": {
        "title": "Episode 1",
        "type": "Beginner",
        "state": "up",
        "maxScore": 100,
        "blurb": "[100]",
        "description": "<p>Listen up, Agent 47. Our officers just found <script type=\"math\/tex\">100<\/script> bombs laying on a table. Apparantly someone clicked a mission on a book, and the bombs just spawned in. Anyways, we need you to help us defuse them.<\/p>\n<p>It looks like there are <script type=\"math\/tex\">3<\/script> wires on each bomb. We'll list the colors to you, one bomb at a time, and you need to tell us which wire to cut. There should be a list of instructions somewhere.<\/p>\n<p>Be quick!<\/p>\n<h4>BOMB 1 (INPUT)<\/h4>\n<pre><code class=\"text\">red\nblue\nwhite\n<\/code><\/pre>\n\n<h4>BOMB 1 (OUTPUT)<\/h4>\n<pre><code class=\"text\">Cut wire 3\n<\/code><\/pre>\n\n<h4>BOMB 2 (INPUT)<\/h4>\n<pre><code class=\"text\">yellow\nyellow\nyellow\n<\/code><\/pre>\n\n<h4>BOMB 2 (OUTPUT)<\/h4>\n<pre><code class=\"text\">Cut wire 2\n<\/code><\/pre>\n\n<p>The rest of the bombs will be hidden until you submit a solution.<\/p>\n<h4>BOMB DEFUSAL MANUAL<\/h4>\n<p>Only the <strong>first<\/strong> correct wire needs to be cut to defuse the bomb (the first instruction that matches). Wire ordering begins with the first on the top. Follow the instructions starting at the top, and working your way down.<\/p>\n<ul>\n<li>If there are exactly 0 red wires, cut the 2nd wire.<\/li>\n<li>If the 3rd wire is white, cut the 3rd wire.<\/li>\n<li>If there is more than 1 blue wire, cut the 1st wire.<\/li>\n<li>Cut the 3rd wire.<\/li>\n<\/ul>\n<p>Credit to <a href=\"https:\/\/keeptalkinggame.com\/\">KTANE<\/a> for this problem idea!<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "",
        "bonus": "",
        "version": 2
    },
    "PRS8": {
        "title": "Reinventing Goggle",
        "type": "Approximate",
        "state": "up",
        "maxScore": 300,
        "blurb": "Searching for points [300]",
        "description": "<p>In this problem, your goal is to create a simplified version of a search engine - the Goggle search engine.<\/p>\n<p>The Goggle search engine has <script type=\"math\/tex\">N<\/script> websites, conveniently numbered <script type=\"math\/tex\">1 \\ldots N<\/script>, stored in its database (<script type=\"math\/tex\">1 \\leq N \\leq 50\\,000<\/script>). Each website has a name consisting of only lowercase letters \/ spaces. In addition, each website has a relevance rating <script type=\"math\/tex\">R_i<\/script> (<script type=\"math\/tex\">1 \\leq R_i \\leq 10^9<\/script>) that measures how useful the website is to users.<\/p>\n<p>\n<script type=\"math\/tex\">Q<\/script> search queries have been sent to the Goggle search engine (<script type=\"math\/tex\">1 \\leq Q \\leq 50\\,000<\/script>). Each query consists of only lowercase letters \/ spaces. In order to provide users with the most accurate search results possible, the search engine should return a website whose name has a <strong>prefix that is equal to the query string<\/strong>. If there are multiple websites with a matching prefix, Goggle should strive to return the most relevant result possible (the one with the highest relevance rating).<\/p>\n<p>For example, if the query is \"hello\", the search engine could return websites like \"hello world\", \"hellooooooo\", and \"hello\". However, websites like \"he\", \"what is hello\", and \"halloween\" do not match the query.<\/p>\n<p>Search engines aren't perfect though... For this problem, your program does not need to always output the best result. Instead, your program will receive <strong>partial credit<\/strong> based on how high of a score it gets.<\/p>\n<p>For each query, if your program outputs a website that does not have a matching prefix, it will get <script type=\"math\/tex\">0<\/script> points for that query. Otherwise, it will get <script type=\"math\/tex\">R_i<\/script> points (the relevance rating for the outputted website). The final score of your code will be the sum of its scores for all the queries.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains a single integer <script type=\"math\/tex\">N<\/script>, the number of websites.<br \/>\nThe second line of input contains <script type=\"math\/tex\">N<\/script> space separated integers. The <script type=\"math\/tex\">i<\/script>th integer is <script type=\"math\/tex\">R_i<\/script>.<br \/>\nThe next <script type=\"math\/tex\">N<\/script> lines of input each contain the name of a website. The <script type=\"math\/tex\">i<\/script>th line gives the name of website <script type=\"math\/tex\">i<\/script>.<\/p>\n<p>The next line of input contains a single integer <script type=\"math\/tex\">Q<\/script>, the number of queries.<br \/>\nThe next <script type=\"math\/tex\">Q<\/script> lines of input each contain a query string. The <script type=\"math\/tex\">i<\/script>th line gives the <script type=\"math\/tex\">i<\/script>th query.<\/p>\n<p>The lengths of the website names and queries will not exceed <script type=\"math\/tex\">20<\/script> characters.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output <script type=\"math\/tex\">Q<\/script> lines, where the <script type=\"math\/tex\">i<\/script>th line gives the number of the website Goggle should return for the <script type=\"math\/tex\">i<\/script>th query. Each of these numbers must be in the range <script type=\"math\/tex\">1...N<\/script>.<\/p>\n<h4>SCORING<\/h4>\n<p>If your program outputs an invalid website number for any queries (or does not answer all <script type=\"math\/tex\">Q<\/script> queries), then it will get a wrong answer verdict.<\/p>\n<p>Otherwise, let <script type=\"math\/tex\">P<\/script> be the # of points your program earns for a test case, and let <script type=\"math\/tex\">O<\/script> be the optimal # of points (if all queries are answered correctly). The score of your program for that test case will be equal to <script type=\"math\/tex\">P\/O<\/script>, rounded to the nearest hundredth.<\/p>\n<p>The time limit is 2 seconds (x1.5 for Java, x2 for Python). The memory limit is 192 MB.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">5\n10 1 8 6 10\nsorting introduction\nhow to get robux\nusaco guide\nusaco contests\nhow to binary search\n4\nhow\nusaco co\nwho did this\nsort\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">5\n4\n5\n1\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>There are <script type=\"math\/tex\">5<\/script> websites indexed by the Goggle search engine. The relevance of each website is listed below.<\/p>\n<p>10 = sorting introduction<br \/>\n1 = how to get free robux<br \/>\n8 = usaco guide<br \/>\n6 = usaco contests<br \/>\n10 = how to binary search<\/p>\n<p>The responses for the <script type=\"math\/tex\">4<\/script> queries given in the sample are shown below.<\/p>\n<p>Query \"how\" -&gt; Response \"how to binary search\", prefix matches, relevance 10<br \/>\nQuery \"usaco co\" -&gt; Response \"usaco contests\", prefix matches, relevance 6<br \/>\nQuery \"who did this\" -&gt; Response \"how to binary search\", prefix does not match, scores 0<br \/>\nQuery \"sort\" -&gt; Response \"sorting introduction\", prefix matches, relevance 10<\/p>\n<p>So, this output would receive <script type=\"math\/tex\">10+6+0+10=26<\/script> points, which is the optimal score for the sample input.<\/p>\n<p>Remember: There are a variety of solutions to this problem that can receive lots of partial credit. Even something as simple as outputting the number 1 for every query will get some credit. <strong>Try to get as many points as possible!<\/strong><\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>Be careful when parsing the input for this problem! Depending on the language you are using, there may be hidden newlines ('\\n') or carriage returns ('\\r') in the strings. If your program seems bugged, try trimming the strings by removing extra spaces and\/or newlines at the end of it - most languages have built-in methods for this.<\/p>\n<\/li>\n<li>\n<p>Trying all possibilities could get some partial credit (about 50%?) for this problem. For something more efficient, sorting and binary searching might be really useful.<\/p>\n<\/li>\n<li>\n<p>Here's a neat trick that might help you earn some more points: Since you know the time limit, you could code some logic that makes the program exit right before hitting the time limit. This way, you can try many more possibilties without running out of time!<\/p>\n<\/li>\n<li>\n<p>If you're going for full credit... I encourage you to trie. \ud83d\ude09<br \/>\nRange queries could help too.<\/p>\n<\/li>\n<\/ol>",
        "bonus": "",
        "version": 2
    },
    "PRA8": {
        "title": "Maze",
        "type": "Advanced",
        "state": "up",
        "maxScore": 100,
        "blurb": "Intro to shortest paths [100]",
        "description": "<p>You are given the layout of a maze, and your task is to determine the length of the shortest path from start to end. You can walk left, right, up and down.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains two integers <script type=\"math\/tex\">N<\/script> and <script type=\"math\/tex\">M<\/script>: The height and width of the layout.<\/p>\n<p>The next <script type=\"math\/tex\">N<\/script> lines of input each contain <script type=\"math\/tex\">M<\/script> characters describing the maze. Each character is either '.' (floor), '#' (wall), 'A' (start), or 'B' (end). There is exactly one A and one B in the input.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output one integer: The length of the shortest path from start to end. If there is no path, output <script type=\"math\/tex\">-1<\/script>.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">1 \\leq N, M \\leq 1{,}000<\/script>\n<\/p>\n<h4>SAMPLE INPUT 1<\/h4>\n<pre><code class=\"text\">5 8\n########\n#.A#...#\n#.##.#B#\n#......#\n########\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 1<\/h4>\n<pre><code class=\"text\">9\n<\/code><\/pre>\n\n<h4>EXPLANATION 1<\/h4>\n<p>The shortest path is marked with '*' characters in the diagram below.<\/p>\n<pre><code class=\"text\">########\n#*A#...#\n#*##.#B#\n#******#\n########\n<\/code><\/pre>\n\n<h4>SAMPLE INPUT 2<\/h4>\n<pre><code class=\"text\">4 4\n....\nB.##\n.#.A\n#...\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 2<\/h4>\n<pre><code class=\"text\">-1\n<\/code><\/pre>\n\n<h4>EXPLANATION 2<\/h4>\n<p>The path cannot go outside of the grid, so there is no path from A to B.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<p><a href=\"https:\/\/www.youtube.com\/watch?v=KiCBXu4P-2Y\" target=\"_blank\">Video - BFS (Breadth First Search) on a grid<\/a><\/p>\n<p><a href=\"https:\/\/towardsdatascience.com\/graph-theory-bfs-shortest-path-problem-on-a-grid-1437d5cb4023\" target=\"_blank\">Article - BFS (Breadth First Search) on a grid<\/a><\/p>",
        "bonus": "",
        "version": 2
    },
    "PRB8": {
        "title": "Archery",
        "type": "Beginner",
        "state": "up",
        "maxScore": 100,
        "blurb": "Preparing for the shootoff [100]",
        "description": "<p>Petra is preparing for her school's annual Archery Shootoff! Today, her practice session will consist of <script type=\"math\/tex\">N<\/script> rounds.<\/p>\n<p>In each round, Petra will shoot an arrow at the target, and depending on how close her shot is to the center, she will receive a score in the range <script type=\"math\/tex\">0...100<\/script> for that round. Petra's final score for the practice session will simply be the sum of her scores for each round.<\/p>\n<p>For example, if <script type=\"math\/tex\">N = 3<\/script>, and Petra's scores for each round are <script type=\"math\/tex\">50<\/script>, <script type=\"math\/tex\">80<\/script>, and <script type=\"math\/tex\">60<\/script>, her final score for that practice session would be <script type=\"math\/tex\">190<\/script>.<\/p>\n<p>After completing her practice session, Petra realizes that she forgot to record her score for some of the rounds! Her score for these forgotten rounds could have been anything from <script type=\"math\/tex\">0<\/script> (missing the target) to <script type=\"math\/tex\">100<\/script> (hitting the bullseye).<\/p>\n<p>Petra knows that she will be biased if she tries to recall these missing scores herself. So, she decides to use a fair method to judge how well she did. Given the scores that Petra recorded (or <script type=\"math\/tex\">-1<\/script> if she forgot her score for a round), please help Petra determine the <strong>minimum and maximum possible scores<\/strong> that she could have gotten during her practice session.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains a single integer <script type=\"math\/tex\">N<\/script>, the number of rounds in Petra's  practice session.<\/p>\n<p>The second line of input contains <script type=\"math\/tex\">N<\/script> space separated integers, where the <script type=\"math\/tex\">i<\/script>th integer represents the score that Petra got in the <script type=\"math\/tex\">i<\/script>th round (or <script type=\"math\/tex\">-1<\/script> if she forgot to record her score for that round).<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>The first line of output should contain a single integer: The minimum possible score.<\/p>\n<p>The second line of output should contain a single integer: The maximum possible score.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">1 \\leq N \\leq 100<\/script>\n<br \/>\n(The number of rounds in Petra's practice session will be in the range <script type=\"math\/tex\">1...100<\/script>.)<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">5\n100 -1 0 -1 85\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">185\n385\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>Petra's practice session consisted of 5 rounds. Her 1st shot got a score of 100, her 3rd got a score of 0, and her 5th got a score of 85. She did not record the score of her 2nd and 4th shots.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>If Petra recorded all of her scores for each round (no <script type=\"math\/tex\">-1<\/script>s), what would the final score for her practice session be? How would you adapt this calculation to the case when Petra forgot to record some of her scores, knowing that the minimum possible score for a round is <script type=\"math\/tex\">0<\/script>, and the maximum possible score for a round is <script type=\"math\/tex\">100<\/script>?<\/li>\n<\/ol>",
        "bonus": "",
        "version": 2
    },
    "PRS7": {
        "title": "Farmer John's Favorite Number",
        "type": "Intermediate",
        "state": "up",
        "maxScore": 100,
        "blurb": "Think inside the boxes [100]",
        "description": "<p>Farmer John has a favorite number. Can you guess it?<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>There is no input for this problem.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output a single integer: Farmer John's favorite number.<\/p>\n<h4>NOTES<\/h4>\n<p>In case the output format is confusing, here's a sample Java program showing how to make your guesses.<\/p>\n<pre><code class=\"java\">public class sol {\n    public static void main(String[] args) {\n        System.out.println(42);\n    }\n}\n<\/code><\/pre>\n\n<p>Farmer John's favorite number is a positive integer in the range <script type=\"math\/tex\">1...420\\,000\\,000<\/script>. If your program outputs anything outside this range, it will not receive any points.<\/p>\n<p>After submitting a solution, you will receive feedback via the results for each test case and the score your program gets. Think of the test cases as a \"black box\" - You give them a number, and they give you 0 or 1 verdicts.<\/p>\n<p>In general, <strong>the closer you are to figuring out the pattern, the higher your score will be<\/strong>. Think inside the boxes... and start guessing! :P<\/p>\n<p>(Feel free to check the hints if you need them.)<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<p>Try the following guesses out (and maybe make some of your own), and see if you can use the results to find out what the pattern is...<\/p>\n<pre><code class=\"text\">15\n133\n16\n2310\n<\/code><\/pre>\n\n<p>Then, find a number that gets full points on the problem - FJ's favorite number!<\/p>",
        "bonus": "",
        "version": 2
    },
    "PRA7": {
        "title": "Statistics",
        "type": "Advanced",
        "state": "up",
        "maxScore": 100,
        "blurb": "Lots of modes [100+20]",
        "description": "<p>(Time limit: 2 seconds, Memory limit: 128 MB)<\/p>\n<p>Lily has come across an array <script type=\"math\/tex\">A<\/script> of <script type=\"math\/tex\">N<\/script> integers in her computer science class. The teacher wants her to do some sort of statistics lab with the array, but Lily comes up with something better. She decides to ask <script type=\"math\/tex\">Q<\/script> queries of the following form: <strong>What is the mode of the subarray from <script type=\"math\/tex\">l_i<\/script> to <script type=\"math\/tex\">r_i<\/script>?<\/strong><\/p>\n<p>A subarray is a contiguous section of the whole array consisting of the elements at indices <script type=\"math\/tex\">l_i \\ldots r_i<\/script>, inclusive. For example, if <script type=\"math\/tex\">A=[5, 5, 7, 8, 9]<\/script>, then the subarray from 2 to 4 would be <script type=\"math\/tex\">[5, 7, 8]<\/script>. The subarray from 4 to 5 would be <script type=\"math\/tex\">[8, 9]<\/script>.<\/p>\n<p>The mode of an array is the most frequent element in the array. For example, the mode of the above array would be <script type=\"math\/tex\">5<\/script>, because it appears twice, while all other elements appear once. For this problem, if the most frequent element is not unique, output \"many\" as the answer to the query (without quotes).<\/p>\n<p>Please help Lily write a program that will answer her queries efficiently.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains <script type=\"math\/tex\">N<\/script> (<script type=\"math\/tex\">1 \\leq N \\leq 3\\,000<\/script>). The next line of input contains <script type=\"math\/tex\">N<\/script> space-separated integers, giving the elements of <script type=\"math\/tex\">A<\/script>. All elements are in the range <script type=\"math\/tex\">1 \\ldots 3\\,000<\/script>.<\/p>\n<p>The next line of input contains <script type=\"math\/tex\">Q<\/script> (<script type=\"math\/tex\">1 \\leq Q \\leq 3\\,000<\/script>). The next <script type=\"math\/tex\">Q<\/script> lines of input each describe a single query, in the form of two integers <script type=\"math\/tex\">l_i<\/script> and <script type=\"math\/tex\">r_i<\/script>. The queries will all be valid (<script type=\"math\/tex\">1 \\leq l_i \\leq r_i \\leq N<\/script>).<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>For each of the <script type=\"math\/tex\">Q<\/script> queries, output a single line with an integer: The mode of the queried subarray. If the mode is not unique, output \"many\" instead, without quotes.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">6\n3 8 5 3 8 3\n3\n1 6\n2 5\n4 5\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">3\n8\nmany\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>The given array is <script type=\"math\/tex\">[3, 8, 5, 3, 8, 3]<\/script>. There are <script type=\"math\/tex\">3<\/script> queries:<\/p>\n<ul>\n<li>Mode in the range <script type=\"math\/tex\">1...6<\/script> = Mode of <script type=\"math\/tex\">[3, 8, 5, 3, 8, 3]<\/script> = 3<\/li>\n<li>Mode in the range <script type=\"math\/tex\">2...5<\/script> = Mode of <script type=\"math\/tex\">[8, 5, 3, 8]<\/script> = 8<\/li>\n<li>Mode in the range <script type=\"math\/tex\">4...5<\/script> = Mode of <script type=\"math\/tex\">[3, 8]<\/script> = many<\/li>\n<\/ul>\n<h4>SCORING<\/h4>\n<ul>\n<li>\n<p>Test cases 2-5 satisfy <script type=\"math\/tex\">Q=1<\/script>, and the one query is for the entire array. This means that you can ignore the queries, and just output the mode of the entire array.<\/p>\n<\/li>\n<li>\n<p>Test cases 6-8 satisfy <script type=\"math\/tex\">Q \\leq 50<\/script>.<\/p>\n<\/li>\n<li>\n<p>Test cases 9-12 satisfy no additional constraints.<\/p>\n<\/li>\n<\/ul>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p><a href=\"https:\/\/stackoverflow.com\/questions\/23946397\/finding-the-mode-of-integers-in-an-array\" target=\"_blank\">Finding the mode of an array<\/a><\/p>\n<\/li>\n<li>\n<p>Making a function to find the mode of a subarray would help a lot with the queries.<\/p>\n<\/li>\n<\/ol>\n<p>Bonus hint: Doing some <strong>preprocessing<\/strong> on the array might allow the queries to be answered by just looking up the answer in a precomputed table. The bound on <script type=\"math\/tex\">N<\/script> seems pretty low...<\/p>",
        "bonus": "<h4>BONUS (20 points)<\/h4>\n<p>After being unable to solve this problem, Lily has become frustrated. She decides to take her anger out by giving your code a TON of queries! Can they still be answered...?<\/p>\n<p>For the bonus test cases, <script type=\"math\/tex\">1 \\leq Q \\leq 2 \\cdot 10^5<\/script>.<\/p>",
        "version": 2
    },
    "PRI7": {
        "title": "Painting The Fence",
        "type": "Intermediate",
        "state": "up",
        "maxScore": 100,
        "blurb": "Farmer John creates art [100]",
        "description": "<p>Farmer John's field has a fence with <script type=\"math\/tex\">N<\/script> sections, numbered from <script type=\"math\/tex\">1<\/script> to <script type=\"math\/tex\">N<\/script>. The section <script type=\"math\/tex\">i<\/script> is initially painted in color <script type=\"math\/tex\">c_i<\/script>. Currently the fence has a bunch of different colors, which FJ doesn't like - he wants all sections of the fence to be painted in the same color.<\/p>\n<p>Farmer John has an integer painting capacity <script type=\"math\/tex\">K<\/script>. On one day, FJ can do the following repainting process, consisting of two steps:<\/p>\n<ol>\n<li>He chooses two integers <script type=\"math\/tex\">l<\/script> and <script type=\"math\/tex\">r<\/script> such that <script type=\"math\/tex\">1 \\leq l \\leq r \\leq n<\/script> and <script type=\"math\/tex\">r-l+1=K<\/script>.<\/li>\n<li>For each fence section <script type=\"math\/tex\">i<\/script> such that <script type=\"math\/tex\">l \\leq i \\leq r<\/script>, FJ can either repaint it with any color he wants, or ignore it and let it keep its current color.<\/li>\n<\/ol>\n<p>Note that in the same day FJ can use different colors to repaint different sections of the fence.<\/p>\n<p>Farmer John is lazy, so he wants to know the minimum number of days needed to repaint the fence so that all sections become the same color.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains two space-separated integers <script type=\"math\/tex\">N<\/script> and <script type=\"math\/tex\">K<\/script> (<script type=\"math\/tex\">1 \\leq K \\leq N \\leq 10^5<\/script>).<\/p>\n<p>The second line of input contains <script type=\"math\/tex\">N<\/script> space-separated integers. The <script type=\"math\/tex\">i<\/script>-th of these integers denotes <script type=\"math\/tex\">c_i<\/script> (<script type=\"math\/tex\">1 \\leq c_i \\leq 100<\/script>), the color which fence section <script type=\"math\/tex\">i<\/script> is initially painted in.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output one line with a single integer: The minimum # of days FJ needs to make all fence sections have the same color.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">10 3\n1 3 3 1 2 1 3 3 3 3\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">2\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>FJ can paint the first fence section with color 3 on the first day. Then, he can paint sections 4, 5, and 6 with color 3 on the second day.<\/p>\n<h4>SCORING<\/h4>\n<ul>\n<li>\n<p>Test cases 2-5 satisfy <script type=\"math\/tex\">K=1<\/script>.<\/p>\n<\/li>\n<li>\n<p>Test cases 6-10 satisfy no additional constraints.<\/p>\n<\/li>\n<\/ul>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>The number of colors is quite small...<\/p>\n<\/li>\n<li>\n<p>Try fixing the color that all fence sections should end up with, and see if the solution to this subproblem can be extended to solve the full one. <\/p>\n<\/li>\n<li>\n<p>When a fence section that isn't the right color is encountered, it has to be repainted, no matter what. So, why not skip a bunch of sections along the way (other sections that are within the <script type=\"math\/tex\">l<\/script> to <script type=\"math\/tex\">r<\/script> interval)?<\/p>\n<\/li>\n<\/ol>",
        "bonus": "",
        "version": 2
    },
    "PRB7": {
        "title": "Candy Addition",
        "type": "Beginner",
        "state": "up",
        "maxScore": 100,
        "blurb": "Sharing is caring [100]",
        "description": "<p>Bo is planning to surprise his friends with <script type=\"math\/tex\">N<\/script> bags (<script type=\"math\/tex\">1 \\leq N \\leq 100<\/script>) of sweet candies! Each bag already has some number of candies in it.<\/p>\n<p>Bo's friends are easily angered, especially when they don't get enough candy. So, Bo would like to add additional candies to the bags so that every bag has at least <script type=\"math\/tex\">K<\/script> candies in it (<script type=\"math\/tex\">1 \\leq K \\leq 100<\/script>). Due to sanitary reasons, Bo cannot take any candies out of the bags; he can only put more candies in.<\/p>\n<p>Luckily, Bo has an infinite supply of candies, but he wants to save as many for himself as possible. What is the minimum # of candies he needs to add, so that every bag has at least <script type=\"math\/tex\">K<\/script> candies?<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains two space-separated integers <script type=\"math\/tex\">N<\/script> and <script type=\"math\/tex\">K<\/script>.<\/p>\n<p>The next line of input contains <script type=\"math\/tex\">N<\/script> space-separated integers, giving the number of candies in the bags. These integers will be in the range <script type=\"math\/tex\">1 \\ldots 100<\/script>.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output one line containing a single integer: The smallest # of candies Bo needs.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">5 7\n2 8 7 6 15\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">6\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>There are <script type=\"math\/tex\">5<\/script> bags, and Bo would like to place at least <script type=\"math\/tex\">7<\/script> candies in each bag. The best solution is to place 5 candies into bag 1 and 1 candy into bag 4. This way, the # of candies in each bag becomes <script type=\"math\/tex\">[7, 8, 7, 7, 15]<\/script>. So, the answer is <script type=\"math\/tex\">5+1=6<\/script>.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>What if there's only one bag of candies (<script type=\"math\/tex\">N=1<\/script>)? Try to solve this modified version of the problem. Then, try extending the solution to work with multiple bags.<\/p>\n<\/li>\n<li>\n<p>Review of input and output handling:<\/p>\n<\/li>\n<\/ol>\n<p>Java<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRB7 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \/\/ Read integers from the console\n        int N = sc.nextInt();\n        int K = sc.nextInt();\n        \/\/ Read an array from the console\n        int[] bags = new int[N];\n        for (int i = 0; i &lt; N; i++) {\n            bags[i] = sc.nextInt();\n        }\n        \/\/ Output to the console\n        System.out.println(bags[0]);\n    }\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\"># Read integers from the console\nN, K = map(int, input().split())\n# Read an array from the console\nbags = input().strip().split()\n# Convert elements to integers\nfor i in range(len(bags)):\n    bags[i] = int(bags[i])\n# Output to the console\nprint(bags[0])\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n    \/\/ Read integers from the console\n    int N, K;\n    cin &gt;&gt; N &gt;&gt; K;\n    \/\/ Read an array from the console\n    vector&lt;int&gt; bags(N);\n    for (int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; bags[i];\n    }\n    \/\/ Output to the console\n    cout &lt;&lt; bags[0] &lt;&lt; endl;\n    return 0;\n}\n<\/code><\/pre>",
        "bonus": "",
        "version": 2
    },
    "angry": {
        "title": "Angry Cows",
        "type": "Advanced",
        "state": "up",
        "maxScore": 200,
        "blurb": "USACO Mock, Problem 4 [200]",
        "description": "<p>This problem can be found at <a href=\"http:\/\/usaco.org\/index.php?page=viewproblem2&cpid=592\" target=\"_blank\">http:\/\/usaco.org\/index.php?page=viewproblem2&amp;cpid=592<\/a>.<\/p>\n<p>Submit your best solution here (you should get the same results for the test cases).<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "",
        "bonus": "",
        "version": 2
    },
    "cowtip": {
        "title": "Cow Tipping",
        "type": "Intermediate",
        "state": "up",
        "maxScore": 200,
        "blurb": "USACO Mock, Problem 3 [200]",
        "description": "<p>This problem can be found at <a href=\"http:\/\/usaco.org\/index.php?page=viewproblem2&cpid=689\" target=\"_blank\">http:\/\/usaco.org\/index.php?page=viewproblem2&amp;cpid=689<\/a>.<\/p>\n<p>Submit your best solution here (you should get the same results for the test cases).<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "",
        "bonus": "",
        "version": 2
    },
    "cownomics": {
        "title": "Bovine Genomics",
        "type": "Intermediate",
        "state": "up",
        "maxScore": 200,
        "blurb": "USACO Mock, Problem 2 [200]",
        "description": "<p>This problem can be found at <a href=\"http:\/\/www.usaco.org\/index.php?page=viewproblem2&cpid=736\" target=\"_blank\">http:\/\/www.usaco.org\/index.php?page=viewproblem2&amp;cpid=736<\/a>.<\/p>\n<p>Submit your best solution here (you should get the same results for the test cases).<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "",
        "bonus": "",
        "version": 2
    },
    "lostcow": {
        "title": "The Lost Cow",
        "type": "Beginner",
        "state": "up",
        "maxScore": 200,
        "blurb": "USACO Mock, Problem 1 [200]",
        "description": "<p><strong>What is USACO?<\/strong><\/p>\n<p>(A lot of the below information is taken from the official USACO website. You can find more information at <a href=\"http:\/\/usaco.org\/index.php\" target=\"_blank\">http:\/\/usaco.org\/index.php<\/a>.)<\/p>\n<p>USACO stands for the USA Computing Olympiad. The goal of USACO is to identify, motivate, and train high-school computing students at all levels. They do this through online programming contests (roughly four per year) for students at all skill levels.<\/p>\n<p>Top students in USACO contests are invited to an intensive summer training camp, where they further improve their skills and learn advanced material. The top four students from camp have the opportunity to represent the USA at the International Olympiad in Informatics (IOI), the most prestigious international algorithmic programming competition at the high-school level.<\/p>\n<p>To participate in USACO contests, you'll need to create an account on their website. Contests are generally 4 hours long, and they consist of 3 problems of varying difficulty to solve. Although the contest itself lasts 4 hours, you can start the contest at any time within a larger 4 day window (see the schedule on the USACO website). Once you start the contest, your personal 4 hour timer will start counting down, and you'll be able to read and solve the problems.<\/p>\n<p>Normally, there is one easy problem, one medium problem, and one hard problem. An important note is that the problems may not be ordered by increasing difficulty! Make sure to read all the problems in order to find the easiest ones. Also keep in mind that the problems will be challenging; there is a reason why the contest lasts 4 hours! You aren't expected to solve the problems right away. Take some time to think about the problems, and you'll have a much better chance of solving them.<\/p>\n<p>If you do well enough on a USACO contest, you may be promoted to a higher division (Bronze -&gt; Silver -&gt; Gold -&gt; Platinum). The cutoff is generally around 750 out of 1000. You can reach this score by solving two problems, and getting about 25% partial credit on the third one. Remember that getting partial credit on a problem can be (and often is) the deciding factor of whether or not you get promoted!<\/p>\n<p>For the Bronze contest in particular: Focus on <strong>implementation skills<\/strong> (using strings, for loops, arrays, etc.), and understand the concept of <strong>brute force<\/strong> (complete search, or trying all possibilities). A bit of practice with <strong>greedy methods<\/strong> (choosing the best move at every step of the problem) will help too.<\/p>\n<p><strong>Mock Contest Format<\/strong><\/p>\n<p>The problems in this week's set (apart from File IO) are all part of a mock USACO Bronze contest, but with 4 problems instead of 3. The problems all come from past USACO contests. To help you get used to the USACO website, each problem will contain a link to the official USACO page for that problem. You can read the problem and submit your solutions on the USACO website, and then submit your best solution here to earn points for each problem.<\/p>\n<p>Since these are past USACO problems, there are posted solutions to all the problems available on the USACO website. To get the most out of this mock contest, please do not look at the solutions until you have tried your best to solve each problem.<\/p>\n<p>You'll need to <a href=\"http:\/\/usaco.org\/index.php?page=register\" target=\"_blank\">create an account<\/a> on the USACO website to attempt these problems (and to take the actual contest in December).<\/p>\n<hr>\n\n<p>This problem can be found at <a href=\"http:\/\/usaco.org\/index.php?page=viewproblem2&cpid=735\" target=\"_blank\">http:\/\/usaco.org\/index.php?page=viewproblem2&amp;cpid=735<\/a>.<\/p>\n<p>Submit your best solution here (you should get the same results for the test cases).<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "",
        "bonus": "",
        "version": 2
    },
    "fileio": {
        "title": "File IO",
        "type": "Beginner",
        "state": "up",
        "maxScore": 200,
        "blurb": "Reading and writing to files [200]",
        "description": "<p>Working with files is a fundamental part of programming. So, let's learn how to work with files! (Spoiler: It's easier than you think.)<\/p>\n<p><strong>File Input<\/strong><\/p>\n<p>In Java, a Scanner can actually be used to read from files as well! The only difference is that instead of passing System.in to Scanner's constructor, you should pass a File object instead. See the below code sample for how this works:<\/p>\n<pre><code class=\"java\">File fin = new File(&quot;&lt;filename&gt;&quot;);\nScanner sc = new Scanner(file);\n<\/code><\/pre>\n\n<p>After doing this, the rest becomes exactly the same as when you're working with the console \/ standard input! Scanner methods like nextInt(), nextFloat(), and next() can be used to parse input from a file. For example, to read an array of <script type=\"math\/tex\">N<\/script> integers from numbers.txt, you could use the following code:<\/p>\n<pre><code class=\"java\">\/\/ Scanner sc = new Scanner(System.in);\nScanner sc = new Scanner(new File(&quot;numbers.txt&quot;));\nint N = sc.nextInt();\nint[] arr = new int[N];\nfor (int i = 0; i &lt; N; i++) {\n    arr[i] = sc.nextInt();\n}\n<\/code><\/pre>\n\n<p>To show just how similar file IO is to standard IO, all you'd have to do in order to read from standard input is to uncomment the 1st line, and comment out the 2nd line. It's that simple!<\/p>\n<p><strong>File Output<\/strong><\/p>\n<p>A PrintWriter can be used to write to files, and it can be used in pretty much the same way as System.out! An example of how to do this is below:<\/p>\n<pre><code class=\"java\">File fout = new File(&quot;&lt;filename&gt;&quot;);\nPrintWriter out = new PrintWriter(fout);\nout.println(&quot;This works!&quot;);\nout.print(&quot;Oh yeah, this works &quot;);\nout.printf(&quot;%d\\n&quot;, 2);\nout.close();\n<\/code><\/pre>\n\n<p>All the methods you normally use with System.out, like print(), println(), and printf(), are available with PrintWriter as well. Don't forget to close the PrintWriter at the end of the program. For example, to print out a space-separated array of integers to array.txt, you could use the following code:<\/p>\n<pre><code class=\"java\">int[] arr = {1, 3, 3, 1, 4};\nPrintWriter out = new PrintWriter(new File(&quot;array.txt&quot;));\nfor (int i = 0; i &lt; arr.length; i++) {\n    if (i != 0) out.print(' ');\n    out.print(arr[i]);\n}\nout.println();\nout.close();\n<\/code><\/pre>\n\n<p><strong>Summary<\/strong><\/p>\n<p>(Note: For the above code samples to work, you need to either catch or throw an IOException when creating the Scanner, in case the file is not found on the computer. The easiest way to do this is to add <strong>throws IOException<\/strong> to the main method header. See the summary code below.)<\/p>\n<p>Here is a summary of how to do file IO in Java:<\/p>\n<pre><code class=\"java\">import java.io.*;\nimport java.util.*;\n\npublic class fileio {\n    \/\/ Don't forget to add the &quot;throws IOException&quot; \\\/ \\\/ \\\/\n    public static void main(String[] args) throws IOException {\n        \/\/ Read from a file with a Scanner\n        File fin = new File(&quot;fileio.in&quot;);\n        Scanner sc = new Scanner(fin);\n\n        \/\/ Example usages of Scanner\n        int age = sc.nextInt();\n        float weight = sc.nextFloat();\n        String firstName = sc.next();\n\n        \/\/ Write to a file with a PrintWriter\n        File fout = new File(&quot;fileio.out&quot;);\n        PrintWriter out = new PrintWriter(fout);\n\n        \/\/ Example usages of PrintWriter\n        out.println(&quot;I work just like System.out.println()!&quot;);\n        out.print(firstName + &quot; is &quot; + age + &quot; years old. Weight = &quot;);\n        out.printf(&quot;%f\\n&quot;, weight);\n\n        \/\/ Don't forget to close PrintWriter at the end!\n        out.close();\n    }\n}\n<\/code><\/pre>\n\n<p>(If you are using either C++ or Python 3 to solve these problems, check the hints section for example code on how to do file IO.)<\/p>\n<p>Now, try writing a program that will solve the below problem. Feel free to use the above code for reference.<\/p>\n<hr>\n\n<p>Bessie has written down <script type=\"math\/tex\">N<\/script> numbers (<script type=\"math\/tex\">1 \\leq N \\leq 100<\/script>) in a file named \"fileio.in\". Each number is in the range <script type=\"math\/tex\">1...100<\/script>.<\/p>\n<p>Help her determine the sum of these numbers, and output the answer to a file named \"fileio.out\".<\/p>\n<h4>INPUT FORMAT (fileio.in):<\/h4>\n<p>The first line of input contains <script type=\"math\/tex\">N<\/script>.<\/p>\n<p>The next line contains <script type=\"math\/tex\">N<\/script> space separated integers. These are the numbers that Bessie wants to sum.<\/p>\n<h4>OUTPUT FORMAT (fileio.out):<\/h4>\n<p>Output the sum of the <script type=\"math\/tex\">N<\/script> numbers.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">5\n1 3 3 1 4\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">12\n<\/code><\/pre>\n\n<p>If your program receives a runtime error (exclamation mark) verdict for the sample test case, chances are your program didn't do file IO correctly. <strong>Test your code locally<\/strong> to check if it can read from the input file, and write to the output file.<\/p>\n<p>Model solutions in all 3 languages can be found in the hints for this problem.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<p>Model solutions in all 3 languages are below.<\/p>\n<p>Java<\/p>\n<pre><code class=\"java\">import java.io.*;\nimport java.util.*;\n\npublic class fileio {\n    \/\/ Don't forget to add the &quot;throws IOException&quot; \\\/ \\\/ \\\/\n    public static void main(String[] args) throws IOException {\n        \/\/ Read from a file with a Scanner\n        File fin = new File(&quot;fileio.in&quot;);\n        Scanner sc = new Scanner(fin);\n\n        \/\/ Parse the integer array &amp; find the sum\n        int N = sc.nextInt();\n        int[] arr = new int[N];\n        for (int i = 0; i &lt; N; i++) {\n            arr[i] = sc.nextInt();\n        }\n        int sum = 0;\n        for (int i = 0; i &lt; N; i++) {\n            sum += arr[i];\n        }\n\n        \/\/ Write to a file with a PrintWriter (don't forget to close it!)\n        File fout = new File(&quot;fileio.out&quot;);\n        PrintWriter out = new PrintWriter(fout);\n        out.println(sum);\n        out.close();\n    }\n}\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;fstream&gt;\nusing namespace std;\n\nint main() {\n    \/\/ Read from a file with ifstream (input file stream)\n    ifstream fin(&quot;fileio.in&quot;);\n\n    \/\/ Parse the integer array &amp; find the sum\n    int N;\n    fin &gt;&gt; N;\n    int arr[N];\n    for (int i = 0; i &lt; N; i++) {\n        fin &gt;&gt; arr[i];\n    }\n    int sum = 0;\n    for (int i = 0; i &lt; N; i++) {\n        sum += arr[i];\n    }\n\n    \/\/ Write to a file with ofstream (output file stream, don't forget to close it)\n    ofstream fout(&quot;fileio.out&quot;);\n    fout &lt;&lt; sum &lt;&lt; endl;\n    fout.close();\n    return 0;\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\"># Read from a file\nfin = open('fileio.in', 'r')\n\n# Parse the integer array &amp; find the sum\nN = int(fin.readline())\narr = fin.readline().strip().split()\n# Convert each element in the array to an integer\nfor i in range(N):\n    arr[i] = int(arr[i])\ncurr_sum = 0\nfor i in range(N):\n    curr_sum += arr[i]\n\n# Write to a file (don't forget to close it)\nfout = open('fileio.out', 'w')\n# Python can only write strings, so make sure to cast to a string\n# Make sure to add a newline too\nfout.write(str(curr_sum) + '\\n')\nfout.close()\n<\/code><\/pre>",
        "bonus": "",
        "version": 2
    },
    "PRA5": {
        "title": "Sleepy Cow Sorting",
        "type": "Advanced",
        "state": "up",
        "maxScore": 100,
        "blurb": "Farmer John gets greedy [100+20]",
        "description": "<p>Farmer John is attempting to sort his N cows (<script type=\"math\/tex\">1 \\leq N \\leq 100<\/script>), conveniently numbered <script type=\"math\/tex\">1...N<\/script>, before they head out to the pastures for breakfast.<\/p>\n<p>Currently, the cows are standing in a line in the order <script type=\"math\/tex\">p_1,p_2,p_3,...,p_N<\/script>, and Farmer John is standing in front of cow <script type=\"math\/tex\">p_1<\/script>. He wants to reorder the cows so that they are in the order <script type=\"math\/tex\">1,2,3,...,N<\/script>, with cow <script type=\"math\/tex\">1<\/script> next to Farmer John.<\/p>\n<p>The cows are a bit sleepy today, so at any point in time the only cow who is paying attention to Farmer John's instructions is the cow directly facing Farmer John. In one time step, he can instruct this cow to move <script type=\"math\/tex\">k<\/script> paces down the line, for any <script type=\"math\/tex\">k<\/script> in the range <script type=\"math\/tex\">1...N-1<\/script>. The <script type=\"math\/tex\">k<\/script> cows whom she passes will amble forward, making room for her to insert herself in the line after them.<\/p>\n<p>For example, suppose that <script type=\"math\/tex\">N=4<\/script> and the cows start off in the following order:<\/p>\n<pre><code class=\"text\">FJ: 4, 3, 2, 1 \n<\/code><\/pre>\n\n<p>The only cow paying attention to FJ is cow <script type=\"math\/tex\">4<\/script>. If he instructs her to move <script type=\"math\/tex\">2<\/script> paces down the line, the order will subsequently look like this:<\/p>\n<pre><code class=\"text\">FJ: 3, 2, 4, 1\n<\/code><\/pre>\n\n<p>Now the only cow paying attention to FJ is cow <script type=\"math\/tex\">3<\/script>, so in the second time step he may give cow <script type=\"math\/tex\">3<\/script> an instruction, and so forth until the cows are sorted.<\/p>\n<p>Farmer John is eager to complete the sorting, so he can go back to the farmhouse for his own breakfast. Help him find the minimum number of time steps required to sort the cows.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains <script type=\"math\/tex\">N<\/script>.<\/p>\n<p>The second line contains <script type=\"math\/tex\">N<\/script> space-separated integers, <script type=\"math\/tex\">p_1,p_2,p_3,...,p_N<\/script>, indicating the starting order of the cows.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>A single integer: the number of time steps before the <script type=\"math\/tex\">N<\/script> cows are in sorted order, if Farmer John acts optimally.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">4\n1 2 4 3\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">3\n<\/code><\/pre>\n\n<p>Problem credits: Dhruv Rohatgi<br \/>\nSource: USACO 2019 January Contest, Bronze #2<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<p>A good way to approach this problem is to come up with some strategy that Farmer John can use to sort his cows. For example, one simple strategy is to just keep the last few cows sorted by placing the cows in the right places; this would guarantee that he could finish sorting the cows in <script type=\"math\/tex\">N<\/script> steps. An example of this is below:<\/p>\n<pre><code class=\"text\">              Steps\nFJ: 1 2 4 3  |  0\nFJ: 2 4 3 1  |  1\nFJ: 4 3 1 2  |  2\nFJ: 3 1 2 4  |  3\nFJ: 1 2 3 4  |  4\n<\/code><\/pre>\n\n<p>This method does not minimize the number of time steps needed to sort the cows, but it's a start. Try to find a way to improve on this strategy!<\/p>",
        "bonus": "<h4>BONUS (20 points)<\/h4>\n<p>Now Farmer John knows how long it will take him to complete the sorting, but he realizes that this info doesn't help much on its own. After all, what good is a time estimate if you don't know the actual steps to take?<\/p>\n<p>Please fix this terrible condundrum for Farmer John; help him find a sequence of instructions that sorts the cows in the minimum number of time steps.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The input format remains the same.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>The first line should contain a single integer, <script type=\"math\/tex\">K<\/script>, giving the minimum number of time steps required to sort the cows.<\/p>\n<p>The second line should contain <script type=\"math\/tex\">K<\/script> space-separated integers, <script type=\"math\/tex\">c_1,c_2,...,c_K<\/script>, each in the range <script type=\"math\/tex\">1...N-1<\/script>. Furthermore, if in the <script type=\"math\/tex\">i<\/script>-th time step FJ instructs the cow facing him to move <script type=\"math\/tex\">c_i<\/script> paces down the line, then after <script type=\"math\/tex\">K<\/script> time steps the cows should be in sorted order.<\/p>\n<p>If there are multiple optimal instruction sequences, your program may output any of them.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">4\n1 2 4 3\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">3\n2 2 3\n<\/code><\/pre>",
        "version": 2
    },
    "PRI5": {
        "title": "Lifeguards",
        "type": "Intermediate",
        "state": "up",
        "maxScore": 100,
        "blurb": "Keeping the pool safe [100+30]",
        "description": "<p>Farmer John has opened a swimming pool for his cows, figuring it will help them relax and produce more milk.<\/p>\n<p>To ensure safety, he hires <script type=\"math\/tex\">N<\/script> cows as lifeguards, each of which has a shift that covers some contiguous interval of time during the day. For simplicity, the pool is open from time <script type=\"math\/tex\">t=0<\/script> until time <script type=\"math\/tex\">t=1000<\/script> on a daily basis, so each shift can be described by two integers, giving the time at which a cow starts and ends her shift. For example, a lifeguard starting at time <script type=\"math\/tex\">t=4<\/script> and ending at time <script type=\"math\/tex\">t=7<\/script> covers three units of time (note that the endpoints are \"points\" in time).<\/p>\n<p>Unfortunately, Farmer John hired 1 more lifeguard than he has the funds to support. Given that he must fire exactly one lifeguard, what is the maximum amount of time that can still be covered by the shifts of the remaining lifeguards? An interval of time is covered if at least one lifeguard is present.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains <script type=\"math\/tex\">N<\/script> (<script type=\"math\/tex\">1 \\leq N \\leq 100<\/script>). Each of the next <script type=\"math\/tex\">N<\/script> lines describes a lifeguard in terms of two integers in the range <script type=\"math\/tex\">0...1000<\/script>, giving the starting and ending point of a lifeguard's shift. All such endpoints are distinct. Shifts of different lifeguards might overlap.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Please write a single number, giving the maximum amount of time that can still be covered if Farmer John fires 1 lifeguard.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">3\n5 9\n1 4\n3 7\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">7\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>Farmer John should fire the 3rd lifeguard to maximize the time covered.<\/p>\n<p>Problem credits: Brian Dean<br \/>\nSource: USACO 2018 January Contest, Bronze #2<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>Farmer John only has to fire one lifeguard, and the bounds for the problem are pretty low. So, a possible approach may be to try firing each lifeguard, and taking the best result from all these simulations.<\/p>\n<\/li>\n<li>\n<p>Here's an example for how one might simulate firing a lifeguard. This example uses the sample input, firing the 1st lifeguard.<\/p>\n<\/li>\n<\/ol>\n<pre><code class=\"text\">0 1 2 3 4 5 6 7 8 9    Time steps\n\nF F F F F F F F F F    Nothing covered initially\n\nF T T T F F F F F F    Lifeguard 2\n  ^ ^ ^\nF T T T T T T F F F    Lifeguard 3\n      ^ ^ ^ ^\n<\/code><\/pre>\n\n<p>At the end, the total time covered by the lifeguards is 6.<\/p>",
        "bonus": "<h4>BONUS (30 points)<\/h4>\n<p>After noticing the overwhelming success of his swimming pool, Farmer John has decided to extend the pool's hours of operation. Now, the pool is open from time <script type=\"math\/tex\">t=0<\/script> until time <script type=\"math\/tex\">t=10^9<\/script>. This means that the start and end points of a lifeguard's shift can also range from <script type=\"math\/tex\">0...10^9<\/script>. (The constraints on <script type=\"math\/tex\">N<\/script> have not changed.)<\/p>\n<p>Farmer John still needs to fire exactly one lifeguard. The question remains the same: Given that he must fire exactly one lifeguard, what is the maximum amount of time that can still be covered by the shifts of the remaining lifeguards?<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">3\n200000 800000\n0 300000\n600000 900000\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">800000\n<\/code><\/pre>",
        "version": 2
    },
    "PRB5": {
        "title": "The Cow-Signal",
        "type": "Beginner",
        "state": "up",
        "maxScore": 100,
        "blurb": "Bessie the supercow [100]",
        "description": "<p>Bessie and her cow friends are playing as their favorite cow superheroes. Of course, everyone knows that any self-respecting superhero needs a signal to call them to action. Bessie has drawn a special signal on a sheet of <script type=\"math\/tex\">M \\times N<\/script> paper (<script type=\"math\/tex\">1 \\leq M \\leq 10<\/script>, <script type=\"math\/tex\">1 \\leq N \\leq 10<\/script>), but this is too small, much too small! Bessie wants to amplify the signal so it is exactly <script type=\"math\/tex\">K<\/script> times bigger (<script type=\"math\/tex\">1 \\leq K \\leq 10<\/script>) in each direction.<\/p>\n<p>The signal will consist only of the '.' and 'X' characters.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains <script type=\"math\/tex\">M<\/script>, <script type=\"math\/tex\">N<\/script>, and <script type=\"math\/tex\">K<\/script>, separated by spaces.<\/p>\n<p>The next <script type=\"math\/tex\">M<\/script> lines each contain a length <script type=\"math\/tex\">N<\/script> string, collectively describing the picture of the signal.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>You should output <script type=\"math\/tex\">KM<\/script> lines, each with <script type=\"math\/tex\">KN<\/script> characters, giving a picture of the enlarged signal.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">5 4 2\nXXX.\nX..X\nXXX.\nX..X\nXXX.\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">XXXXXX..\nXXXXXX..\nXX....XX\nXX....XX\nXXXXXX..\nXXXXXX..\nXX....XX\nXX....XX\nXXXXXX..\nXXXXXX..\n<\/code><\/pre>\n\n<p>Problem credits: Nathan Pinsker<br \/>\nSource: USACO 2016 December Contest, Bronze #3<\/p>\n<h4>NOTES<\/h4>\n<p>Tip: The sample input and output can be really useful when trying to better understand what a problem is asking for. Always <strong>look at the sample input<\/strong>, especially when the problem statement is ambiguous or confusing.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>The easiest way to store Bessie's signal would be using a 2D array of characters (or an array of strings). It might also help to create another 2D array of characters storing the enlarged version of the signal. Then, try to find a way to convert each individual pixel of the original image into a bigger pixel in the enlarged image.<\/p>\n<\/li>\n<li>\n<p>How could the below relationship be translated into code? (Each enlarged pixel is mapped to one of the original pixels.)<\/p>\n<\/li>\n<\/ol>\n<pre><code class=\"text\">Original image (K = 1):\n12\n34\n\nK = 2:\n1122\n1122\n3344\n3344\n\nK = 3:\n111222\n111222\n111222\n333444\n333444\n333444\n\n...\n<\/code><\/pre>",
        "bonus": "",
        "version": 2
    },
    "PRS4": {
        "title": "Bessie's Favorite Number",
        "type": "Advanced",
        "state": "up",
        "maxScore": 100,
        "blurb": "Think outside (or inside?) the box [100]",
        "description": "<p>Bessie the cow has a favorite number. However, she refuses to tell you the number directly. Instead, she will give you hints as to what her favorite number is by using the results of the 2 test cases when you submit a guess.<\/p>\n<p>Can you find Bessie's favorite number?<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>There is no input for this problem.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output a single integer: Bessie's favorite number.<\/p>\n<h4>NOTES<\/h4>\n<p>Bessie's favorite number is a positive integer in the range <script type=\"math\/tex\">1...10^6<\/script>. If your program outputs anything outside this range, it will not receive any points!<\/p>\n<p>After submitting a solution, you will receive feedback via the results for the 2 test cases. In order to figure out Bessie's favorite number, you will need to <strong>try lots of different numbers<\/strong>, and think outside (or inside?) the box!<\/p>\n<p>There are hints available if needed; click on the \"Show Hints\" button below to see them.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>Have you ever played a game where you had to guess a number from <script type=\"math\/tex\">1<\/script> to <script type=\"math\/tex\">100<\/script>? When you guess a number, the other person tells you if the number is too low or too high. Could this be similar to that?<\/p>\n<\/li>\n<li>\n<p>The closer you are, the higher your score!<\/p>\n<\/li>\n<li>\n<p>Binary search might help.<\/p>\n<\/li>\n<\/ol>",
        "bonus": "",
        "version": 2
    },
    "PRA4": {
        "title": "One Among Us",
        "type": "Advanced",
        "state": "up",
        "maxScore": 100,
        "blurb": "Finding the impostor [100+15]",
        "description": "<p>Bob is playing an intense game of <a href=\"https:\/\/www.youtube.com\/watch?v=Na8vHaCLwKc\" target=\"_blank\">Among Us<\/a>, the ultimate test of teamwork and betrayal. In this game, <script type=\"math\/tex\">1<\/script> person is selected as the impostor, while the rest are given the role of a crewmate. The impostor's goal is to blend in with the crew, and to eliminate the other crewmates without being caught.<\/p>\n<p>As luck would have it, someone decides to call an emergency meeting right before Bob finishes his Simon Says task. Now it's up to the <script type=\"math\/tex\">N<\/script> people still alive (each person has a name) to figure out who the impostor is once and for all!<\/p>\n<p>In the emergency meeting, a bunch of people contribute <script type=\"math\/tex\">M<\/script> pieces of info to think about. Each piece of info is of the form \"<script type=\"math\/tex\">a<\/script> says <script type=\"math\/tex\">b<\/script> is safe\" or \"<script type=\"math\/tex\">a<\/script> says <script type=\"math\/tex\">b<\/script> is impostor\". For example, a possible piece of info could be \"Bob says Caleb is impostor\". If a crewmate says a piece of info, it is guaranteed that their info is accurate.<\/p>\n<p>Unfortunately, the impostor isn't giving away their identity that easily. The impostor can say fake pieces of info, in order to throw off the other crewmates.<\/p>\n<p>The voting timer is counting down... it's now or never! Help Bob figure out all the people who could be the impostor based on the pieces of info, so that he can find the impostor Among Us.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains a single integer <script type=\"math\/tex\">N<\/script>, the number of people currently alive in the game.<\/p>\n<p>The next <script type=\"math\/tex\">N<\/script> lines of input each contain the name of a person currently alive in the game. These names will be sorted in lexicographical order, and they will all be distinct.<\/p>\n<p>The next line of input contains a single integer <script type=\"math\/tex\">M<\/script>, the number of pieces of info.<\/p>\n<p>The next <script type=\"math\/tex\">M<\/script> lines of input each contain a single piece of info.<br \/>\nEach piece of info is of the form \"<script type=\"math\/tex\">a<\/script> says <script type=\"math\/tex\">b<\/script> is safe\" or \"<script type=\"math\/tex\">a<\/script> says <script type=\"math\/tex\">b<\/script> is impostor\", where <script type=\"math\/tex\">a<\/script> and <script type=\"math\/tex\">b<\/script> are both names of people alive in the game, and <script type=\"math\/tex\">a \\neq b<\/script>. Note that there could be duplicate pieces of info.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>The first line of output should contain a single integer <script type=\"math\/tex\">P<\/script>, the number of people who could be the impostor.<\/p>\n<p>The next <script type=\"math\/tex\">P<\/script> lines should each contain the name of a person who could be the impostor. These names should be sorted in lexicographical order.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">3 \\leq N \\leq 500<\/script>\n<br \/>\n<script type=\"math\/tex\">0 \\leq M \\leq 500<\/script>\n<\/p>\n<h4>SCORING<\/h4>\n<ul>\n<li>Test cases 1-5 will simulate actual Among Us games (that is, <script type=\"math\/tex\">N \\leq 10<\/script>).<\/li>\n<li>Test cases 6-10 satisfy no additional constraints.<\/li>\n<\/ul>\n<p>The names will consist of alphanumeric characters, and they will be no longer than <script type=\"math\/tex\">10<\/script> characters long.<\/p>\n<p>It is guaranteed that there is at least 1 person who could be the impostor, based on the given pieces of info.<\/p>\n<h4>SAMPLE INPUT 1<\/h4>\n<pre><code class=\"text\">4\nAlice\nBob\nCaleb\nDiana\n3\nAlice says Bob is safe\nBob says Caleb is impostor\nCaleb says Diana is safe\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 1<\/h4>\n<pre><code class=\"text\">1\nCaleb\n<\/code><\/pre>\n\n<h4>EXPLANATION 1<\/h4>\n<p>Alice cannot be the impostor; if she was, Bob would be wrong about Caleb being the impostor.<br \/>\nBob cannot be the impostor; if he was, Alice would be wrong about Bob being safe.<br \/>\nCaleb could be the impostor; if he was, both Alice and Bob would have correct pieces of info. Caleb's info happens to be correct as well (although it wouldn't matter if it was wrong).<br \/>\nDiana cannot be the impostor; if she was, Caleb would be wrong about Diana being safe.<\/p>\n<p>Therefore, Caleb is the only person who could be the impostor.<\/p>\n<h4>SAMPLE INPUT 2<\/h4>\n<pre><code class=\"text\">3\nDave\nlizzie\npewds\n2\nlizzie says pewds is impostor\npewds says lizzie is impostor\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 2<\/h4>\n<pre><code class=\"text\">2\nlizzie\npewds\n<\/code><\/pre>\n\n<h4>EXPLANATION 2<\/h4>\n<p>Dave cannot be the impostor; if he was, both lizzie and pewds would be wrong about their pieces of info.<br \/>\nlizzie could be the impostor; if she was, pewds would be correct about his piece of info. It does not matter that lizzie's info is wrong, as she is the impostor (and could have lied about her info).<br \/>\npewds could be the impostor; if he was, lizzie would be correct about her piece of info. It does not matter that pewds's info is wrong, as he is the impostor.<\/p>\n<p>Therefore, both lizzie and pewds could be the impostor.<\/p>\n<p>(The only change in the bonus is increased constraints.)<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>The bounds for the problem are pretty small (only <script type=\"math\/tex\">500<\/script> people at max to consider and <script type=\"math\/tex\">500<\/script> pieces of info), so <strong>complete search<\/strong> - assuming each person is the impostor, and seeing if the pieces of info match - would probably work here.<\/p>\n<\/li>\n<li>\n<p>When trying person <script type=\"math\/tex\">X<\/script> as the impostor, it makes sense to ignore all the pieces of info that person <script type=\"math\/tex\">X<\/script> gave, since they could've faked all of it. If the remaining pieces of info either say that the impostor is someone other than person <script type=\"math\/tex\">X<\/script>, or if person <script type=\"math\/tex\">X<\/script> is safe, then that person cannot be the impostor.<\/p>\n<\/li>\n<\/ol>",
        "bonus": "<h4>BONUS (15 points)<\/h4>\n<p>The memory limit for this problem is 128 MB.<\/p>\n<p>After being inspired by this <a href=\"https:\/\/www.youtube.com\/watch?v=XLPxuqcEVso\" target=\"_blank\">video<\/a>, the creators of Among Us have decided to increase the player limit substantially. The # of pieces of info has increased as well.<\/p>\n<p>The problem remains the same: Help Bob figure out all the people who could be the impostor Among Us.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">3 \\leq N \\leq 100{,}000<\/script>\n<br \/>\n<script type=\"math\/tex\">0 \\leq M \\leq 75{,}000<\/script>\n<\/p>\n<p>The names will consist of alphanumeric characters, and they will be no longer than <script type=\"math\/tex\">10<\/script> characters long.<\/p>\n<p>It is guaranteed that there is at least 1 person who could be the impostor, based on the given pieces of info.<\/p>\n<p>The total number of characters in the input for each test case will not exceed <script type=\"math\/tex\">3{,}000{,}000<\/script>.<\/p>",
        "version": 2
    },
    "PRI4": {
        "title": "Social Distancing",
        "type": "Intermediate",
        "state": "up",
        "maxScore": 100,
        "blurb": "Protecting against COWVID-19 [100+15]",
        "description": "<p>The time limit for all challenge problems is 1 second, unless otherwise stated. Java gets x1.5 the time limit, and Python gets x2.<\/p>\n<p>The memory limit for all challenge problems is 64 MB, unless otherwise stated.<\/p>\n<p>Update: For this problem, the time limit for Python has been extended to 5 seconds.<\/p>\n<hr>\n\n<p>A terrible new disease, COWVID-19, has begun to spread among cows worldwide. Farmer John is trying to take as many precautions as possible to protect his herd from infection.<\/p>\n<p>Farmer John's <script type=\"math\/tex\">N<\/script> cows, conveniently numbered <script type=\"math\/tex\">1...N<\/script>, are located at distinct points on the two-dimensional field. Having read about the importance of \"social distancing\", Farmer John wants to maximize <script type=\"math\/tex\">D<\/script>, where <script type=\"math\/tex\">D<\/script> is the Euclidean distance between the two closest cows. For example, if the two closest cows on Farmer John's field are at <script type=\"math\/tex\">(2, 3)<\/script> and <script type=\"math\/tex\">(5, 7)<\/script>, then <script type=\"math\/tex\">D=5<\/script>.<\/p>\n<p>The Euclidean distance between two points <script type=\"math\/tex\">(x_1, y_1)<\/script> and <script type=\"math\/tex\">(x_2, y_2)<\/script> is just the straight line distance between the points. Formally, the distance is equal to <script type=\"math\/tex\">\\sqrt{(x_1-x_2)^2 + (y_1-y_2)^2}<\/script>.<\/p>\n<p>Farmer John has recently acquired a special \"isolation stall\", which can be used to isolate exactly one cow from the rest of the herd. Whichever cow FJ chooses to put into this stall is effectively removed from the field.<\/p>\n<p>Please determine <strong>which cow Farmer John should remove<\/strong> so that the resulting value of <script type=\"math\/tex\">D<\/script> is as large as possible. If there are multiple cows that achieve this largest value, output the one with the smallest number. Farmer John cannot move any of the existing cows (except that one that he places in the isolation stall).<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains a single integer <script type=\"math\/tex\">N<\/script>.<\/p>\n<p>The next <script type=\"math\/tex\">N<\/script> lines each contain two integers <script type=\"math\/tex\">x_i<\/script> and <script type=\"math\/tex\">y_i<\/script>, indicating that cow number <script type=\"math\/tex\">i<\/script> is located at <script type=\"math\/tex\">(x_i, y_i)<\/script>. The info for cow 1 is given first, followed by cow 2, then 3, and so on.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output a single integer: The number of the cow that Farmer John should remove so that the resulting value of <script type=\"math\/tex\">D<\/script> is as large as possible. If there are multiple cows that achieve this largest value, output the one with the smallest number.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">3 \\leq N \\leq 200<\/script>\n<\/p>\n<p>\n<script type=\"math\/tex\">-10{,}000 \\leq x_i, y_i \\leq 10{,}000<\/script>\n<\/p>\n<p>The locations of all cows will be distinct.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">5\n1 4\n4 1\n1 2\n4 4\n2 1\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">3\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>There are <script type=\"math\/tex\">5<\/script> cows on Farmer John's field. The visual below shows the positions of the cows.<\/p>\n<p><img src=\"https:\/\/i.ibb.co\/ZxNWsdc\/sample.png\" alt=\"Sample Input Visual\" style=\"display: block; margin: auto; width: min(100%, 400px);\"><\/p>\n<p>Removing either cow <script type=\"math\/tex\">3<\/script> or cow <script type=\"math\/tex\">5<\/script> would result in <script type=\"math\/tex\">D=2<\/script>, which is the maximum possible value of <script type=\"math\/tex\">D<\/script>. Since the cow with the smallest number should be outputted in case of a tie, <script type=\"math\/tex\">3<\/script> is the answer.<\/p>\n<p>Tip: Since <script type=\"math\/tex\">N \\leq 200<\/script>, a solution with a cubic time complexity - sometimes written as <script type=\"math\/tex\">O(N^3)<\/script> - should run within the time limit. In general, a computer can perform roughly 100 million operations per second. Since <script type=\"math\/tex\">200^3<\/script> is less than 100 million, solutions with triple-nested loops should run in time.<\/p>\n<p>(The only change in the bonus is increased constraints.)<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>The concept of <strong>complete search<\/strong> may help. Specifically, try removing every single cow, and calculate the value of <script type=\"math\/tex\">D<\/script> with that cow removed. Use the results from this to find the best cow to remove.<\/li>\n<\/ol>",
        "bonus": "<h4>BONUS (15 points)<\/h4>\n<p>Farmer John just got a LOT of new cows in his herd! He still needs to choose one to move to his isolation stall, but he's afraid that he won't be able to decide in time...<\/p>\n<p>The bounds for the problem have increased. Other than that, the problem remains the same.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">3 \\leq N \\leq 3{,}000<\/script>\n<\/p>\n<p>\n<script type=\"math\/tex\">-10^8 \\leq x_i, y_i \\leq 10^8<\/script>\n<\/p>\n<p>The locations of all cows will be distinct.<\/p>\n<p>Tip: Since <script type=\"math\/tex\">3000^3<\/script> is much greater than 100 million, solutions with a cubic time complexity will not run in time. However, <script type=\"math\/tex\">3000^2<\/script> is less than 100 million, so solutions with a quadratic time complexity - sometimes written as <script type=\"math\/tex\">O(N^2)<\/script> - should run in time.<\/p>",
        "version": 2
    },
    "PRB4": {
        "title": "The Leaderboard",
        "type": "Beginner",
        "state": "up",
        "maxScore": 100,
        "blurb": "Sorting in practice [100]",
        "description": "<p>The HHS Programming Club has just created a very impressive website containing a bunch of challenge problems. There are <script type=\"math\/tex\">N<\/script> people who have completed a couple of these problems. Unfortunately, a crucial part of this system is missing: The leaderboard!<\/p>\n<p>Given the names of the <script type=\"math\/tex\">N<\/script> people and their current scores, please <strong>output the current leaderboard<\/strong>. This leaderboard should be sorted from highest to lowest score, and ties should be broken based on which name comes first in alphabetical order.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains a single integer <script type=\"math\/tex\">N<\/script>.<\/p>\n<p>The next <script type=\"math\/tex\">N<\/script> lines of input each contain the name and score of a person, separated by a single space. All names will consist of lowercase English letters, and they will be distinct.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output <script type=\"math\/tex\">N<\/script> lines, representing the current leaderboard. Each line should contain the name and score of a person, separated by a single space.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">1 \\leq N \\leq 100<\/script>\n<\/p>\n<p>The name of each person will be at most <script type=\"math\/tex\">10<\/script> characters long.<br \/>\nThe score of each person will be in the range <script type=\"math\/tex\">[0, 10^9]<\/script>.<\/p>\n<h4>SAMPLE INPUT 1<\/h4>\n<pre><code class=\"text\">4\nbob 200\ndiana 100\nalice 199\ncarl 300\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 1<\/h4>\n<pre><code class=\"text\">carl 300\nbob 200\nalice 199\ndiana 100\n<\/code><\/pre>\n\n<h4>SAMPLE INPUT 2<\/h4>\n<pre><code class=\"text\">3\nzebra 42\nchicken 42\nmouse 42\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 2<\/h4>\n<pre><code class=\"text\">chicken 42\nmouse 42\nzebra 42\n<\/code><\/pre>\n\n<p>Tip: Don't be afraid to <strong>search for help online<\/strong> while doing the challenge problems! If you're not sure how to do something (...like sorting custom objects), chances are someone has already posted the answer to your question on StackOverflow.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>Here is some starter Java code showing how to sort custom objects. Play around with it to see how it works, and see if you can adapt it to create the leaderboard.<\/li>\n<\/ol>\n<pre><code class=\"java\">import java.util.*;\n\n\/\/ Custom class representing a Person\nclass Person {\n    String name;\n    int score;\n    Person(String name, int score) {\n        this.name = name;\n        this.score = score;\n    }\n}\n\npublic class PRB4 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \/\/ Create an array of people\n        int N = sc.nextInt();\n        Person[] people = new Person[N];\n        for (int i = 0; i &lt; N; i++) {\n            people[i] = new Person(sc.next(), sc.nextInt());\n        }\n        \/\/ Sort the array using a custom Comparator\n        Arrays.sort(people, new Comparator&lt;Person&gt;() {\n            @Override\n            public int compare(Person a, Person b) {\n                \/\/ Sort by increasing score\n                return a.score - b.score;\n            }\n        });\n        \/\/ Print out the array\n        for (int i = 0; i &lt; N; i++) {\n            System.out.printf(&quot;%s %d\\n&quot;, people[i].name, people[i].score);\n        }\n    }\n}\n<\/code><\/pre>",
        "bonus": "",
        "version": 2
    },
    "PRA3": {
        "title": "Balanced Brackets",
        "type": "Advanced",
        "state": "up",
        "maxScore": 100,
        "blurb": "As all things should be [100+20]",
        "description": "<p>While chasing links to find the answers to his math homework, Jake has come across an interesting programming language called Brackets. This language is quite unique: A program written in Brackets is only a single line of code, and it contains just the characters '(', ')', '{', '}', '[', and ']'.<\/p>\n<p>In order for a Brackets program to run, it must be perfectly balanced (as all things should be).<\/p>\n<p>A Brackets program is balanced if:<\/p>\n<ul>\n<li>Open brackets are closed by the same type of closing brackets.<\/li>\n<li>Open brackets are closed in the correct order.<\/li>\n<\/ul>\n<p>Here are some examples of balanced and unbalanced Brackets programs:<\/p>\n<pre><code class=\"text\">([]) = Balanced\n[{{}}] = Balanced\n{}[()()] = Balanced\n()) = Not balanced\n}{ = Not balanced\n[(]) = Not balanced\n<\/code><\/pre>\n\n<p>Jake has just written a very long Brackets program, but he's not sure if it will actually run. Given a string <script type=\"math\/tex\">S<\/script> representing this Brackets program, please help Jake determine <strong>whether or not the program is balanced<\/strong>.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The only line of input contains the string <script type=\"math\/tex\">S<\/script> representing the Brackets program. This string will only contain the 6 valid Brackets characters.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>If <script type=\"math\/tex\">S<\/script> is balanced, print \"YES\" on a single line. Else, print \"NO\".<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">1 \\leq |S| \\leq 10^6<\/script>\n<br \/>\n(The length of the Brackets program <script type=\"math\/tex\">S<\/script> is in the range <script type=\"math\/tex\">1...10^6<\/script>.)<\/p>\n<h4>SCORING<\/h4>\n<ul>\n<li>Test cases 1-5 satisfy <script type=\"math\/tex\">|S| \\leq 10^3<\/script>.<\/li>\n<li>Test cases 6-10 satisfy no additional constraints.<\/li>\n<\/ul>\n<h4>SAMPLE INPUT 1<\/h4>\n<pre><code class=\"text\">((())[]){[]}\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 1<\/h4>\n<pre><code class=\"text\">YES\n<\/code><\/pre>\n\n<h4>SAMPLE INPUT 2<\/h4>\n<pre><code class=\"text\">{[}]()\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 2<\/h4>\n<pre><code class=\"text\">NO\n<\/code><\/pre>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>An interesting property about a valid Brackets expression (or program) is that at least one sub-expression of a valid expression should also be a valid expression. For example:<\/li>\n<\/ol>\n<pre><code class=\"text\">{ { } [ ] [ [ [ ] ] ] } is valid expression\n          [ [ [ ] ] ]   is valid sub-expression\n  { } [ ]               is valid sub-expression\n<\/code><\/pre>\n\n<p>Can we exploit this recursive structure somehow?<\/p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. What if whenever we encounter a matching pair of brackets in the expression, we simply remove it from the expression? This would keep on shortening the expression, making the problem easier to solve. For example:<\/p>\n<pre><code class=\"text\">{ { ( { } ) } }\n      |_|\n\n{ { ( ) } }\n    |_|\n\n{ { } }\n  |_|\n\n{ }\n|_|\n\n(Empty program)\n<\/code><\/pre>\n\n<p>In this case, all the brackets in the program were removed. Will this always happen if a Brackets program is valid?<\/p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. The <strong>stack<\/strong> data structure may help with removing matching pairs of brackets in the expression efficiently.<\/p>\n<hr>\n\n<h4>BONUS HINTS<\/h4>\n<ol>\n<li>\n<p>For test cases 11-14, there is a <a href=\"https:\/\/brilliant.org\/wiki\/greedy-algorithm\/\" target=\"_blank\">greedy<\/a> way to remove brackets from the program. In other words, there is a smart way to determine the smallest # of deletions that Jake needs to make (without trying all possibilities).<\/p>\n<\/li>\n<li>\n<p>For test cases 15-20, there is no greedy way to remove brackets from the program (as far as we know). So, there are two approaches to get as many points for these tests as possible. One method is to create a partially correct greedy solution that can get the optimal answer <em>most<\/em> of the time. Another method is to find an efficient way to try all the possibilities.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.educative.io\/courses\/grokking-dynamic-programming-patterns-for-coding-interviews\/m2G1pAq0OO0\" target=\"_blank\">What is dynamic programming?<\/a><\/p>\n<\/li>\n<\/ol>",
        "bonus": "<h4>BONUS (20 points)<\/h4>\n<p>This bonus is meant to be a tiebreaker. You are NOT expected to get all the points for it. Just try your best!<\/p>\n<hr>\n\n<p>The time limit for this problem is 1.5 seconds. [x1.5 for Java, x2 for Python]<\/p>\n<p>After trying out Brackets for a while, Jake has realized that it's pretty much impossible to write such a long program without making errors. So, he has resorted to correcting his code after writing it.<\/p>\n<p>Jake wants to correct his program by deleting a couple of characters from it, so that the resulting program is balanced. Here is an example of how Jake might fix a Brackets program:<\/p>\n<pre><code class=\"text\">Original program = (([))\nAfter deleting the [ character...\nBalanced program = (())\n<\/code><\/pre>\n\n<p>Note that an empty Brackets program is technically balanced, so it's always possible for Jake to fix his program this way.<\/p>\n<p>Before fixing his program, Jake would like to know how much time he'll need to invest to make the code balanced. If the Brackets program is not already balanced, please determine the <strong>minimum number of deletions<\/strong> Jake will have to make in order to make the program balanced.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The input format remains the same.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>If <script type=\"math\/tex\">S<\/script> is balanced, print \"YES\" on a single line. Do not print anything else.<\/p>\n<p>Otherwise, the first line of output should contain the string \"NO\".<br \/>\nThe second line of output should contain a single integer: The minimum number of deletions Jake needs to make to fix his Brackets program.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">1 \\leq |S| \\leq 300<\/script>\n<\/p>\n<h4>SCORING<\/h4>\n<ul>\n<li>In test cases 11-14, the Brackets program will consist of only two characters '(' and ')'.<\/li>\n<li>Test cases 15-17 satisfy <script type=\"math\/tex\">|S| \\leq 20<\/script>.<\/li>\n<li>Test cases 18-20 satisfy no further constraints.<\/li>\n<\/ul>\n<p>In the base test cases, the second line of output will be completely ignored; your program will get an Accepted verdict no matter what that line contains (as long as it prints \"YES\" or \"NO\" correctly).<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">{{[}]}((())}\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">NO\n2\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>One way Jake could fix the Brackets program while only deleting <script type=\"math\/tex\">2<\/script> characters is by deleting the brackets at indexes <script type=\"math\/tex\">4<\/script> and <script type=\"math\/tex\">9<\/script> (one-indexed).<\/p>\n<h4>NOTES<\/h4>\n<p>Note that the constraints on the length of <script type=\"math\/tex\">S<\/script> have been lowered for the bonus!<\/p>\n<p>To avoid losing points on the main problem because of TLEs, add an if statement to only calculate the minimum # of deletions if the length of the Brackets program is less than a certain amount (and to use the solution for the base problem otherwise).<\/p>\n<p>Some small hints for this bonus have been added; click the \"Show Hints\" button to see them.<\/p>",
        "version": 2
    },
    "PRI3b": {
        "title": "Prime Distance",
        "type": "Intermediate",
        "state": "up",
        "maxScore": 100,
        "blurb": "Edit distance... but with primes? [100]",
        "description": "<p>After constructing a triangle with her metal rods, Alice realized that she really liked when the rods had a length equal to a prime number. A prime number is an integer greater than <script type=\"math\/tex\">1<\/script> that has only two factors: <script type=\"math\/tex\">1<\/script> and the number itself. For example, the first 10 prime numbers are <script type=\"math\/tex\">[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]<\/script>.<\/p>\n<p>Alice now has a clay rod of length <script type=\"math\/tex\">N<\/script>. She would like to stretch or compress this rod so that it has a length equal to a prime number.<\/p>\n<p>Please help Alice find the <strong>prime number that is the closest to <script type=\"math\/tex\">N<\/script><\/strong> (smallest distance), so that she can shape her clay rod as quickly as possible. The distance between two integers <script type=\"math\/tex\">a<\/script> and <script type=\"math\/tex\">b<\/script> is equal to <script type=\"math\/tex\">|a-b|<\/script> (the absolute value of their difference). For example, the distance between <script type=\"math\/tex\">5<\/script> and <script type=\"math\/tex\">7<\/script> is <script type=\"math\/tex\">2<\/script>. If there are multiple prime numbers with the same distance, output the smallest one.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The only line of input contains a single integer <script type=\"math\/tex\">N<\/script>.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output a single integer: The prime number that is the closest to <script type=\"math\/tex\">N<\/script> (or the smallest one in case of a tie).<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">2 \\leq N \\leq 10^9<\/script>\n<\/p>\n<h4>SCORING<\/h4>\n<ul>\n<li>Test cases 1-6 satisfy <script type=\"math\/tex\">N \\leq 10^5<\/script>.<\/li>\n<li>Test cases 7-10 satisfy no additional constraints.<\/li>\n<\/ul>\n<h4>SAMPLE INPUT 1<\/h4>\n<pre><code class=\"text\">27\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 1<\/h4>\n<pre><code class=\"text\">29\n<\/code><\/pre>\n\n<h4>EXPLANATION 1<\/h4>\n<p>The prime number that is the closest to <script type=\"math\/tex\">27<\/script> is <script type=\"math\/tex\">29<\/script>, with a distance of <script type=\"math\/tex\">2<\/script>.<\/p>\n<h4>SAMPLE INPUT 2<\/h4>\n<pre><code class=\"text\">12\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 2<\/h4>\n<pre><code class=\"text\">11\n<\/code><\/pre>\n\n<h4>EXPLANATION 2<\/h4>\n<p>Both <script type=\"math\/tex\">11<\/script> and <script type=\"math\/tex\">13<\/script> are prime numbers with a distance of <script type=\"math\/tex\">1<\/script> from <script type=\"math\/tex\">12<\/script>. Since the smallest prime number should be outputted in case of a tie, <script type=\"math\/tex\">11<\/script> is the answer.<\/p>\n<h4>SAMPLE INPUT 3<\/h4>\n<pre><code class=\"text\">8161\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 3<\/h4>\n<pre><code class=\"text\">8161\n<\/code><\/pre>\n\n<h4>EXPLANATION 3<\/h4>\n<p>\n<script type=\"math\/tex\">8161<\/script> is already prime, so it is the closest prime number (with a distance of <script type=\"math\/tex\">0<\/script>).<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>This problem can be divided into two parts: Checking if a number is prime, and finding the prime number that is the closest to <script type=\"math\/tex\">N<\/script>. It may help to tackle these parts one at a time.<\/p>\n<\/li>\n<li>\n<p>Checking if a number is prime basically means making sure the number is not divisible by anything except <script type=\"math\/tex\">1<\/script> and itself. Is there a math operator that could tell us whether a number is divisible by another number (has a remainder of zero)?<\/p>\n<\/li>\n<li>\n<p>To check the numbers that are closest to <script type=\"math\/tex\">N<\/script> first, your code could follow a pattern like <script type=\"math\/tex\">N<\/script>, <script type=\"math\/tex\">N-1<\/script>, <script type=\"math\/tex\">N+1<\/script>, <script type=\"math\/tex\">N-2<\/script>, <script type=\"math\/tex\">N+2<\/script>, etc. This also works in the case of a tie.<\/p>\n<\/li>\n<li>\n<p>For test cases 7-10, <script type=\"math\/tex\">N<\/script> is really big... if you aren't careful with the way you check if a number is prime, your code could TLE (exceed the time limit). To check if a number is prime, do ALL the numbers from <script type=\"math\/tex\">2<\/script> to <script type=\"math\/tex\">N-1<\/script> need to be checked for divisibility? Maybe some of those checks are unnecessary...<\/p>\n<\/li>\n<\/ol>",
        "bonus": "",
        "version": 2
    },
    "PRI3a": {
        "title": "Link Chasing",
        "type": "Intermediate",
        "state": "up",
        "maxScore": 100,
        "blurb": "Caught in the interweb [100]",
        "description": "<p>The interweb is a very complicated place. Lots of webpages are being updated every day, and interweb links are everywhere. There are exactly <script type=\"math\/tex\">N<\/script> webpages on the interweb. To make things easier, every webpage will be labeled with an integer in the range <script type=\"math\/tex\">1...N<\/script>. In addition, every webpage has exactly one link on it; this link goes to another one of the webpages on the interweb.<\/p>\n<p>Jake is currently searching for answers to his math homework. His friend told him that he can find these answers on website <script type=\"math\/tex\">N<\/script>. Unfortunately, the structure of the interweb makes it quite hard to get to this website; all Jake can do is start at website <script type=\"math\/tex\">1<\/script>, and follow the one link that's on each website until he reaches website <script type=\"math\/tex\">N<\/script>.<\/p>\n<p>Although Jake really wants these homework answers, he realizes that it may actually be faster to do the homework himself (if it takes too many links to get to the last website). Please help Jake decide what to do by telling him <strong>how many links he will have to follow<\/strong> to get from website <script type=\"math\/tex\">1<\/script> to website <script type=\"math\/tex\">N<\/script>.<\/p>\n<p>It is possible that Jake may never reach website <script type=\"math\/tex\">N<\/script> by following the links - he could get stuck in an infinite loop. If this happens, output <script type=\"math\/tex\">-1<\/script> as your answer.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The 1st line of input contains a single integer <script type=\"math\/tex\">N<\/script>, the number of webpages on the interweb.<\/p>\n<p>The 2nd line of input contains <script type=\"math\/tex\">N<\/script> space-separated integers, where the <script type=\"math\/tex\">i<\/script>th integer represents the location that the <script type=\"math\/tex\">i<\/script>th webpage links to.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output a single integer: The number of links Jake will have to follow in order to get from the <script type=\"math\/tex\">1<\/script>st to the <script type=\"math\/tex\">N<\/script>th webpage (or <script type=\"math\/tex\">-1<\/script> if Jake will get stuck in an infinite loop).<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">2 \\leq N \\leq 5{,}000<\/script>\n<\/p>\n<p>All website links are valid (the linked website number will be in the range <script type=\"math\/tex\">1...N<\/script>).<\/p>\n<h4>SCORING<\/h4>\n<p>For test cases 1-8 (worth 80% of the points), it is guaranteed that if Jake follows the chain of links, he will eventually get from website <script type=\"math\/tex\">1<\/script> to website <script type=\"math\/tex\">N<\/script>.<\/p>\n<p>For test cases 9-10 (worth 20% of the points), there are no additional constraints.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">5\n4 5 4 2 3\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">3\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>The following picture gives a visual representation of the websites in the sample input. The arrows show which location each website links to.<\/p>\n<p><img src=\"https:\/\/i.ibb.co\/C0TSD22\/sample.png\" alt=\"Sample Input Visual\" style=\"display: block; margin: auto; width: min(100%, 500px);\"><\/p>\n<p>Jake starts on website 1. He gets linked to website 4, and then again to website 2. Finally, he gets linked to website 5, and he stops his searching. In order to get to website 5, he had to click 3 links in total: 1 to 4, 4 to 2, and 2 to 5.<\/p>\n<p>Hint: A <strong>while loop<\/strong> may help with solving this problem.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>Storing the website links in an <strong>array<\/strong> would make it easier to simulate Jake's path from website <script type=\"math\/tex\">1<\/script> to website <script type=\"math\/tex\">N<\/script>. Since arrays are 0-indexed, it might also make sense to subtract 1 from all the website link locations (although this is really up to personal preference).<\/p>\n<\/li>\n<li>\n<p>For 80% of the points, it's guaranteed that Jake will eventually get to website <script type=\"math\/tex\">N<\/script>. So, to get a majority of the points, all your code has to do is to follow the links on the websites until you reach website <script type=\"math\/tex\">N<\/script>. One way to do this could be to keep track of the current website you are on, and to follow the website links by doing something like <strong>currentSite = links[currentSite]<\/strong>.<\/p>\n<\/li>\n<li>\n<p>For 20% of the points, Jake may get stuck in an infinite loop. If Jake will not get stuck in a loop, what is the maximum # of links he will have to follow to get to website <script type=\"math\/tex\">N<\/script>? Can this info be used to detect when Jake will never get to website <script type=\"math\/tex\">N<\/script> (perhaps by stopping after too many links have been followed)?<\/p>\n<\/li>\n<\/ol>",
        "bonus": "",
        "version": 2
    },
    "PRB3": {
        "title": "Triangle Creation",
        "type": "Beginner",
        "state": "up",
        "maxScore": 100,
        "blurb": "Stretching metal rods [100]",
        "description": "<p>Alice has three metal rods of length <script type=\"math\/tex\">a<\/script>, <script type=\"math\/tex\">b<\/script> and <script type=\"math\/tex\">c<\/script> centimeters respectively. In one minute Alice can pick one arbitrary rod and stretch it by exactly <script type=\"math\/tex\">1<\/script> centimeter (Alice is very strong). She is not allowed to break the rods.<\/p>\n<p>What is the <strong>minimum # of minutes<\/strong> she needs to spend stretching the rods in order to create a triangle of positive area? The metal rods should be used as the triangle's sides (one rod for one side), and their endpoints should be located at the triangle's vertices.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The only line of input contains three integers <script type=\"math\/tex\">a<\/script>, <script type=\"math\/tex\">b<\/script>, and <script type=\"math\/tex\">c<\/script>: The lengths of the three metal rods. These lengths will be given in non-decreasing order.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output a single integer: The minimum # of minutes Alice needs to spend in order to make a triangle of positive area from her metal rods.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">1 \\leq a \\leq b \\leq c \\leq 10{,}000<\/script>\n<\/p>\n<h4>SAMPLE INPUT 1<\/h4>\n<pre><code class=\"text\">6 8 10\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 1<\/h4>\n<pre><code class=\"text\">0\n<\/code><\/pre>\n\n<h4>EXPLANATION 1<\/h4>\n<p>Alice can already create a valid triangle using the metal rods without stretching any of them.<\/p>\n<h4>SAMPLE INPUT 2<\/h4>\n<pre><code class=\"text\">2 2 5\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 2<\/h4>\n<pre><code class=\"text\">2\n<\/code><\/pre>\n\n<h4>EXPLANATION 2<\/h4>\n<p>Alice can spend <script type=\"math\/tex\">1<\/script> minute to increase the length of the first metal rod, and <script type=\"math\/tex\">1<\/script> minute to increase the length of the second metal rod. This allows her to form a triangle with lengths <script type=\"math\/tex\">3<\/script>, <script type=\"math\/tex\">3<\/script>, and <script type=\"math\/tex\">5<\/script> in <script type=\"math\/tex\">2<\/script> minutes. It can be proven that there is no way to get a valid triangle faster.<\/p>\n<h4>SAMPLE INPUT 3<\/h4>\n<pre><code class=\"text\">15 20 73\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 3<\/h4>\n<pre><code class=\"text\">39\n<\/code><\/pre>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>A triangle only has positive area when for every side of the triangle, the sum of the other two side lengths is greater than the current side's length. That is, if the triangle has side lengths <script type=\"math\/tex\">a<\/script>, <script type=\"math\/tex\">b<\/script>, and <script type=\"math\/tex\">c<\/script>, then <script type=\"math\/tex\">a + b > c<\/script>, <script type=\"math\/tex\">b + c > a<\/script>, and <script type=\"math\/tex\">a + c > b<\/script>.<\/p>\n<\/li>\n<li>\n<p>Since <script type=\"math\/tex\">a<\/script>, <script type=\"math\/tex\">b<\/script>, and <script type=\"math\/tex\">c<\/script> are already sorted in non-decreasing order, the tightest condition out of the above three is <script type=\"math\/tex\">a + b > c<\/script> (if this is satisfied, the other two will also be). So, how could you determine the # of minutes needed in order to satisfy this condition?<\/p>\n<\/li>\n<\/ol>",
        "bonus": "",
        "version": 2
    },
    "PRA2": {
        "title": "Budget Fashion",
        "type": "Advanced",
        "state": "up",
        "maxScore": 100,
        "blurb": "Saving money AND water! [100+15]",
        "description": "<p>Mary has been quite busy lately; her <script type=\"math\/tex\">N<\/script> day schedule is packed with different business meetings. Mary has a pretty good sense of fashion, so she always wears business clothes to business meetings, and she wears casual clothes on other days.<\/p>\n<p>Whenever Mary wears a piece of clothing, it becomes dirty, meaning that it cannot be worn again until she washes her clothes. Mary washes all of her used clothes at once, so it only takes one wash to clean all the dirty clothes that she currently has. At the end of each day (after wearing the clothing required for that day), she can choose whether or not to wash her clothes.<\/p>\n<p>Budgeting is a huge issue for Mary, so she refuses to buy any new clothing apart from the <script type=\"math\/tex\">B<\/script> business clothes and <script type=\"math\/tex\">C<\/script> casual clothes she already has. Mary knows that this decision will probably result in her having to wash her clothes really often... but she'd like to know for sure.<\/p>\n<p>Help Mary determine the <strong>minimum # of times she has to wash her clothes<\/strong> in order to wear the correct type of clothing for all of the <script type=\"math\/tex\">N<\/script> days in her schedule (if she acts optimally).<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line contains three integers <script type=\"math\/tex\">N<\/script>, <script type=\"math\/tex\">B<\/script>, and <script type=\"math\/tex\">C<\/script>, representing the number of days in Mary's schedule, the number of business clothes Mary has, and the number of casual clothes Mary has (respectively).<br \/>\nThe next line contains <script type=\"math\/tex\">N<\/script> space-separated integers, where the <script type=\"math\/tex\">i<\/script>th integer represents the style of clothing required for day <script type=\"math\/tex\">i<\/script> (<strong>0 for business clothes, 1 for casual clothes<\/strong>).<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>A single integer: The minimum # of times Mary has to wash her clothes if she acts optimally.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">1 \\leq N \\leq 5{,}000<\/script>\n<br \/>\n<script type=\"math\/tex\">1 \\leq B, C \\leq N<\/script>\n<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">9 1 2\n1 0 1 0 0 1 0 1 1\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">3\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>There are <script type=\"math\/tex\">9<\/script> days in Mary's schedule. She has <script type=\"math\/tex\">1<\/script> set of business clothes, and <script type=\"math\/tex\">2<\/script> sets of casual clothes (all these clothes start out as clean). The below sequence shows one way for Mary to wear the correct type of clothing every day, while only washing her clothes <script type=\"math\/tex\">3<\/script> times - the minimal amount for the sample input.<\/p>\n<p>Day 1 end: <script type=\"math\/tex\">1<\/script> business, <script type=\"math\/tex\">1<\/script> casual<br \/>\nDay 2 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">1<\/script> casual<br \/>\nDay 3 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">0<\/script> casual<br \/>\n--- Wash clothes before next day ---<br \/>\nDay 4 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">2<\/script> casual<br \/>\n--- Wash clothes before next day ---<br \/>\nDay 5 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">2<\/script> casual<br \/>\nDay 6 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">1<\/script> casual<br \/>\n--- Wash clothes before next day ---<br \/>\nDay 7 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">2<\/script> casual<br \/>\nDay 8 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">1<\/script> casual<br \/>\nDay 9 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">0<\/script> casual<\/p>\n<p>Note that Mary does <em>not<\/em> need to wash her clothes at the end of day 9.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>Here's an easier question to think about: How long can Mary hold out before she <em>has<\/em> to wash her clothes? (What conditions would force Mary to wash her clothes?)<\/p>\n<\/li>\n<li>\n<p>Does it ever make sense for Mary to wash her clothes earlier than she absolutely has to?<\/p>\n<\/li>\n<li>\n<p>[Bonus hint] Instead of keeping track of the # of clothes Mary has left, it may help more to track the # of <script type=\"math\/tex\">0<\/script>, <script type=\"math\/tex\">1<\/script>, and <script type=\"math\/tex\">2<\/script> days that she has come across without washing her clothes. See if you can use this info to find out when Mary has to wash them.<\/p>\n<\/li>\n<\/ol>\n<hr>\n\n<h4>SOLUTION<\/h4>\n<p>First of all, let's try to answer an easier question: How long can Mary hold out before she <em>has<\/em> to wash her clothes?<\/p>\n<p>Since Mary is forced to wear the right type of clothing for each day, she will be forced to wash her clothes once she runs out of the type of clothing required for a day. In terms of code, Mary is forced to wash her clothes when she has <script type=\"math\/tex\">0<\/script> clothes of the type required on a day.<\/p>\n<p>Intuitively, it never makes sense for Mary to wash her clothes earlier than she absolutely has to. There is no benefit to washing her clothes early; since she washes all of them at once, the # of clean clothes she has will be the same after each wash, regardless of how early she washes them. The later Mary washes her clothes, the less days she will have to deal with.<\/p>\n<p>This suggests a <strong>greedy solution<\/strong>: Iterate through each day in Mary's schedule, tracking the number of each type of clothing that she has. Once Mary reaches a point where she needs to wear a type of clothing that she has <script type=\"math\/tex\">0<\/script> of, she is forced to wash her clothes (and the # of clean clothes she has is reset to <script type=\"math\/tex\">B<\/script> business and <script type=\"math\/tex\">C<\/script> casual). Keep doing this for all <script type=\"math\/tex\">N<\/script> days in her schedule to get the answer.<\/p>",
        "bonus": "<h4>BONUS (15 points)<\/h4>\n<p>After thinking about her schedule a bit, Mary realized that there are some days where she's fine with wearing either type of clothing (business or casual). These days will be represented by the integer <script type=\"math\/tex\">2<\/script> (in addition to the <script type=\"math\/tex\">0<\/script> for business and <script type=\"math\/tex\">1<\/script> for casual).<\/p>\n<p>The question remains the same: Help Mary determine the minimum # of times she has to wash her clothes in order to wear the correct type of clothing for all of the <script type=\"math\/tex\">N<\/script> days in her schedule (if she acts optimally - this includes her choice of business or casual clothing for the days of type <script type=\"math\/tex\">2<\/script>).<\/p>\n<p>For about 40% of the points, <script type=\"math\/tex\">N < 60<\/script>, and the number of days of type <script type=\"math\/tex\">2<\/script> will be less than <script type=\"math\/tex\">20<\/script>.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">9 2 1\n2 0 1 2 0 0 2 2 2\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">2\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>Here is a sequence that allows Mary to wash her clothes only <script type=\"math\/tex\">2<\/script> times:<\/p>\n<p>Day 1 end: <script type=\"math\/tex\">1<\/script> business, <script type=\"math\/tex\">1<\/script> casual (Wore business clothes)<br \/>\nDay 2 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">1<\/script> casual<br \/>\nDay 3 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">0<\/script> casual<br \/>\n--- Wash clothes before next day ---<br \/>\nDay 4 end: <script type=\"math\/tex\">2<\/script> business, <script type=\"math\/tex\">0<\/script> casual (Wore casual clothes)<br \/>\nDay 5 end: <script type=\"math\/tex\">1<\/script> business, <script type=\"math\/tex\">0<\/script> casual<br \/>\nDay 6 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">0<\/script> casual<br \/>\n--- Wash clothes before next day ---<br \/>\nDay 7 end: <script type=\"math\/tex\">1<\/script> business, <script type=\"math\/tex\">1<\/script> casual (Wore business clothes)<br \/>\nDay 8 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">1<\/script> casual (Wore business clothes)<br \/>\nDay 9 end: <script type=\"math\/tex\">0<\/script> business, <script type=\"math\/tex\">0<\/script> casual (Wore casual clothes)<\/p>\n<p>A hint has been added for this bonus. It can be found in the hints for the main problem.<\/p>",
        "version": 2
    },
    "PRI2": {
        "title": "Shell Game",
        "type": "Intermediate",
        "state": "up",
        "maxScore": 100,
        "blurb": "Pay attention... [100]",
        "description": "<p>Henry and Ellie are playing a game at their local county fair.<\/p>\n<p>In this game, Henry puts three inverted shells on a table and places a small green pea under one of them, allowing Ellie to see where the pea was initially placed. Henry then proceeds to swap pairs of shells, while Ellie attempts to keep track of where the pea is. After all the swaps, Ellie has to guess the final location of the pea.<\/p>\n<p>While playing this game, Ellie got distracted by the curious sight of two cows staring at her, and she lost track of the pea's location. Given the initial location of the pea, and the swaps that Henry made, please help Ellie determine the <strong>final location of the pea<\/strong>.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains two integers <script type=\"math\/tex\">N<\/script> and <script type=\"math\/tex\">S<\/script>, giving the number of swaps and the initial location of the pea (respectively). <script type=\"math\/tex\">S<\/script> is either 1, 2, or 3.<\/p>\n<p>Each of the next <script type=\"math\/tex\">N<\/script> lines describes a step of the game and contains two integers <script type=\"math\/tex\">a<\/script> and <script type=\"math\/tex\">b<\/script>, indicating that shells <script type=\"math\/tex\">a<\/script> and <script type=\"math\/tex\">b<\/script> were swapped by Henry. Both of these integers are either 1, 2, or 3, and <script type=\"math\/tex\">a \\neq b<\/script> (in other words, all swaps will be valid).<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output a single integer: The final location of the pea. This integer should be either 1, 2, or 3.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">1 \\leq N \\leq 100<\/script>\n<br \/>\n(The number of swaps Henry makes will be in the range <script type=\"math\/tex\">1...100<\/script>.)<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">4 2\n1 2\n3 2\n1 3\n2 1\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">3\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>There are <script type=\"math\/tex\">4<\/script> swaps, and the pea starts in shell <script type=\"math\/tex\">2<\/script>.<\/p>\n<p>In the first swap, the 1st and 2nd locations are swapped, so the pea is now in shell <script type=\"math\/tex\">1<\/script>.<br \/>\nIn the second swap, the 3rd and 2nd locations are swapped. Since the pea is in shell <script type=\"math\/tex\">1<\/script>, it is not moved by this swap.<br \/>\nThe third swap moves the pea to shell <script type=\"math\/tex\">3<\/script>.<br \/>\nThe fourth swap does not affect the pea's location.<\/p>\n<p>So, the pea ends up in shell <script type=\"math\/tex\">3<\/script> after all the swaps.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>Here is some base source code for all 3 languages. It handles all the input parsing required, but it does not do anything to actually solve the problem; that's up to you to figure out!<\/li>\n<\/ol>\n<p>Java<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRI2 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int S = sc.nextInt();\n\n        \/\/ Process all swaps\n        for (int i = 0; i &lt; N; i++) {\n            int a = sc.nextInt();\n            int b = sc.nextInt();\n            \/\/ Do something here\n        }\n\n        System.out.println(1);\n    }\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python3\">N, S = map(int, input().split())\n\n# Process all swaps\nfor i in range(N):\n    a, b = map(int, input().split())\n    # Do something here\n\nprint(1)\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main() {\n    int N, S;\n    cin &gt;&gt; N &gt;&gt; S;\n\n    \/\/ Process all swaps\n    for (int i = 0; i &lt; N; i++) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        \/\/ Do something here\n    }\n\n    cout &lt;&lt; 1 &lt;&lt; endl;\n    return 0;\n}\n<\/code><\/pre>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. Try using a variable to keep track of the pea's current location. For each swap, check if it affects the pea's location. If it does, move the pea accordingly.<\/p>\n<hr>\n\n<h4>SOLUTION<\/h4>\n<p>This is a simulation problem; the goal is to keep track of the pea by simulating the swaps that Henry makes.<\/p>\n<p>One way to approach this problem is to track the pea's current location in a variable; let's call this variable <script type=\"math\/tex\">L<\/script>. Initially, <script type=\"math\/tex\">L=S<\/script> (since the pea starts at that location).<\/p>\n<p>Whenever there is a swap that involves the location <script type=\"math\/tex\">L<\/script>, the pea should be swapped to the other location. That is, if <script type=\"math\/tex\">a=L<\/script>, the pea is moved to location <script type=\"math\/tex\">b<\/script>, and vice versa. If neither <script type=\"math\/tex\">a<\/script> nor <script type=\"math\/tex\">b<\/script> are equal to <script type=\"math\/tex\">L<\/script>, then the swap can safely be ignored.<\/p>\n<p>A model Java solution for this problem can be found below.<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRI2 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int S = sc.nextInt();\n        \/\/ Process all swaps\n        int L = S;\n        for (int i = 0; i &lt; N; i++) {\n            int a = sc.nextInt();\n            int b = sc.nextInt();\n            if (L == a) {\n                L = b;\n            } else if (L == b) {\n                L = a;\n            }\n        }\n        System.out.println(L);\n    }\n}\n<\/code><\/pre>",
        "bonus": "",
        "version": 2
    },
    "PRB2b": {
        "title": "Test Taking (Harder)",
        "type": "Beginner",
        "state": "up",
        "maxScore": 50,
        "blurb": "Introducing variables [50+15]",
        "description": "<p>The harder version of this problem is very similar to the easier version. The only difference is that there are now a variable amount of questions on the exam, instead of just 3.<\/p>\n<p>(In the future, easier \/ harder versions of a problem will not be divided into two separate problems. Instead, there will be one problem with multiple <em>subtasks<\/em>, where each subtask is worth some number of points.)<\/p>\n<hr>\n\n<p>Eve has a computer science exam coming up. <strong>This exam will have <script type=\"math\/tex\">N<\/script> questions<\/strong>, and each question will have a point value. <script type=\"math\/tex\">N<\/script> is a variable that will be given to your program in the input. Eve is a very responsible student, so she is prepared enough to get full points on every question in the exam.<\/p>\n<p>However, her CS teacher is very strict with time limits... After taking a mock exam, Eve has determined that she will need to skip exactly one question on this test in order to finish in time. She will get no points for the question that she skips.<\/p>\n<p>Of course, Eve wants to get as high a score on this test as possible. Please help Eve determine the maximum possible score she can get on the CS exam if she is forced to skip one question.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The first line of input contains a single integer <script type=\"math\/tex\">N<\/script>: The number of questions on the CS test.<\/p>\n<p>The second line of input contains <script type=\"math\/tex\">N<\/script> space-separated integers. These integers represent the number of points that each question is worth.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output a single integer: The maximum possible score Eve can get on the CS test if she is forced to skip one question.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">2 \\leq N \\leq 100<\/script>\n<br \/>\n(The number of questions on the CS test will be in the range <script type=\"math\/tex\">2...100<\/script>.)<\/p>\n<p>The number of points each question is worth will be in the range <script type=\"math\/tex\">1...100<\/script>.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">4\n20 25 10 25\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">70\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>There are <script type=\"math\/tex\">4<\/script> questions on the CS exam. The questions are worth <script type=\"math\/tex\">20<\/script>, <script type=\"math\/tex\">25<\/script>, <script type=\"math\/tex\">10<\/script>, and <script type=\"math\/tex\">25<\/script> points.<\/p>\n<p>To get the best possible score, Eve should skip question <script type=\"math\/tex\">3<\/script>. This results in a final score of <script type=\"math\/tex\">20<\/script> + <script type=\"math\/tex\">25<\/script> + <script type=\"math\/tex\">25<\/script> = <script type=\"math\/tex\">70<\/script> points.<\/p>\n<h4>NOTES<\/h4>\n<p>The concept of a <strong>for loop<\/strong> may help with solving this problem. Lots of useful tutorials explaining for loops are available online.<br \/>\nHere is a sample for loop in each language that prints out the numbers from 0 to 9, inclusive:<\/p>\n<p>Java<\/p>\n<pre><code class=\"java\">for (int i = 0; i &lt; 10; i++) {\n    System.out.println(i);\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\">for i in range(10):\n    print(i)\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">for (int i = 0; i &lt; 10; i++) {\n    cout &lt;&lt; i &lt;&lt; endl;\n}\n<\/code><\/pre>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>Here is some sample source code for all 3 languages. This code uses a <strong>for loop<\/strong> to store the point values of the questions into an <strong>array<\/strong>. Then, it prints out the sum of that array. It doesn't solve the problem though; that's up to you to figure out!<\/li>\n<\/ol>\n<p>Java<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRB2b {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        \/\/ Store point values in an array\n        int[] points = new int[N];\n        for (int i = 0; i &lt; N; i++) {\n            points[i] = sc.nextInt();\n        }\n\n        \/\/ Print out the sum of the array\n        int pointSum = 0;\n        for (int i = 0; i &lt; N; i++) {\n            pointSum += points[i];\n        }\n        System.out.println(pointSum);\n    }\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\">N = int(input())\n# Store point values in an array\npoints = list(map(int, input().split()))\n\n# Print out the sum of the array\npoint_sum = 0\nfor i in range(N):\n    point_sum += points[i]\nprint(point_sum)\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin &gt;&gt; N;\n    \/\/ Store point values in an array\n    int* points = new int[N];\n    for (int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; points[i];\n    }\n\n    \/\/ Print out the sum of the array\n    int pointSum = 0;\n    for (int i = 0; i &lt; N; i++) {\n        pointSum += points[i];\n    }\n    cout &lt;&lt; pointSum &lt;&lt; endl;\n    return 0;\n}\n<\/code><\/pre>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. The score Eve will get on the CS exam is equal to the sum of the point values for all the questions on the exam, minus the # of points that the question Eve decides to skip is worth. So, given this formula, what question should Eve skip to maximize the score that she gets on this exam?<\/p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. It might help to know how to find the minimum of two numbers, or the maximum of two numbers, as this may help with solving the problem.<\/p>\n<p>In Java, <strong>Math.min(a, b)<\/strong> returns the minimum of two numbers a and b, while <strong>Math.max(a, b)<\/strong> returns the maximum of two numbers a and b.<\/p>\n<p>In Python 3, the <strong>min(a, b)<\/strong> and <strong>max(a, b)<\/strong> functions do a similar thing.<\/p>\n<p>C++ also has min(a, b) and max(a, b) functions, although you will need to do <strong>#include &lt;algorithm&gt;<\/strong> to use it.<\/p>\n<hr>\n\n<h4>SOLUTION<\/h4>\n<p>Intuitively, Eve should skip the question worth the least number of points in order to maximize the score she gets on the CS test. So, take the sum of the point values of all the questions. Then, subtract the point value of the question worth the least number of points to get the answer.<\/p>\n<p>Here is some Java code that demonstrates the above idea. This code uses a <strong>for loop<\/strong> to store the point values of the questions into an <strong>array<\/strong>, and to find the question with the least point value.<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRB2b {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        \/\/ Store point values in an array\n        int[] points = new int[N];\n        for (int i = 0; i &lt; N; i++) {\n            points[i] = sc.nextInt();\n        }\n        \/\/ Find the question with the least point value\n        int least = points[0];\n        for (int i = 1; i &lt; N; i++) {\n            least = Math.min(points[i], least);\n        }\n        \/\/ Calculate the answer (sum of points - least point value)\n        int answer = 0;\n        for (int i = 0; i &lt; N; i++) {\n            answer += points[i];\n        }\n        answer -= least;\n        System.out.println(answer);\n    }\n}\n<\/code><\/pre>",
        "bonus": "<h4>BONUS (15 points)<\/h4>\n<p>After looking over her mock test, Eve realizes she actually went over the time limit by a lot more than she originally thought! Now, in order to finish in time, she will need to skip <script type=\"math\/tex\">K<\/script> questions instead of just one.<\/p>\n<p>Please help Eve determine the maximum possible score she can get on the CS exam if she is now forced to skip <script type=\"math\/tex\">K<\/script> questions.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">2 \\leq N \\leq 100<\/script>\n<\/p>\n<p>\n<script type=\"math\/tex\">0 \\leq K \\leq N<\/script>\n<br \/>\n(The number of questions Eve needs to skip will be in the range <script type=\"math\/tex\">0...N<\/script>.)<\/p>\n<p>The number of points each question is worth will be in the range <script type=\"math\/tex\">1...100<\/script>.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>To be consistent with the base problem's input format, the first 2 lines of input remain the same.<\/p>\n<p>The third line of input contains a single integer <script type=\"math\/tex\">K<\/script>, the number of questions that Eve needs to skip.<br \/>\n(<script type=\"math\/tex\">K=1<\/script> for all test cases in the base problem.)<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>The output format is the same as in the base problem.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">4\n20 25 10 25\n2\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">50\n<\/code><\/pre>\n\n<h4>NOTES<\/h4>\n<p>As a preview of what's to come, the final test case of this bonus will have special constraints. In the final test case, <script type=\"math\/tex\">N=200{,}000<\/script>, and the point value of each question will be in the range <script type=\"math\/tex\">1...10^9<\/script>.<\/p>\n<p>To get your code accepted for the final test case, you will need not just a <em>correct<\/em> solution, but an <em>efficient<\/em> one as well. Also note that the answer may not fit into a 32-bit integer!<\/p>\n<p>Don't worry too much if you can't get the final test case; just skip it for now. In general, writing correct code is more important than writing efficient code. Future challenge problems will help guide you towards writing both correct and efficient programs.<\/p>\n<p>(With that being said... here's a very subtle hint: The concept of <em>sorting<\/em> may help you with solving the final test case.)<\/p>",
        "version": 2
    },
    "PRB2a": {
        "title": "Test Taking (Easier)",
        "type": "Beginner",
        "state": "up",
        "maxScore": 50,
        "blurb": "ACing the exam [50]",
        "description": "<p>When you have time, please take this short <a href=\"https:\/\/forms.gle\/DR8SqbXeG1NbLEbU6\" target=\"_blank\">survey<\/a> [1-2 minutes] to help us improve our challenge problems! You may even get leaderboard points for it...<\/p>\n<hr>\n\n<p>Eve has a computer science exam coming up. This exam will have <script type=\"math\/tex\">3<\/script> questions, and each question will have a point value. Eve is a very responsible student, so she is prepared enough to get full points on every question in the exam.<\/p>\n<p>However, her CS teacher is very strict with time limits... After taking a mock exam, Eve has determined that she will need to skip exactly one question on this test in order to finish in time. She will get no points for the question that she skips.<\/p>\n<p>Of course, Eve wants to get as high a score on this test as possible. Please help Eve determine the <strong>maximum possible score<\/strong> she can get on the CS exam if she is forced to skip one question.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>Your program will receive <script type=\"math\/tex\">3<\/script> space-separated integers as input. These integers represent the number of points that each question is worth.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output a single integer: The maximum possible score Eve can get on the CS test if she is forced to skip one question.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>The number of points each question is worth will be in the range <script type=\"math\/tex\">1...100<\/script>.<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">20 10 30\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">50\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>The 3 questions on the CS exam are worth <script type=\"math\/tex\">20<\/script>, <script type=\"math\/tex\">10<\/script>, and <script type=\"math\/tex\">30<\/script> points.<\/p>\n<p>To get the best possible score, Eve should skip question <script type=\"math\/tex\">2<\/script>. This results in a final score of <script type=\"math\/tex\">20<\/script> + <script type=\"math\/tex\">30<\/script> = <script type=\"math\/tex\">50<\/script> points.<\/p>\n<p>Tip: A quick and easy way to check if your program doesn't have any obvious bugs is to <strong>try running your program locally<\/strong> on the sample input, and make sure it produces the correct output. This can be done by running the program, copying and pasting the sample input into the console, and making sure that the answer printed by your code is the same as the sample output.<\/p>\n<p>Feel free to check the hints if you need help (or you can ask in the discussion channel on the <a href=\"https:\/\/discord.gg\/82Ef6eA\" target=\"_blank\">HHS Programming Discord<\/a>).<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>Here is some sample source code for all 3 languages. This code stores the point values of the questions into 3 variables, and then prints out the sum of these point values. It doesn't solve the problem though; that's up to you to figure out!<\/li>\n<\/ol>\n<p>Java<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRB2a {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int A = sc.nextInt();\n        int B = sc.nextInt();\n        int C = sc.nextInt();\n\n        \/\/ Print out the sum of the variables\n        System.out.println(A + B + C);\n    }\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\">A, B, C = map(int, input().split())\n\n# Print out the sum of the variables\nprint(A + B + C)\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main() {\n    int A, B, C;\n    cin &gt;&gt; A &gt;&gt; B &gt;&gt; C;\n\n    \/\/ Print out the sum of the variables\n    cout &lt;&lt; A + B + C &lt;&lt; endl;\n    return 0;\n}\n<\/code><\/pre>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. It might help to know how to find the minimum of two numbers, or the maximum of two numbers, as this may help with solving the problem.<\/p>\n<p>In Java, <strong>Math.min(a, b)<\/strong> returns the minimum of two numbers a and b, while <strong>Math.max(a, b)<\/strong> returns the maximum of two numbers a and b.<\/p>\n<p>In Python 3, the <strong>min(a, b)<\/strong> and <strong>max(a, b)<\/strong> functions do a similar thing.<\/p>\n<p>C++ also has min(a, b) and max(a, b) functions, although you will need to do <strong>#include &lt;algorithm&gt;<\/strong> to use it.<\/p>\n<hr>\n\n<h4>SOLUTION<\/h4>\n<p>Intuitively, Eve should skip the question worth the least number of points in order to maximize the score she gets on the CS test. So, take the sum of the point values of all the questions. Then, subtract the point value of the question worth the least number of points to get the answer.<\/p>\n<p>Here is some Java code that demonstrates the above idea.<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRB2a {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int A = sc.nextInt();\n        int B = sc.nextInt();\n        int C = sc.nextInt();\n        \/\/ Find question worth least number of points\n        int minPoints = Math.min(A, B);\n        minPoints = Math.min(C, minPoints);\n        \/\/ Caluclate &amp; output answer\n        int answer = A + B + C - minPoints;\n        System.out.println(answer);\n    }\n}\n<\/code><\/pre>",
        "bonus": "",
        "version": 2
    },
    "PRA1": {
        "title": "High Card Wins",
        "type": "Advanced",
        "state": "up",
        "maxScore": 100,
        "blurb": "The rigged card game [100+10]",
        "description": "<p>You and your friend just got into a heated argument, so of course, you've decided to settle the debate once and for all by playing a quick game of High Card Wins!<\/p>\n<p>At the start of High Card Wins, both players receive exactly <script type=\"math\/tex\">N<\/script> cards. Each card has an integer number in the range <script type=\"math\/tex\">1...2N<\/script> written on it, and no two cards have the exact same number on them (in other words, the cards have <strong>distinct numbers<\/strong>). Note that this means every number from <script type=\"math\/tex\">1<\/script> to <script type=\"math\/tex\">2N<\/script> will be used exactly once.<\/p>\n<p>High Card Wins is a turn-based card game. On each turn, both you and your friend secretly choose one of your cards to play. Then, you'll both play your chosen card at the same time. The person with a <strong>higher card wins<\/strong> (larger number), and gets to take both of the played cards. This repeats until someone runs out of cards, in which case the person who still has cards remaining is the winner!<\/p>\n<p>When your friend was dealing the cards out, they seemed to be a bit... picky. You're suspicious that your friend might've dealt the cards in an unfair way, and that you would be wasting your time to even try and beat them. Luckily, you managed to catch a glimpse of the cards that your opponent got (but you're sure they peeked at your cards too). Assuming you and your friend are absolute pros at High Card Wins, meaning that you two always make the right moves (you both play optimally), can you figure out who will ultimately win this game?<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The 1st line of input contains a single integer <script type=\"math\/tex\">N<\/script>, the number of cards each person starts with.<\/p>\n<p>The 2nd line of input contains <script type=\"math\/tex\">N<\/script> integers, representing the cards that you start out with.<\/p>\n<p>The 3rd line of input contains <script type=\"math\/tex\">N<\/script> integers, representing the cards that your friend starts out with.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Depending on who will win if you both play optimally, print either \"You win\" or \"Friend wins\" (make sure to match capitalization).<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">1 \\leq N \\leq 2{,}000<\/script>\n<br \/>\n(The number of cards each person starts with will be in the range <script type=\"math\/tex\">1...2{,}000<\/script>.)<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">3\n5 1 6\n2 4 3\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">You win\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>You start with the cards 5, 1, and 6. Your friend starts with the cards 2, 4, and 3.<\/p>\n<p>Here is an example of how the game could play out (this is not optimal play, it's just to demo the game):<\/p>\n<p>Turn 1: You play 5, your friend plays 3. You take both cards. (5 1 6 3 vs 2 4)<br \/>\nTurn 2: You play 1, your friend plays 4. Your friend takes both cards. (5 6 3 vs 2 4 1)<br \/>\nTurn 3: You play 6, your friend plays 4. You take both cards. (5 6 3 4 vs 2 1)<br \/>\nTurn 4: You play 3, your friend plays 1. You take both cards. (5 6 3 4 1 vs 2)<br \/>\nTurn 5: You play 4, your friend plays 2. You take both cards, and since your opponent no longer has any cards, you win!<\/p>\n<p>It can be proven that if both you and your friend play optimally, you are guaranteed to win the card game (for the sample input).<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>What exactly does \"playing optimally\" mean? If you were actually playing a game of High Card Wins, how would you choose the card that you wanted to play for each turn?<\/p>\n<\/li>\n<li>\n<p>Is there a card that is unbeatable in this game (one that will never change hands, no matter what)?<\/p>\n<\/li>\n<\/ol>\n<hr>\n\n<h4>SOLUTION<\/h4>\n<p>This problem asks us to figure out who will win in a game of High Card Wins. In this game, both players receive <script type=\"math\/tex\">N<\/script> cards from a deck of cards numbered <script type=\"math\/tex\">1...2N<\/script>. Each turn, both players pick a card to play, and the person with the higher numbered card gets to take both of the cards. The person who runs out of cards loses.<\/p>\n<p>One way to approach a problem like this is to try and figure out whether there is a winning strategy for any of the players. In this case, it turns out that a simple winning strategy exists: Whoever has the highest numbered card (with value <script type=\"math\/tex\">2N<\/script>) can simply play that card over and over until the other person runs out of cards.<\/p>\n<p>Since the card with value <script type=\"math\/tex\">2N<\/script> cannot be beaten, the player who doesn't have that card is doomed; none of their cards can beat the opponent's <script type=\"math\/tex\">2N<\/script> card, so they will eventually lose their entire hand.<\/p>\n<p>So, the solution for this problem is as follows: Check if you start out with the card that has value <script type=\"math\/tex\">2N<\/script>. If you do, then you win; otherwise, your friend wins.<\/p>\n<p>Note: A common bug in Python submissions was forgetting to convert the cards into integers. This caused Python to treat the card values as strings, leading to weird issues when trying to do things like find the maximum card (In terms of strings, max means last in lexicographical order. One example where this could produce unexpected results is with the card values \"100\" and \"2\"). This can be solved by using int(card) to convert the strings into integers.<\/p>",
        "bonus": "<p>(Bonuses are meant to be extra challenging [think Advanced++]. If you're struggling with a bonus task, feel free to skip it, and maybe come back later when you feel like giving it another go.)<\/p>\n<h4>BONUS (10 points)<\/h4>\n<p>What if the cards didn't have to be distinct? Who would win this expanded version of the game if both of you play optimally? (The card numbers are still in the range <script type=\"math\/tex\">1...2N<\/script>.)<\/p>\n<p>Note: If there is a tie in a given turn (both you and your friend play the same numbered card), both cards are simply discarded. If both players run out of cards at the same time, the game is considered a draw, and your program should print \"Draw\".<\/p>\n<h4>SAMPLE INPUT 1 (BONUS)<\/h4>\n<pre><code class=\"text\">4\n5 8 6 8\n8 8 3 7\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 1 (BONUS)<\/h4>\n<pre><code class=\"text\">Friend wins\n<\/code><\/pre>\n\n<h4>SAMPLE INPUT 2 (BONUS)<\/h4>\n<pre><code class=\"text\">3\n1 2 3\n3 2 1\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 2 (BONUS)<\/h4>\n<pre><code class=\"text\">Draw\n<\/code><\/pre>",
        "version": 2
    },
    "PRI1": {
        "title": "Hoof, Paper, Scissors",
        "type": "Intermediate",
        "state": "up",
        "maxScore": 100,
        "blurb": "Bessie makes her move [100]",
        "description": "<p>You have probably heard of the game \"Rock, Paper, Scissors\". The cows on Farmer John's field like to play a similar game they call \"Hoof, Paper, Scissors\".<\/p>\n<p>The rules of \"Hoof, Paper, Scissors\" are simple. Two cows play against each other. They both count to three and then each simultaneously makes a gesture that represents either a hoof, a piece of paper, or a pair of scissors. <strong>Hoof beats scissors<\/strong> (since a hoof can smash a pair of scissors), <strong>scissors beats paper<\/strong> (since scissors can cut paper), and <strong>paper beats hoof<\/strong> (since the hoof can get a papercut). For example, if the first cow makes a \"hoof\" gesture and the second a \"paper\" gesture, then the second cow wins. Of course, it is also possible to tie, if both cows make the same gesture.<\/p>\n<p>Farmer John watches in fascination as two of his cows - Bessie and Elsie - play a series of <script type=\"math\/tex\">N<\/script> games of \"Hoof, Paper, Scissors\". (<script type=\"math\/tex\">N<\/script> is a variable that will be given to your program in the input.) Unfortunately, Farmer John knows that poor Bessie doesn't understand the rules of this game (she thinks the gestures are some sort of secret language).<\/p>\n<p>Farmer John would like to help Bessie win \"Hoof, Paper, Scissors\", in order to boost her self-confidence. Luckily, he knows Elsie really well, so he can predict exactly which gestures Elsie will play for each of the <script type=\"math\/tex\">N<\/script> games.<\/p>\n<p>Given the gestures that Farmer John predicts Elsie will make, please help Bessie by telling her the gestures that she has to make to win at \"Hoof, Paper, Scissors\".<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The 1st line of input contains a single integer <script type=\"math\/tex\">N<\/script>, the number of \"Hoof, Paper, Scissors\" games that Bessie will play.<\/p>\n<p>The next <script type=\"math\/tex\">N<\/script> lines of input each contain one of the three possible gestures (\"hoof\", \"paper\", and \"scissors\"). The <script type=\"math\/tex\">i<\/script>th line represents the gesture that Elsie is going to play in the <script type=\"math\/tex\">i<\/script>th game.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output <script type=\"math\/tex\">N<\/script> lines, where the <script type=\"math\/tex\">i<\/script>th line contains the gesture that Bessie should play in order to beat Elsie in the <script type=\"math\/tex\">i<\/script>th game.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">1 \\leq N \\leq 100<\/script>\n<br \/>\n(The number of \"Hoof, Paper, Scissors\" games that Bessie will play is in the range <script type=\"math\/tex\">1...100<\/script>.)<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">4\nhoof\npaper\nhoof\nscissors\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">paper\nscissors\npaper\nhoof\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>Paper beats hoof for the 1st game, scissors beats paper for the 2nd game, paper beats hoof for the 3rd game, and hoof beats scissors in the 4th game.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>A <strong>for loop<\/strong> and <strong>if-else statements<\/strong> would be really helpful for this problem. Lots of helpful information about these two topics can be found online!<\/p>\n<\/li>\n<li>\n<p>Here is some sample code in all 3 languages that simply echoes back the gesture that Elsie makes. See if you can adapt the code below to solve this problem.<\/p>\n<\/li>\n<\/ol>\n<p>Java<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRI1 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n\n        for (int i = 0; i &lt; N; i++) {\n            \/\/ Get Elsie's gesture for this game\n            String gesture = sc.next();\n            \/\/ Print out the gesture Bessie should play\n            System.out.println(gesture);\n        }\n    }\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\">N = int(input())\n\nfor i in range(N):\n    # Get Elsie's gesture for this game\n    gesture = input().strip()\n    # Print out the gesture Bessie should play\n    print(gesture)\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin &gt;&gt; N;\n\n    string gesture;\n    for (int i = 0; i &lt; N; i++) {\n        \/\/ Get Elsie's gesture for this game\n        cin &gt;&gt; gesture;\n        \/\/ Print out the gesture Bessie should play\n        cout &lt;&lt; gesture &lt;&lt; endl;\n    }\n    return 0;\n}\n<\/code><\/pre>\n\n<hr>\n\n<h4>SOLUTION<\/h4>\n<p>This problem is asking us to output the gesture that beats Elsie's gesture in <script type=\"math\/tex\">N<\/script> games of Hoof, Paper, Scissors (which is really just Rock Paper Scissors, but with a hoof instead).<\/p>\n<p>The goal of PRI1 was to teach you how to get a string input from the user, and how to use a for loop. Model solutions for this problem in all 3 languages can be found below.<\/p>\n<p>Java<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRI1 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n\n        for (int i = 0; i &lt; N; i++) {\n            \/\/ Get Elsie's gesture for this game\n            String gesture = sc.next();\n            \/\/ Print out the gesture Bessie should play\n            if (gesture.equals(&quot;hoof&quot;)) {\n                System.out.println(&quot;paper&quot;);\n            } else if (gesture.equals(&quot;paper&quot;)) {\n                System.out.println(&quot;scissors&quot;);\n            } else {\n                System.out.println(&quot;hoof&quot;);\n            }\n        }\n    }\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\">N = int(input())\n\nfor i in range(N):\n    # Get Elsie's gesture for this game\n    gesture = input().strip()\n    # Print out the gesture Bessie should play\n    if gesture == &quot;hoof&quot;:\n        print(&quot;paper&quot;)\n    elif gesture == &quot;paper&quot;:\n        print(&quot;scissors&quot;)\n    else:\n        print(&quot;hoof&quot;)\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin &gt;&gt; N;\n\n    string gesture;\n    for (int i = 0; i &lt; N; i++) {\n        \/\/ Get Elsie's gesture for this game\n        cin &gt;&gt; gesture;\n        \/\/ Print out the gesture Bessie should play\n        if (gesture == &quot;hoof&quot;) {\n            cout &lt;&lt; &quot;paper&quot; &lt;&lt; endl;\n        } else if (gesture == &quot;paper&quot;) {\n            cout &lt;&lt; &quot;scissors&quot; &lt;&lt; endl;\n        } else {\n            cout &lt;&lt; &quot;hoof&quot; &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n<\/code><\/pre>",
        "bonus": "",
        "version": 2
    },
    "PRB1": {
        "title": "The Homework Prank",
        "type": "Beginner",
        "state": "up",
        "maxScore": 100,
        "blurb": "Blake's huge mistake [100]",
        "description": "<p>One day, Blake comes to you and begs you to help him with his homework! He asks you to write a program that can sum two numbers together, and print out the result.<\/p>\n<p>However, as you begin writing this program, you ask yourself: <em>Why is Blake asking me to do this? Can't he just use a calculator?<\/em><\/p>\n<p>After thinking for a while, you realize that Blake is just SUPER lazy, which also explains why he's doing the homework on the day that it's due. So, you decide to teach Blake a lesson for relying on you to bail him out. You'll write the program for Blake... but you're going to intentionally give him the wrong answers.<\/p>\n<p>Specifically, you should write a program that <strong>sums two numbers together<\/strong>. However, the result the program prints will always be <strong>2 greater than the actual sum<\/strong>.<\/p>\n<p>For example, if the two numbers your program receives are <script type=\"math\/tex\">9<\/script> and <script type=\"math\/tex\">10<\/script>, your program would output <script type=\"math\/tex\">21<\/script> instead of <script type=\"math\/tex\">19<\/script>.<\/p>\n<p>Blake is waiting for you... pull this thing off!<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>Your program will receive two integers <script type=\"math\/tex\">A<\/script> and <script type=\"math\/tex\">B<\/script>, separated by a single space. These are the integers that Blake wants to know the sum of.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Your program should output one integer. This integer should be exactly 2 more than the sum of the numbers that Blake gave you.<br \/>\n(Output the value of <script type=\"math\/tex\">A + B + 2<\/script>.)<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">9 10\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">21\n<\/code><\/pre>\n\n<h4>EXPLANATION<\/h4>\n<p>\n<script type=\"math\/tex\">9 + 10 = 19<\/script>. Since your program should output 2 more than the actual sum of the numbers, your code should output <script type=\"math\/tex\">21<\/script>.<\/p>\n<p>Tip: When you submit a solution, it will be graded against several test cases; in each one, your program will receive a different set of input. Each of these test cases will be displayed as a small box, with the test result in the center. You can hover over each of these boxes to get more detailed info on how your program did.<\/p>\n<p>If you need help, feel free to get a hint by clicking the hint button below (or ask in the discussion channel on the <a href=\"https:\/\/discord.gg\/82Ef6eA\" target=\"_blank\">HHS Programming Discord<\/a>).<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<ol>\n<li>\n<p>If you're not too familiar with how to parse input, a quick Google search might be helpful (or you can take a look at the sample programs below). Remember not to print any prompts like \"Enter a number\" or \"The answer is\" in your program. The grader will get confused by these prompts, and your solution may be marked as wrong!<\/p>\n<\/li>\n<li>\n<p>Here is some sample source code for all 3 languages. However, all the programs below print out the <em>actual<\/em> sum of the two numbers, instead of printing out the number that is <script type=\"math\/tex\">2<\/script> greater than the sum. See if you can edit these programs to solve the problem.<\/p>\n<\/li>\n<\/ol>\n<p>Java (You'll need to change the class name to match your file name)<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRB1 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int A = sc.nextInt();\n        int B = sc.nextInt();\n        int fakeSum = A + B;\n        System.out.println(fakeSum);\n    }\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\">A, B = map(int, input().split())\nfake_sum = A + B\nprint(fake_sum)\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n\nint main() {\n    int A, B;\n    std::cin &gt;&gt; A &gt;&gt; B;\n    int fakeSum = A + B;\n    std::cout &lt;&lt; fakeSum &lt;&lt; std::endl;\n}\n<\/code><\/pre>\n\n<hr>\n\n<h4>SOLUTION<\/h4>\n<p>This problem is asking us to take in two numbers as input, and output the number that is two greater than their sum.<br \/>\nIn more formal terms, our program should take in two integers <script type=\"math\/tex\">A<\/script> and <script type=\"math\/tex\">B<\/script>. Then, it should output the integer <script type=\"math\/tex\">A+B+2<\/script>.<\/p>\n<p>The goal of PRB1 was to teach you how to get a numeric input from the user, and how to output something to the console. Sample programs showing how to do this can be found below.<\/p>\n<p>Here are some model solutions for this problem in all 3 languages.<\/p>\n<p>Java (You'll need to change the class name to match your file name)<\/p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class PRB1 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int A = sc.nextInt();\n        int B = sc.nextInt();\n        int fakeSum = A + B + 2;\n        System.out.println(fakeSum);\n    }\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\">A, B = map(int, input().split())\nfake_sum = A + B + 2\nprint(fake_sum)\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n\nint main() {\n    int A, B;\n    std::cin &gt;&gt; A &gt;&gt; B;\n    int fakeSum = A + B + 2;\n    std::cout &lt;&lt; fakeSum &lt;&lt; std::endl;\n}\n<\/code><\/pre>",
        "bonus": "",
        "version": 2
    },
    "PRB0": {
        "title": "Hello World!",
        "type": "Beginner",
        "state": "up",
        "maxScore": 100,
        "blurb": "The first problem [100]",
        "description": "<p><strong>Welcome to the challenge problem section of HHS Programming Club!<\/strong> &#128578;<\/p>\n<p>These challenge problems are designed to help sharpen your programming skills in a fun and entertaining way. Some of the problems will be quite challenging, but you'll learn a lot by solving them!<\/p>\n<p>To submit a solution to a challenge problem, scroll down to the bottom of the page, choose which programming language you want to use, select the code file that you want to submit, and click the submit button.<\/p>\n<p>When you submit a solution to a challenge problem, your code will be tested against a couple of test cases to make sure your solution is correct. In each test case, your program will be run with a different set of input, and your program should produce the correct output to get the problem correct.<\/p>\n<p>For this problem, your goal is to <strong>output the string \"Hello World!\" on a single line<\/strong>. You'll need to print the exact same string to get this problem correct (including capitalization \/ punctuation).<\/p>\n<p>Not sure which programming language to go for? If you have prior experience with a programming language, that's the one you should use! Otherwise, Java would probably be your best bet, since the school's programming courses (Intro to Programming \/ APCS) use Java.<\/p>\n<p>In order to write code for the programming language you choose, you'll need to install some stuff. Here are some helpful links to installation tutorials for each language:<\/p>\n<p><a href=\"https:\/\/www.youtube.com\/watch?v=IJ-PJbvJBGs\" target=\"_blank\">Java Installation (Part 1) - JDK<\/a><br \/>\n<a href=\"https:\/\/www.youtube.com\/watch?v=N-wXTRpR03U\" target=\"_blank\">Java Installation (Part 2) - Eclipse<\/a><br \/>\n<a href=\"https:\/\/www.youtube.com\/watch?v=lQlTENvMilE\" target=\"_blank\">C++ Installation - Codeblocks<\/a><br \/>\n<a href=\"https:\/\/www.youtube.com\/watch?v=YxHplztMQMc\" target=\"_blank\">Python Installation - Pycharm<\/a><\/p>\n<p>Alternatively, if you just want to test out some short code, you can do that without downloading anything by using online code runners like <a href=\"https:\/\/repl.it\/\" target=\"_blank\">repl.it<\/a>.<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>There is no input for this problem.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output a single line containing the string \"Hello World!\" (without the quotes).<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">Hello World!\n<\/code><\/pre>\n\n<p>If you ever need hints for a challenge problem, feel free to click on the \"Show Hints\" button below. There is no penalty for viewing hints, but try your best to solve the problem without them first. It's also completely fine (and encouraged!) to search for help online while doing the challenge problems.<\/p>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<p>Here is some sample code that solves this problem in all 3 languages.<\/p>\n<p>Java (Change the class name to match your filename)<\/p>\n<pre><code class=\"java\">public class PRB0 {\n    public static void main(String[] args) {\n        System.out.println(&quot;Hello World!&quot;);\n    }\n}\n<\/code><\/pre>\n\n<p>Python 3<\/p>\n<pre><code class=\"python\">print(&quot;Hello World!&quot;)\n<\/code><\/pre>\n\n<p>C++<\/p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n\nint main() {\n    std::cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; std::endl;\n    return 0;\n}\n<\/code><\/pre>",
        "bonus": "",
        "version": 2
    },
    "survey": {
        "title": "Survey",
        "type": "Beginner",
        "state": "up",
        "maxScore": 10,
        "blurb": "Taking a survey [10]",
        "description": "<p>Thank you for taking the survey! We really appreciate it \ud83d\ude42<\/p>\n<p>Of course, we're not just gonna give you 10 free points though...<\/p>\n<p>This problem is a pretty special one. Your program will receive a single integer <script type=\"math\/tex\">X<\/script> as input, and your goal is to output the correct integer <script type=\"math\/tex\">Y<\/script> back. However, we will not tell you how to find this correct integer.<\/p>\n<p>In order to determine how to find <script type=\"math\/tex\">Y<\/script>, you'll need to take a look at the sample inputs and outputs below. <strong>See if you can find a pattern!<\/strong><\/p>\n<p>Good luck!<\/p>\n<p>(By the way, I heard there's a hidden test problem somewhere... wasn't this problem hidden too? How did you even solve it when it was hidden? Hmm...)<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>The only line of input contains a single integer <script type=\"math\/tex\">X<\/script>.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>Output a single integer <script type=\"math\/tex\">Y<\/script>: The answer to the problem.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>\n<script type=\"math\/tex\">0 \\leq X \\leq 100{,}000<\/script>\n<br \/>\n(The integer <script type=\"math\/tex\">X<\/script> will be in the range <script type=\"math\/tex\">0...100{,}000<\/script>.)<\/p>\n<h4>SAMPLE INPUT 1<\/h4>\n<pre><code class=\"text\">11\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 1<\/h4>\n<pre><code class=\"text\">2\n<\/code><\/pre>\n\n<h4>SAMPLE INPUT 2<\/h4>\n<pre><code class=\"text\">5\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 2<\/h4>\n<pre><code class=\"text\">1\n<\/code><\/pre>\n\n<h4>SAMPLE INPUT 3<\/h4>\n<pre><code class=\"text\">86\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 3<\/h4>\n<pre><code class=\"text\">21\n<\/code><\/pre>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "<p>Here are some more sample inputs and outputs! \ud83d\ude09<\/p>\n<h4>SAMPLE INPUT 4<\/h4>\n<pre><code class=\"text\">22\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 4<\/h4>\n<pre><code class=\"text\">5\n<\/code><\/pre>\n\n<h4>SAMPLE INPUT 5<\/h4>\n<pre><code class=\"text\">4\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 5<\/h4>\n<pre><code class=\"text\">1\n<\/code><\/pre>\n\n<h4>SAMPLE INPUT 6<\/h4>\n<pre><code class=\"text\">23456\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT 6<\/h4>\n<pre><code class=\"text\">5864\n<\/code><\/pre>",
        "bonus": "",
        "version": 2
    },
    "test": {
        "title": "A Test Problem",
        "type": "Special",
        "state": "hidden",
        "maxScore": 50,
        "blurb": "Hidden test problem [50]",
        "description": "<p>Welcome.<\/p>\n<p>I have no idea how you found this, but congrats! As a reward for discovering this problem, you now get the opportunity to earn 50 free points... if you can solve it. \ud83d\ude09<\/p>\n<p>Luckily for you, this problem is SUPER simple. All you have to do is <strong>output the objectively correct numbers<\/strong>.<\/p>\n<p>By the way, here's a famous proverb:<\/p>\n<p>\"An elite person who isn't stupid would say that these are some really nice numbers (unless the numbers are not found). Of course, only the devil would actually force people to blaze it and discover the meaning of life, the universe, and everything using only the numbers.\" <em>-Abraham Lincoln<\/em><\/p>\n<p>Yep. That's all you get.<\/p>\n<p>Good luck!<\/p>\n<h4>INPUT FORMAT<\/h4>\n<p>A single integer: The number of the current test case.<\/p>\n<h4>OUTPUT FORMAT<\/h4>\n<p>A single integer: The correct number for the current test case.<\/p>\n<h4>CONSTRAINTS<\/h4>\n<p>There are 7 test cases.<\/p>\n<p>(Note: The current test case number has nothing to do with the correct number; it's just there so your program can output different numbers for each test case.)<\/p>\n<h4>SAMPLE INPUT<\/h4>\n<pre><code class=\"text\">1\n<\/code><\/pre>\n\n<h4>SAMPLE OUTPUT<\/h4>\n<pre><code class=\"text\">---REDACTED---\n<\/code><\/pre>",
        "inputForm": "",
        "sampleInput": "",
        "outputForm": "",
        "sampleOutput": "",
        "hints": "",
        "bonus": "",
        "version": 2
    },
    "Array": {
        "pr": {
            "state": "down"
        }
    }
}